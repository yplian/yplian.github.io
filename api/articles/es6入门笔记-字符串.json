{"title":"es6入门笔记-字符串","slug":"es6入门笔记-字符串","date":"2017-07-08T07:54:42.000Z","updated":"2017-07-08T07:54:42.000Z","comments":true,"path":"api/articles/es6入门笔记-字符串.json","excerpt":"es6中改进的字符表示，新增方法。<br>","covers":null,"content":"<p>es6中改进的字符表示，新增方法。<br><a id=\"more\"></a></p>\n<h2 id=\"Unicode表示法\"><a href=\"#Unicode表示法\" class=\"headerlink\" title=\"Unicode表示法\"></a>Unicode表示法</h2><p>js允许<code>\\uxxxx</code>表示\\u0000~\\uFFFF之间的字符，超出范围须用两个双字节的形式表示。<br>针对这一点，es6改进可通过<code>\\u{xxxx}</code>的方式来实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'\\z'</span> === <span class=\"string\">'z'</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">'\\172'</span> === <span class=\"string\">'z'</span> <span class=\"comment\">// true      8进制</span></span><br><span class=\"line\"><span class=\"string\">'\\x7A'</span> === <span class=\"string\">'z'</span> <span class=\"comment\">// true      16进制</span></span><br><span class=\"line\"><span class=\"string\">'\\u007A'</span> === <span class=\"string\">'z'</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;7A&#125;'</span> === <span class=\"string\">'z'</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;1F680&#125;'</span> === <span class=\"string\">'\\uD83D\\uDE80'</span><span class=\"comment\">// true 🚀</span></span><br></pre></td></tr></table></figure>\n<p>点击跳转<a href=\"http://www.ruanyifeng.com/blog/2014/12/unicode.html\" target=\"_blank\" rel=\"noopener\">Unicode详细介绍</a>。</p>\n<h2 id=\"String-prototype-codePointAt-pos\"><a href=\"#String-prototype-codePointAt-pos\" class=\"headerlink\" title=\"String.prototype.codePointAt(pos)\"></a>String.prototype.codePointAt(pos)</h2><p>相对于<code>String.prototype.charCodeAt()</code>返回0到65535,处理UTF-16的单一编码。<br>该方法能够正确处理 4 个字节储存的字符，传入元素索引的位置，返回在字符串中的给定索引的编码单元体现的数字，未找到返回<code>undefind</code>。字符为两个字节时，返回结果同<code>charCodeAt</code>方法相同。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'𠮷a'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">0</span>) <span class=\"comment\">// 134071</span></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">1</span>) <span class=\"comment\">// 57271</span></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">2</span>) <span class=\"comment\">// 97</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">0</span>).toString(<span class=\"number\">16</span>) <span class=\"comment\">// \"20bb7\"</span></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">2</span>).toString(<span class=\"number\">16</span>) <span class=\"comment\">// \"61\"</span></span><br></pre></td></tr></table></figure>\n<p>对于上例中a的下标为2，而不是1，可以通过<code>for...of...</code>来解决。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'𠮷a'</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> ch <span class=\"keyword\">of</span> s) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(ch.codePointAt(<span class=\"number\">0</span>).toString(<span class=\"number\">16</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简单应用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">is32Bit</span>(<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c.codePointAt(<span class=\"number\">0</span>) &gt; <span class=\"number\">0xFFFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">is32Bit(<span class=\"string\">\"𠮷\"</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">is32Bit(<span class=\"string\">\"a\"</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"String-fromCodePoint-num1-…-numN\"><a href=\"#String-fromCodePoint-num1-…-numN\" class=\"headerlink\" title=\"String.fromCodePoint(num1[, …[, numN]])\"></a>String.fromCodePoint(num1[, …[, numN]])</h2><p>相对于<code>String.fromCharCode(num1, ..., numN)</code>不能识别大于0xFFFF的码点。如果大于，最高位2被舍弃。<br>该静态方法返回使用指定的代码点序列创建的字符串。传入一串 Unicode 编码(多参数会合并)，返回 Unicode 编码创建的字符串。参数异常，抛出<code>RangeError</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x20BB7</span>)</span><br><span class=\"line\"><span class=\"comment\">// \"𠮷\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x78</span>, <span class=\"number\">0x1f680</span>, <span class=\"number\">0x79</span>) === <span class=\"string\">'x\\uD83D\\uDE80y'</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字符遍历器for…of\"><a href=\"#字符遍历器for…of\" class=\"headerlink\" title=\"字符遍历器for…of\"></a>字符遍历器for…of</h2><p>相对于传统for，优点是可以识别大于0xFFFF的码点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x20BB7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; text.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(text[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \" \"</span></span><br><span class=\"line\"><span class=\"comment\">// \" \"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> text) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"𠮷</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"String-prototype-normalize\"><a href=\"#String-prototype-normalize\" class=\"headerlink\" title=\"String.prototype.normalize()\"></a>String.prototype.normalize()</h2><p>按照指定的一种 Unicode 正规形式将当前字符串正规化。传入了非法的参数值, 则会抛出 RangeError 异常.默认<code>NFC</code>形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"\\u1E9B\\u0323\"</span>;</span><br><span class=\"line\">str.normalize(<span class=\"string\">\"NFC\"</span>); <span class=\"comment\">// \"\\u1E9B\\u0323\"</span></span><br><span class=\"line\">str.normalize(); <span class=\"comment\">// same as above</span></span><br><span class=\"line\"></span><br><span class=\"line\">str.normalize(<span class=\"string\">\"NFD\"</span>);<span class=\"comment\">// \"\\u017F\\u0323\\u0307\"</span></span><br><span class=\"line\">str.normalize(<span class=\"string\">\"NFKC\"</span>); <span class=\"comment\">// \"\\u1E69\"</span></span><br><span class=\"line\">str.normalize(<span class=\"string\">\"NFKD\"</span>); <span class=\"comment\">// \"\\u0073\\u0323\\u0307\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"includes-startsWith-endsWith\"><a href=\"#includes-startsWith-endsWith\" class=\"headerlink\" title=\"includes(), startsWith(), endsWith()\"></a>includes(), startsWith(), endsWith()</h2><p>相对于js只有<code>indexof()</code>方法，es6新增三种.</p>\n<ul>\n<li>includes()：返回布尔值，表示是否找到了参数字符串。</li>\n<li>startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。</li>\n<li>endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。</li>\n</ul>\n<p>第一个参数为需要搜索的字符，第二个参数为开始搜索的位置。endsWith的第二个参数为前N个字符搜索。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.startsWith(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'!'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'o'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'Hello'</span>, <span class=\"number\">5</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'Hello'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"String-prototype-repeat\"><a href=\"#String-prototype-repeat\" class=\"headerlink\" title=\"String.prototype.repeat()\"></a>String.prototype.repeat()</h2><p>构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。参数为负数或<code>infinite</code>，抛出<code>RangeError</code>错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>) <span class=\"comment\">// \"xxx\"</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">0</span>) <span class=\"comment\">// \"\"</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">Infinity</span>)<span class=\"comment\">// RangeError</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">-1</span>)<span class=\"comment\">// RangeError</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">NaN</span>) <span class=\"comment\">// \"\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"padStart-，padEnd\"><a href=\"#padStart-，padEnd\" class=\"headerlink\" title=\"padStart()，padEnd()\"></a>padStart()，padEnd()</h2><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。<br>第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串。第二个参数省略时，用空格代替。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'ababx'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'abax'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xabab'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xaba'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>) <span class=\"comment\">// '   x'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>) <span class=\"comment\">// 'x   '</span></span><br><span class=\"line\"><span class=\"comment\">//常用</span></span><br><span class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-MM-12\"</span></span><br><span class=\"line\"><span class=\"string\">'09-12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-09-12\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><p>ES6 引入反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。定义多行字符串时，空格会被保留。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 普通字符串</span></span><br><span class=\"line\"><span class=\"string\">`In JavaScript '\\n' is a line-feed.`</span></span><br><span class=\"line\"><span class=\"comment\">// 多行字符串</span></span><br><span class=\"line\"><span class=\"string\">`In JavaScript this is</span></span><br><span class=\"line\"><span class=\"string\"> not legal.`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`string text line 1</span></span><br><span class=\"line\"><span class=\"string\">string text line 2`</span>);</span><br><span class=\"line\"><span class=\"comment\">// 字符串中嵌入变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"Bob\"</span>, time = <span class=\"string\">\"today\"</span>;</span><br><span class=\"line\"><span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>, how are you <span class=\"subst\">$&#123;time&#125;</span>?`</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"标签模板\"><a href=\"#标签模板\" class=\"headerlink\" title=\"标签模板\"></a>标签模板</h2><p>模板字符串可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert<span class=\"string\">`123`</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">alert(<span class=\"number\">123</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"String-raw\"><a href=\"#String-raw\" class=\"headerlink\" title=\"String.raw()\"></a>String.raw()</h2><p>es6为原生String 对象，提供了一个raw方法。用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。</p>\n<p>如果原字符串的斜杠已经转义，那么String.raw不会做任何处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.raw<span class=\"string\">`Hi\\n<span class=\"subst\">$&#123;<span class=\"number\">2</span>+<span class=\"number\">3</span>&#125;</span>!`</span>;</span><br><span class=\"line\"><span class=\"comment\">// \"Hi\\\\n5!\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.raw<span class=\"string\">`Hi\\u000A!`</span>;</span><br><span class=\"line\"><span class=\"comment\">// 'Hi\\\\u000A!'</span></span><br></pre></td></tr></table></figure>\n<p>参考链接<br><a href=\"http://es6.ruanyifeng.com/#docs/string\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/string</a></p>\n","more":"</p>\n<h2 id=\"Unicode表示法\"><a href=\"#Unicode表示法\" class=\"headerlink\" title=\"Unicode表示法\"></a>Unicode表示法</h2><p>js允许<code>\\uxxxx</code>表示\\u0000~\\uFFFF之间的字符，超出范围须用两个双字节的形式表示。<br>针对这一点，es6改进可通过<code>\\u{xxxx}</code>的方式来实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'\\z'</span> === <span class=\"string\">'z'</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">'\\172'</span> === <span class=\"string\">'z'</span> <span class=\"comment\">// true      8进制</span></span><br><span class=\"line\"><span class=\"string\">'\\x7A'</span> === <span class=\"string\">'z'</span> <span class=\"comment\">// true      16进制</span></span><br><span class=\"line\"><span class=\"string\">'\\u007A'</span> === <span class=\"string\">'z'</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;7A&#125;'</span> === <span class=\"string\">'z'</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;1F680&#125;'</span> === <span class=\"string\">'\\uD83D\\uDE80'</span><span class=\"comment\">// true 🚀</span></span><br></pre></td></tr></table></figure>\n<p>点击跳转<a href=\"http://www.ruanyifeng.com/blog/2014/12/unicode.html\" target=\"_blank\" rel=\"noopener\">Unicode详细介绍</a>。</p>\n<h2 id=\"String-prototype-codePointAt-pos\"><a href=\"#String-prototype-codePointAt-pos\" class=\"headerlink\" title=\"String.prototype.codePointAt(pos)\"></a>String.prototype.codePointAt(pos)</h2><p>相对于<code>String.prototype.charCodeAt()</code>返回0到65535,处理UTF-16的单一编码。<br>该方法能够正确处理 4 个字节储存的字符，传入元素索引的位置，返回在字符串中的给定索引的编码单元体现的数字，未找到返回<code>undefind</code>。字符为两个字节时，返回结果同<code>charCodeAt</code>方法相同。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'𠮷a'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">0</span>) <span class=\"comment\">// 134071</span></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">1</span>) <span class=\"comment\">// 57271</span></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">2</span>) <span class=\"comment\">// 97</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">0</span>).toString(<span class=\"number\">16</span>) <span class=\"comment\">// \"20bb7\"</span></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">2</span>).toString(<span class=\"number\">16</span>) <span class=\"comment\">// \"61\"</span></span><br></pre></td></tr></table></figure>\n<p>对于上例中a的下标为2，而不是1，可以通过<code>for...of...</code>来解决。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'𠮷a'</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> ch <span class=\"keyword\">of</span> s) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(ch.codePointAt(<span class=\"number\">0</span>).toString(<span class=\"number\">16</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简单应用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">is32Bit</span>(<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c.codePointAt(<span class=\"number\">0</span>) &gt; <span class=\"number\">0xFFFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">is32Bit(<span class=\"string\">\"𠮷\"</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">is32Bit(<span class=\"string\">\"a\"</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"String-fromCodePoint-num1-…-numN\"><a href=\"#String-fromCodePoint-num1-…-numN\" class=\"headerlink\" title=\"String.fromCodePoint(num1[, …[, numN]])\"></a>String.fromCodePoint(num1[, …[, numN]])</h2><p>相对于<code>String.fromCharCode(num1, ..., numN)</code>不能识别大于0xFFFF的码点。如果大于，最高位2被舍弃。<br>该静态方法返回使用指定的代码点序列创建的字符串。传入一串 Unicode 编码(多参数会合并)，返回 Unicode 编码创建的字符串。参数异常，抛出<code>RangeError</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x20BB7</span>)</span><br><span class=\"line\"><span class=\"comment\">// \"𠮷\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x78</span>, <span class=\"number\">0x1f680</span>, <span class=\"number\">0x79</span>) === <span class=\"string\">'x\\uD83D\\uDE80y'</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字符遍历器for…of\"><a href=\"#字符遍历器for…of\" class=\"headerlink\" title=\"字符遍历器for…of\"></a>字符遍历器for…of</h2><p>相对于传统for，优点是可以识别大于0xFFFF的码点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x20BB7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; text.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(text[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \" \"</span></span><br><span class=\"line\"><span class=\"comment\">// \" \"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> text) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"𠮷</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"String-prototype-normalize\"><a href=\"#String-prototype-normalize\" class=\"headerlink\" title=\"String.prototype.normalize()\"></a>String.prototype.normalize()</h2><p>按照指定的一种 Unicode 正规形式将当前字符串正规化。传入了非法的参数值, 则会抛出 RangeError 异常.默认<code>NFC</code>形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"\\u1E9B\\u0323\"</span>;</span><br><span class=\"line\">str.normalize(<span class=\"string\">\"NFC\"</span>); <span class=\"comment\">// \"\\u1E9B\\u0323\"</span></span><br><span class=\"line\">str.normalize(); <span class=\"comment\">// same as above</span></span><br><span class=\"line\"></span><br><span class=\"line\">str.normalize(<span class=\"string\">\"NFD\"</span>);<span class=\"comment\">// \"\\u017F\\u0323\\u0307\"</span></span><br><span class=\"line\">str.normalize(<span class=\"string\">\"NFKC\"</span>); <span class=\"comment\">// \"\\u1E69\"</span></span><br><span class=\"line\">str.normalize(<span class=\"string\">\"NFKD\"</span>); <span class=\"comment\">// \"\\u0073\\u0323\\u0307\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"includes-startsWith-endsWith\"><a href=\"#includes-startsWith-endsWith\" class=\"headerlink\" title=\"includes(), startsWith(), endsWith()\"></a>includes(), startsWith(), endsWith()</h2><p>相对于js只有<code>indexof()</code>方法，es6新增三种.</p>\n<ul>\n<li>includes()：返回布尔值，表示是否找到了参数字符串。</li>\n<li>startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。</li>\n<li>endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。</li>\n</ul>\n<p>第一个参数为需要搜索的字符，第二个参数为开始搜索的位置。endsWith的第二个参数为前N个字符搜索。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.startsWith(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'!'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'o'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'Hello'</span>, <span class=\"number\">5</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'Hello'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"String-prototype-repeat\"><a href=\"#String-prototype-repeat\" class=\"headerlink\" title=\"String.prototype.repeat()\"></a>String.prototype.repeat()</h2><p>构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。参数为负数或<code>infinite</code>，抛出<code>RangeError</code>错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>) <span class=\"comment\">// \"xxx\"</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">0</span>) <span class=\"comment\">// \"\"</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">Infinity</span>)<span class=\"comment\">// RangeError</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">-1</span>)<span class=\"comment\">// RangeError</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">NaN</span>) <span class=\"comment\">// \"\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"padStart-，padEnd\"><a href=\"#padStart-，padEnd\" class=\"headerlink\" title=\"padStart()，padEnd()\"></a>padStart()，padEnd()</h2><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。<br>第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串。第二个参数省略时，用空格代替。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'ababx'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'abax'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xabab'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xaba'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>) <span class=\"comment\">// '   x'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>) <span class=\"comment\">// 'x   '</span></span><br><span class=\"line\"><span class=\"comment\">//常用</span></span><br><span class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-MM-12\"</span></span><br><span class=\"line\"><span class=\"string\">'09-12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-09-12\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><p>ES6 引入反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。定义多行字符串时，空格会被保留。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 普通字符串</span></span><br><span class=\"line\"><span class=\"string\">`In JavaScript '\\n' is a line-feed.`</span></span><br><span class=\"line\"><span class=\"comment\">// 多行字符串</span></span><br><span class=\"line\"><span class=\"string\">`In JavaScript this is</span></span><br><span class=\"line\"><span class=\"string\"> not legal.`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`string text line 1</span></span><br><span class=\"line\"><span class=\"string\">string text line 2`</span>);</span><br><span class=\"line\"><span class=\"comment\">// 字符串中嵌入变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"Bob\"</span>, time = <span class=\"string\">\"today\"</span>;</span><br><span class=\"line\"><span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>, how are you <span class=\"subst\">$&#123;time&#125;</span>?`</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"标签模板\"><a href=\"#标签模板\" class=\"headerlink\" title=\"标签模板\"></a>标签模板</h2><p>模板字符串可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert<span class=\"string\">`123`</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">alert(<span class=\"number\">123</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"String-raw\"><a href=\"#String-raw\" class=\"headerlink\" title=\"String.raw()\"></a>String.raw()</h2><p>es6为原生String 对象，提供了一个raw方法。用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。</p>\n<p>如果原字符串的斜杠已经转义，那么String.raw不会做任何处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.raw<span class=\"string\">`Hi\\n<span class=\"subst\">$&#123;<span class=\"number\">2</span>+<span class=\"number\">3</span>&#125;</span>!`</span>;</span><br><span class=\"line\"><span class=\"comment\">// \"Hi\\\\n5!\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.raw<span class=\"string\">`Hi\\u000A!`</span>;</span><br><span class=\"line\"><span class=\"comment\">// 'Hi\\\\u000A!'</span></span><br></pre></td></tr></table></figure>\n<p>参考链接<br><a href=\"http://es6.ruanyifeng.com/#docs/string\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/string</a></p>","categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"es6","path":"api/tags/es6.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"String","path":"api/tags/String.json"}]}