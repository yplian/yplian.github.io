{"title":"正则概要","slug":"正则概要","date":"2017-08-13T16:00:00.000Z","updated":"2017-08-13T16:00:00.000Z","comments":true,"path":"api/articles/正则概要.json","excerpt":"简要说明RegExp对象，参照MDN文档,便于查找。<br>","covers":null,"content":"<p>简要说明RegExp对象，参照MDN文档,便于查找。<br><a id=\"more\"></a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 RegExp 的<code>exec</code>和<code>test</code>方法, 以及 String 的 <code>match</code>、<code>replace</code>、<code>search</code> 和<code>split</code> 方法。</p>\n<p>ES6规定了String对象的正则方法通过调用<code>RegExp</code>的实例方法实现，从而做到所有与正则相关的方法，全都定义在RegExp对象上。</p>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/pattern/flags                  <span class=\"comment\">//字面量</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(pattern [, flags])   <span class=\"comment\">//构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">/ab+c/i;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'ab+c'</span>, <span class=\"string\">'i'</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/ab+c/</span>, <span class=\"string\">'i'</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>pattern</code>:正则表达式文本</li>\n<li><code>flags</code>:指定标志<ul>\n<li><code>g</code>:全局匹配;找到所有匹配，而不是在第一个匹配后停止</li>\n<li><code>i</code>:忽略大小写</li>\n<li><code>m</code>:多行;匹配每行开头结尾</li>\n<li><code>u</code>:Unicode; 将模式视为Unicode序列点的序列,处理四个字节的 UTF-16 编码</li>\n<li><code>y</code>:粘性匹配; 仅匹配目标字符串中此正则表达式的lastIndex属性指示的索引</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"u-修饰符\"><a href=\"#u-修饰符\" class=\"headerlink\" title=\"u 修饰符\"></a>u 修饰符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'𠮷'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//点字符</span></span><br><span class=\"line\">/^.$/.test(s) <span class=\"comment\">// false</span></span><br><span class=\"line\">/^.$/u.test(s) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Unicode 字符表示法</span></span><br><span class=\"line\">/\\u&#123;<span class=\"number\">61</span>&#125;/.test(<span class=\"string\">'a'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">/\\u&#123;<span class=\"number\">61</span>&#125;/u.test(<span class=\"string\">'a'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">/\\u&#123;<span class=\"number\">20</span>BB7&#125;/u.test(<span class=\"string\">'𠮷'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//量词</span></span><br><span class=\"line\">/a&#123;<span class=\"number\">2</span>&#125;/.test(<span class=\"string\">'aa'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">/a&#123;<span class=\"number\">2</span>&#125;/u.test(<span class=\"string\">'aa'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">/𠮷&#123;<span class=\"number\">2</span>&#125;/.test(<span class=\"string\">'𠮷𠮷'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">/𠮷&#123;<span class=\"number\">2</span>&#125;/u.test(<span class=\"string\">'𠮷𠮷'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//预定义模式</span></span><br><span class=\"line\">/^\\S$/.test(<span class=\"string\">'𠮷'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">/^\\S$/u.test(<span class=\"string\">'𠮷'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//i 修饰符</span></span><br><span class=\"line\">/[a-z]/i.test(<span class=\"string\">'\\u212A'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">/[a-z]/iu.test(<span class=\"string\">'\\u212A'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"y-修饰符\"><a href=\"#y-修饰符\" class=\"headerlink\" title=\"y 修饰符\"></a>y 修饰符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'aaa_aa_a'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> r1 = <span class=\"regexp\">/a+/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> r2 = <span class=\"regexp\">/a+/y</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">r1.exec(s) <span class=\"comment\">// [\"aaa\"]</span></span><br><span class=\"line\">r2.exec(s) <span class=\"comment\">// [\"aaa\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">r1.exec(s) <span class=\"comment\">// [\"aa\"]</span></span><br><span class=\"line\">r2.exec(s) <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p><code>RegExp.prototype.constructor</code>：创建该正则对象的构造函数。</p>\n<p><code>RegExp.prototype.global</code>：是否开启全局匹配，也就是匹配目标字符串中所有可能的匹配项，而不是只进行第一次匹配。</p>\n<p><code>RegExp.prototype.ignoreCase</code>：在匹配字符串时是否要忽略字符的大小写。</p>\n<p><code>RegExp.prototype.lastIndex</code>：下次匹配开始的字符串索引位置。</p>\n<p><code>RegExp.prototype.multiline</code>：是否开启多行模式匹配（影响 ^ 和 $ 的行为）。</p>\n<p><code>RegExp.prototype.source</code>：正则对象的源模式文本。</p>\n<p><code>RegExp.prototype.sticky</code>：是否开启粘滞匹配。</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p><code>RegExp.prototype.exec()</code>：在目标字符串中执行一次正则匹配操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/quick\\s(brown).+?(jumps)/ig</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = re.exec(<span class=\"string\">'The Quick Brown Fox Jumps Over The Lazy Dog'</span>);</span><br><span class=\"line\"><span class=\"comment\">//[\"Quick Brown Fox Jumps\", \"Brown\", \"Jumps\", index: 4, input: \"The Quick Brown Fox Jumps Over The Lazy Dog\"]</span></span><br><span class=\"line\"><span class=\"comment\">//[匹配的全部字符串,分组捕获[1],分组捕获[2],匹配到的字符位于原始字符串的基于0的索引值,原始字符串]</span></span><br></pre></td></tr></table></figure>\n<p><code>RegExp.prototype.test()</code>：测试当前正则是否能匹配目标字符串。</p>\n<p><code>RegExp.prototype.toSource()</code>：返回一个字符串，其值为该正则对象的字面量形式。覆盖了Object.prototype.toSource 方法.</p>\n<p><code>RegExp.prototype.toString()</code>：返回一个字符串，其值为该正则对象的字面量形式。覆盖了Object.prototype.toString() 方法。</p>\n<p><code>RegExp.prototype[@@match]()</code>：返回一个数组，它包括整个匹配结果，和通过捕获组匹配到的结果，如果没有匹配到则返回null.</p>\n<p><code>RegExp.prototype[@@replace]()</code>:用替换器替换相应匹配项后的新字符串。</p>\n<p><code>RegExp.prototype[@@search]()</code>:执行了一个在给定字符串中的一个搜索以取得匹配正则模式的项。</p>\n<p><code>RegExp.prototype[@@split]()</code>:切割 String 对象为一个其子字符串的数组。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp\" target=\"_blank\" rel=\"noopener\">More Info</a></p>\n<h2 id=\"exec和match\"><a href=\"#exec和match\" class=\"headerlink\" title=\"exec和match\"></a>exec和match</h2><ul>\n<li>exec它的参数是字符串,match参数是正则.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re=<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"comment\">//d/);</span></span><br><span class=\"line\">re.exec( <span class=\"string\">\"abcd\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"abcd\"</span>.match(<span class=\"regexp\">/d);</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>exec和match返回的都是数组。exec只会返回第一个满足条件的字符，match没有全局匹配(g)时，返回结果同exec。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abcda'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">/a/.exec(str);<span class=\"comment\">//[\"a\", index: 0, input: \"abcda\"]</span></span><br><span class=\"line\">str.match(<span class=\"regexp\">/a/</span>);<span class=\"comment\">//[\"a\", index: 0, input: \"abcda\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">/a/g.exec(str);<span class=\"comment\">//[\"a\", index: 0, input: \"abcda\"]</span></span><br><span class=\"line\">str.match(<span class=\"regexp\">/a/g</span>);<span class=\"comment\">//[\"a\", \"a\"]</span></span><br></pre></td></tr></table></figure>\n","more":"</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 RegExp 的<code>exec</code>和<code>test</code>方法, 以及 String 的 <code>match</code>、<code>replace</code>、<code>search</code> 和<code>split</code> 方法。</p>\n<p>ES6规定了String对象的正则方法通过调用<code>RegExp</code>的实例方法实现，从而做到所有与正则相关的方法，全都定义在RegExp对象上。</p>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/pattern/flags                  <span class=\"comment\">//字面量</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(pattern [, flags])   <span class=\"comment\">//构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">/ab+c/i;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'ab+c'</span>, <span class=\"string\">'i'</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/ab+c/</span>, <span class=\"string\">'i'</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>pattern</code>:正则表达式文本</li>\n<li><code>flags</code>:指定标志<ul>\n<li><code>g</code>:全局匹配;找到所有匹配，而不是在第一个匹配后停止</li>\n<li><code>i</code>:忽略大小写</li>\n<li><code>m</code>:多行;匹配每行开头结尾</li>\n<li><code>u</code>:Unicode; 将模式视为Unicode序列点的序列,处理四个字节的 UTF-16 编码</li>\n<li><code>y</code>:粘性匹配; 仅匹配目标字符串中此正则表达式的lastIndex属性指示的索引</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"u-修饰符\"><a href=\"#u-修饰符\" class=\"headerlink\" title=\"u 修饰符\"></a>u 修饰符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'𠮷'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//点字符</span></span><br><span class=\"line\">/^.$/.test(s) <span class=\"comment\">// false</span></span><br><span class=\"line\">/^.$/u.test(s) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Unicode 字符表示法</span></span><br><span class=\"line\">/\\u&#123;<span class=\"number\">61</span>&#125;/.test(<span class=\"string\">'a'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">/\\u&#123;<span class=\"number\">61</span>&#125;/u.test(<span class=\"string\">'a'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">/\\u&#123;<span class=\"number\">20</span>BB7&#125;/u.test(<span class=\"string\">'𠮷'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//量词</span></span><br><span class=\"line\">/a&#123;<span class=\"number\">2</span>&#125;/.test(<span class=\"string\">'aa'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">/a&#123;<span class=\"number\">2</span>&#125;/u.test(<span class=\"string\">'aa'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">/𠮷&#123;<span class=\"number\">2</span>&#125;/.test(<span class=\"string\">'𠮷𠮷'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">/𠮷&#123;<span class=\"number\">2</span>&#125;/u.test(<span class=\"string\">'𠮷𠮷'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//预定义模式</span></span><br><span class=\"line\">/^\\S$/.test(<span class=\"string\">'𠮷'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">/^\\S$/u.test(<span class=\"string\">'𠮷'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//i 修饰符</span></span><br><span class=\"line\">/[a-z]/i.test(<span class=\"string\">'\\u212A'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">/[a-z]/iu.test(<span class=\"string\">'\\u212A'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"y-修饰符\"><a href=\"#y-修饰符\" class=\"headerlink\" title=\"y 修饰符\"></a>y 修饰符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'aaa_aa_a'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> r1 = <span class=\"regexp\">/a+/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> r2 = <span class=\"regexp\">/a+/y</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">r1.exec(s) <span class=\"comment\">// [\"aaa\"]</span></span><br><span class=\"line\">r2.exec(s) <span class=\"comment\">// [\"aaa\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">r1.exec(s) <span class=\"comment\">// [\"aa\"]</span></span><br><span class=\"line\">r2.exec(s) <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p><code>RegExp.prototype.constructor</code>：创建该正则对象的构造函数。</p>\n<p><code>RegExp.prototype.global</code>：是否开启全局匹配，也就是匹配目标字符串中所有可能的匹配项，而不是只进行第一次匹配。</p>\n<p><code>RegExp.prototype.ignoreCase</code>：在匹配字符串时是否要忽略字符的大小写。</p>\n<p><code>RegExp.prototype.lastIndex</code>：下次匹配开始的字符串索引位置。</p>\n<p><code>RegExp.prototype.multiline</code>：是否开启多行模式匹配（影响 ^ 和 $ 的行为）。</p>\n<p><code>RegExp.prototype.source</code>：正则对象的源模式文本。</p>\n<p><code>RegExp.prototype.sticky</code>：是否开启粘滞匹配。</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p><code>RegExp.prototype.exec()</code>：在目标字符串中执行一次正则匹配操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/quick\\s(brown).+?(jumps)/ig</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = re.exec(<span class=\"string\">'The Quick Brown Fox Jumps Over The Lazy Dog'</span>);</span><br><span class=\"line\"><span class=\"comment\">//[\"Quick Brown Fox Jumps\", \"Brown\", \"Jumps\", index: 4, input: \"The Quick Brown Fox Jumps Over The Lazy Dog\"]</span></span><br><span class=\"line\"><span class=\"comment\">//[匹配的全部字符串,分组捕获[1],分组捕获[2],匹配到的字符位于原始字符串的基于0的索引值,原始字符串]</span></span><br></pre></td></tr></table></figure>\n<p><code>RegExp.prototype.test()</code>：测试当前正则是否能匹配目标字符串。</p>\n<p><code>RegExp.prototype.toSource()</code>：返回一个字符串，其值为该正则对象的字面量形式。覆盖了Object.prototype.toSource 方法.</p>\n<p><code>RegExp.prototype.toString()</code>：返回一个字符串，其值为该正则对象的字面量形式。覆盖了Object.prototype.toString() 方法。</p>\n<p><code>RegExp.prototype[@@match]()</code>：返回一个数组，它包括整个匹配结果，和通过捕获组匹配到的结果，如果没有匹配到则返回null.</p>\n<p><code>RegExp.prototype[@@replace]()</code>:用替换器替换相应匹配项后的新字符串。</p>\n<p><code>RegExp.prototype[@@search]()</code>:执行了一个在给定字符串中的一个搜索以取得匹配正则模式的项。</p>\n<p><code>RegExp.prototype[@@split]()</code>:切割 String 对象为一个其子字符串的数组。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp\" target=\"_blank\" rel=\"noopener\">More Info</a></p>\n<h2 id=\"exec和match\"><a href=\"#exec和match\" class=\"headerlink\" title=\"exec和match\"></a>exec和match</h2><ul>\n<li>exec它的参数是字符串,match参数是正则.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re=<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"comment\">//d/);</span></span><br><span class=\"line\">re.exec( <span class=\"string\">\"abcd\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"abcd\"</span>.match(<span class=\"regexp\">/d);</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>exec和match返回的都是数组。exec只会返回第一个满足条件的字符，match没有全局匹配(g)时，返回结果同exec。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abcda'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">/a/.exec(str);<span class=\"comment\">//[\"a\", index: 0, input: \"abcda\"]</span></span><br><span class=\"line\">str.match(<span class=\"regexp\">/a/</span>);<span class=\"comment\">//[\"a\", index: 0, input: \"abcda\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">/a/g.exec(str);<span class=\"comment\">//[\"a\", index: 0, input: \"abcda\"]</span></span><br><span class=\"line\">str.match(<span class=\"regexp\">/a/g</span>);<span class=\"comment\">//[\"a\", \"a\"]</span></span><br></pre></td></tr></table></figure>","categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"es6","path":"api/tags/es6.json"},{"name":"RegExp","path":"api/tags/RegExp.json"}]}