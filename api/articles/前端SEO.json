{"title":"前端SEO","slug":"前端SEO","date":"2022-12-03T16:00:00.000Z","updated":"2022-12-03T16:00:00.000Z","comments":true,"path":"api/articles/前端SEO.json","excerpt":"前端流行框架如Vue、React大多采用单页面形式，针对SEO会有那些问题？<br>","covers":null,"content":"<p>前端流行框架如Vue、React大多采用单页面形式，针对SEO会有那些问题？<br><a id=\"more\"></a></p>\n<h2 id=\"爬虫存在的问题\"><a href=\"#爬虫存在的问题\" class=\"headerlink\" title=\"爬虫存在的问题\"></a>爬虫存在的问题</h2><ul>\n<li>不渲染JavaScript – 这是一个较老的议题了，但<a href=\"https://searchengineland.com/google-now-crawling-and-indexing-flash-content-14299\" target=\"_blank\" rel=\"noopener\">谷歌在 2008 年才开始以有限的方式渲染 JavaScript</a>。然而，它仍然依赖于 2009 年创建的 JavaScript 网站的抓取方式。（谷歌已经弃用了该方式。）</li>\n<li>渲染引擎 (Chromium) 已过时 – 这导致<a href=\"https://www.deepcrawl.com/blog/news/what-version-of-chrome-is-google-actually-using-for-rendering/\" target=\"_blank\" rel=\"noopener\">缺乏对最新浏览器和 JavaScript 的功能支持</a>，如果使用了 Googlebot 不支持的 JavaScript 功能，页面可能无法正确呈现，这可能会对你的内容索引产生负面影响。</li>\n<li>Google 出现渲染延迟 – 在某些情况下，这可能<a href=\"https://twitter.com/Paul_Kinlan/status/1040147543345098752\" target=\"_blank\" rel=\"noopener\">意味着最多会延迟数周</a>，从而减慢内容更改后达到索引阶段的时间，这可能会排除那些大多数需要依靠谷歌渲染内容的网站。</li>\n</ul>\n<p>目前Google的<a href=\"https://developers.google.com/search/blog/2019/05/the-new-evergreen-googlebot\" target=\"_blank\" rel=\"noopener\">长青状态的爬虫</a>以支持动态解决JavaScript，渲染时间大概为5s。但是相对来说，必应、百度等其它爬虫依旧会有这个问题。</p>\n<p><em>以下技术方案以vue举例</em>.</p>\n<h2 id=\"单页面存在的问题\"><a href=\"#单页面存在的问题\" class=\"headerlink\" title=\"单页面存在的问题\"></a>单页面存在的问题</h2><p>单页面应用的页面一般为单页面public/index.html，内容为下面结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%= BASE_URL %&gt;favicon.ico\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">htmlWebpackPlugin.options.title</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>We're sorry but <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">htmlWebpackPlugin.options.title</span> %&gt;</span> doesn't work properly without JavaScript enabled. Please enable it to continue.<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>通过JavaScript解析动态渲染为需要展示的页面</p>\n<ol>\n<li>爬虫不会解析JavaScript，页面节点爬取简单</li>\n<li>不能单独设置TDK（title、description、description）</li>\n<li>客户端渲染，首屏加载相对服务端慢，但是对服务端压力小</li>\n</ol>\n<h2 id=\"相对需求\"><a href=\"#相对需求\" class=\"headerlink\" title=\"相对需求\"></a>相对需求</h2><ol>\n<li>多页面，可以实现根据不同页面实现不同的节点，便于爬取</li>\n<li>可设置动态TDK</li>\n</ol>\n<h2 id=\"解决方案-SSR\"><a href=\"#解决方案-SSR\" class=\"headerlink\" title=\"解决方案-SSR\"></a>解决方案-SSR</h2><p>针对vue、react等技术，社区提供了成熟的实现方案<br>方案</p>\n<ul>\n<li>Vue技术栈 — nuxtjs</li>\n<li>React技术栈 — nextjs</li>\n</ul>\n<h3 id=\"简易流程\"><a href=\"#简易流程\" class=\"headerlink\" title=\"简易流程\"></a>简易流程</h3><ol>\n<li>用户通过浏览器预览页面，浏览器请求node服务</li>\n<li>node服务上，nuxtjs通过asyncData、fetch等方法异步请求后端服务数据，预渲染页面，返回附带html的页面到浏览器</li>\n<li>浏览器交互时，执行vue的如: Create、mounted、destroy等生命周期。</li>\n<li>每个page/页面.vue可以根据head单独设置不同的TDK，可以动态设置渲染</li>\n</ol>\n<h3 id=\"要求限制\"><a href=\"#要求限制\" class=\"headerlink\" title=\"要求限制\"></a>要求限制</h3><ul>\n<li>开发中的限制。浏览器端特定的代码只能在某些生命周期钩子中使用；一些外部库可能需要特殊处理才能在服务端渲染的应用中运行。</li>\n<li>更多的与构建配置和部署相关的要求。服务端渲染的应用需要一个能让 Node.js 服务器运行的环境，不像完全静态的 SPA 那样可以部署在任意的静态文件服务器上。</li>\n<li>更高的服务端负载。在 Node.js 中渲染一个完整的应用要比仅仅托管静态文件更加占用 CPU 资源，因此如果你预期有高流量，请为相应的服务器负载做好准备，并采用合理的缓存策略。</li>\n<li>node环境</li>\n<li>vue版本</li>\n</ul>\n<h2 id=\"解决方案-预渲染\"><a href=\"#解决方案-预渲染\" class=\"headerlink\" title=\"解决方案-预渲染\"></a>解决方案-预渲染</h2><p>针对多页面通过prerender-spa-plugin库实现。使用详情参见<br>针对TDK可以通过vue-meta库实现。使用详情参见<br>应用场景</p>\n<ul>\n<li>为数不多页面的seo，例如关于我们、联系我们之类的</li>\n<li>seo要求不高</li>\n</ul>\n<h3 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h3><ul>\n<li>在本地router.js文件中配置好的路由，可以进行单独的页面预渲染，不能是动态路由，每添加一个预渲染页面就需要手动在配置项新增一个</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">new</span> PrerenderSPAPlugin(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Required - The path to the webpack-outputted app to prerender.</span></span><br><span class=\"line\">  staticDir: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">  <span class=\"comment\">// Required - Routes to render.</span></span><br><span class=\"line\">  routes: [ <span class=\"string\">'/'</span>, <span class=\"string\">'/about'</span>, <span class=\"string\">'/some/deep/nested/route'</span> ],&#125;)</span><br><span class=\"line\">]&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以通过vue-meta实现每个页面的TDK，但不能为动态渲染，业务场景如商品详情页中，该页面的title应该为请求接口后拿到的商品名，此时不能实现。</li>\n</ul>\n<h2 id=\"解决方案-无头浏览器爬取\"><a href=\"#解决方案-无头浏览器爬取\" class=\"headerlink\" title=\"解决方案-无头浏览器爬取\"></a>解决方案-无头浏览器爬取</h2><p>本着爬虫不能解析JavaScript的原则，如果实现页面的解析爬取并返回给爬虫，就能做到针对原有项目最小改动（甚至无改动）的情况下，实现对seo需求的实现。<br>chrome爬虫本身可以解析JavaScript，所以提供了一套解决方案puppeteer.js。<br>puppeteer为chromium官方binding，其他语言也有类似binding，例如go和rust。</p>\n<h3 id=\"大概功能\"><a href=\"#大概功能\" class=\"headerlink\" title=\"大概功能\"></a>大概功能</h3><ul>\n<li><a href=\"https://developer.chrome.com/docs/puppeteer/ssr/#introduction\" target=\"_blank\" rel=\"noopener\">官方文档使用详情参见</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/76237595\" target=\"_blank\" rel=\"noopener\">可实现的大概功能</a></li>\n<li>网页截图或者生成 PDF</li>\n<li>爬取 SPA 或 SSR 网站</li>\n<li>UI 自动化测试，模拟表单提交，键盘输入，点击等行为</li>\n<li>捕获网站的时间线，帮助诊断性能问题</li>\n<li>创建一个最新的自动化测试环境，使用最新的 js 和最新的 Chrome 浏览器运行测试用例</li>\n<li>测试 Chrome 扩展程序</li>\n<li>…</li>\n</ul>\n<h3 id=\"简易实现\"><a href=\"#简易实现\" class=\"headerlink\" title=\"简易实现\"></a>简易实现</h3><p><a href=\"../images/express.zip\">express.zip</a>.</p>\n<h3 id=\"存在的问题-1\"><a href=\"#存在的问题-1\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h3><ul>\n<li>node环境</li>\n<li>单页面资源依靠相对路径，爬取资源失败</li>\n<li>爬取失败存在程序奔溃，持久化处理问题</li>\n</ul>\n<h2 id=\"解决方案-静态化\"><a href=\"#解决方案-静态化\" class=\"headerlink\" title=\"解决方案-静态化\"></a>解决方案-静态化</h2><p>nuxtjs可以实现静态化打包，不同于单页面的CSG的方案，也就是SCG方案。</p>\n<ol>\n<li>克隆 nuxtjs.org repository</li>\n<li>使用 npm install 命令安装依赖</li>\n<li>运行 npm run generate</li>\n<li>生成 dist 目录<br>Nuxt3可以实现混合渲染，针对不同的路由设置不同的渲染。</li>\n</ol>\n<h3 id=\"多页面应用的可行性\"><a href=\"#多页面应用的可行性\" class=\"headerlink\" title=\"多页面应用的可行性\"></a>多页面应用的可行性</h3><p>vue-cli可以配置设置为多页面应用</p>\n<ul>\n<li>同单页面一样，设置为多页面依旧是单一节点html</li>\n<li>可以为不同页面设置静态化TDK，固定不可变更</li>\n<li>seo问题依旧存在</li>\n</ul>\n","more":"</p>\n<h2 id=\"爬虫存在的问题\"><a href=\"#爬虫存在的问题\" class=\"headerlink\" title=\"爬虫存在的问题\"></a>爬虫存在的问题</h2><ul>\n<li>不渲染JavaScript – 这是一个较老的议题了，但<a href=\"https://searchengineland.com/google-now-crawling-and-indexing-flash-content-14299\" target=\"_blank\" rel=\"noopener\">谷歌在 2008 年才开始以有限的方式渲染 JavaScript</a>。然而，它仍然依赖于 2009 年创建的 JavaScript 网站的抓取方式。（谷歌已经弃用了该方式。）</li>\n<li>渲染引擎 (Chromium) 已过时 – 这导致<a href=\"https://www.deepcrawl.com/blog/news/what-version-of-chrome-is-google-actually-using-for-rendering/\" target=\"_blank\" rel=\"noopener\">缺乏对最新浏览器和 JavaScript 的功能支持</a>，如果使用了 Googlebot 不支持的 JavaScript 功能，页面可能无法正确呈现，这可能会对你的内容索引产生负面影响。</li>\n<li>Google 出现渲染延迟 – 在某些情况下，这可能<a href=\"https://twitter.com/Paul_Kinlan/status/1040147543345098752\" target=\"_blank\" rel=\"noopener\">意味着最多会延迟数周</a>，从而减慢内容更改后达到索引阶段的时间，这可能会排除那些大多数需要依靠谷歌渲染内容的网站。</li>\n</ul>\n<p>目前Google的<a href=\"https://developers.google.com/search/blog/2019/05/the-new-evergreen-googlebot\" target=\"_blank\" rel=\"noopener\">长青状态的爬虫</a>以支持动态解决JavaScript，渲染时间大概为5s。但是相对来说，必应、百度等其它爬虫依旧会有这个问题。</p>\n<p><em>以下技术方案以vue举例</em>.</p>\n<h2 id=\"单页面存在的问题\"><a href=\"#单页面存在的问题\" class=\"headerlink\" title=\"单页面存在的问题\"></a>单页面存在的问题</h2><p>单页面应用的页面一般为单页面public/index.html，内容为下面结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%= BASE_URL %&gt;favicon.ico\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">htmlWebpackPlugin.options.title</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>We're sorry but <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">htmlWebpackPlugin.options.title</span> %&gt;</span> doesn't work properly without JavaScript enabled. Please enable it to continue.<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>通过JavaScript解析动态渲染为需要展示的页面</p>\n<ol>\n<li>爬虫不会解析JavaScript，页面节点爬取简单</li>\n<li>不能单独设置TDK（title、description、description）</li>\n<li>客户端渲染，首屏加载相对服务端慢，但是对服务端压力小</li>\n</ol>\n<h2 id=\"相对需求\"><a href=\"#相对需求\" class=\"headerlink\" title=\"相对需求\"></a>相对需求</h2><ol>\n<li>多页面，可以实现根据不同页面实现不同的节点，便于爬取</li>\n<li>可设置动态TDK</li>\n</ol>\n<h2 id=\"解决方案-SSR\"><a href=\"#解决方案-SSR\" class=\"headerlink\" title=\"解决方案-SSR\"></a>解决方案-SSR</h2><p>针对vue、react等技术，社区提供了成熟的实现方案<br>方案</p>\n<ul>\n<li>Vue技术栈 — nuxtjs</li>\n<li>React技术栈 — nextjs</li>\n</ul>\n<h3 id=\"简易流程\"><a href=\"#简易流程\" class=\"headerlink\" title=\"简易流程\"></a>简易流程</h3><ol>\n<li>用户通过浏览器预览页面，浏览器请求node服务</li>\n<li>node服务上，nuxtjs通过asyncData、fetch等方法异步请求后端服务数据，预渲染页面，返回附带html的页面到浏览器</li>\n<li>浏览器交互时，执行vue的如: Create、mounted、destroy等生命周期。</li>\n<li>每个page/页面.vue可以根据head单独设置不同的TDK，可以动态设置渲染</li>\n</ol>\n<h3 id=\"要求限制\"><a href=\"#要求限制\" class=\"headerlink\" title=\"要求限制\"></a>要求限制</h3><ul>\n<li>开发中的限制。浏览器端特定的代码只能在某些生命周期钩子中使用；一些外部库可能需要特殊处理才能在服务端渲染的应用中运行。</li>\n<li>更多的与构建配置和部署相关的要求。服务端渲染的应用需要一个能让 Node.js 服务器运行的环境，不像完全静态的 SPA 那样可以部署在任意的静态文件服务器上。</li>\n<li>更高的服务端负载。在 Node.js 中渲染一个完整的应用要比仅仅托管静态文件更加占用 CPU 资源，因此如果你预期有高流量，请为相应的服务器负载做好准备，并采用合理的缓存策略。</li>\n<li>node环境</li>\n<li>vue版本</li>\n</ul>\n<h2 id=\"解决方案-预渲染\"><a href=\"#解决方案-预渲染\" class=\"headerlink\" title=\"解决方案-预渲染\"></a>解决方案-预渲染</h2><p>针对多页面通过prerender-spa-plugin库实现。使用详情参见<br>针对TDK可以通过vue-meta库实现。使用详情参见<br>应用场景</p>\n<ul>\n<li>为数不多页面的seo，例如关于我们、联系我们之类的</li>\n<li>seo要求不高</li>\n</ul>\n<h3 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h3><ul>\n<li>在本地router.js文件中配置好的路由，可以进行单独的页面预渲染，不能是动态路由，每添加一个预渲染页面就需要手动在配置项新增一个</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">new</span> PrerenderSPAPlugin(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Required - The path to the webpack-outputted app to prerender.</span></span><br><span class=\"line\">  staticDir: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">  <span class=\"comment\">// Required - Routes to render.</span></span><br><span class=\"line\">  routes: [ <span class=\"string\">'/'</span>, <span class=\"string\">'/about'</span>, <span class=\"string\">'/some/deep/nested/route'</span> ],&#125;)</span><br><span class=\"line\">]&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以通过vue-meta实现每个页面的TDK，但不能为动态渲染，业务场景如商品详情页中，该页面的title应该为请求接口后拿到的商品名，此时不能实现。</li>\n</ul>\n<h2 id=\"解决方案-无头浏览器爬取\"><a href=\"#解决方案-无头浏览器爬取\" class=\"headerlink\" title=\"解决方案-无头浏览器爬取\"></a>解决方案-无头浏览器爬取</h2><p>本着爬虫不能解析JavaScript的原则，如果实现页面的解析爬取并返回给爬虫，就能做到针对原有项目最小改动（甚至无改动）的情况下，实现对seo需求的实现。<br>chrome爬虫本身可以解析JavaScript，所以提供了一套解决方案puppeteer.js。<br>puppeteer为chromium官方binding，其他语言也有类似binding，例如go和rust。</p>\n<h3 id=\"大概功能\"><a href=\"#大概功能\" class=\"headerlink\" title=\"大概功能\"></a>大概功能</h3><ul>\n<li><a href=\"https://developer.chrome.com/docs/puppeteer/ssr/#introduction\" target=\"_blank\" rel=\"noopener\">官方文档使用详情参见</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/76237595\" target=\"_blank\" rel=\"noopener\">可实现的大概功能</a></li>\n<li>网页截图或者生成 PDF</li>\n<li>爬取 SPA 或 SSR 网站</li>\n<li>UI 自动化测试，模拟表单提交，键盘输入，点击等行为</li>\n<li>捕获网站的时间线，帮助诊断性能问题</li>\n<li>创建一个最新的自动化测试环境，使用最新的 js 和最新的 Chrome 浏览器运行测试用例</li>\n<li>测试 Chrome 扩展程序</li>\n<li>…</li>\n</ul>\n<h3 id=\"简易实现\"><a href=\"#简易实现\" class=\"headerlink\" title=\"简易实现\"></a>简易实现</h3><p><a href=\"../images/express.zip\">express.zip</a>.</p>\n<h3 id=\"存在的问题-1\"><a href=\"#存在的问题-1\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h3><ul>\n<li>node环境</li>\n<li>单页面资源依靠相对路径，爬取资源失败</li>\n<li>爬取失败存在程序奔溃，持久化处理问题</li>\n</ul>\n<h2 id=\"解决方案-静态化\"><a href=\"#解决方案-静态化\" class=\"headerlink\" title=\"解决方案-静态化\"></a>解决方案-静态化</h2><p>nuxtjs可以实现静态化打包，不同于单页面的CSG的方案，也就是SCG方案。</p>\n<ol>\n<li>克隆 nuxtjs.org repository</li>\n<li>使用 npm install 命令安装依赖</li>\n<li>运行 npm run generate</li>\n<li>生成 dist 目录<br>Nuxt3可以实现混合渲染，针对不同的路由设置不同的渲染。</li>\n</ol>\n<h3 id=\"多页面应用的可行性\"><a href=\"#多页面应用的可行性\" class=\"headerlink\" title=\"多页面应用的可行性\"></a>多页面应用的可行性</h3><p>vue-cli可以配置设置为多页面应用</p>\n<ul>\n<li>同单页面一样，设置为多页面依旧是单一节点html</li>\n<li>可以为不同页面设置静态化TDK，固定不可变更</li>\n<li>seo问题依旧存在</li>\n</ul>","categories":[],"tags":[{"name":"SEO","path":"api/tags/SEO.json"},{"name":"Vue","path":"api/tags/Vue.json"}]}