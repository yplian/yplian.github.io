{"title":"es6入门笔记-函数","slug":"es6入门笔记-函数","date":"2017-07-12T16:00:00.000Z","updated":"2017-07-12T16:00:00.000Z","comments":true,"path":"api/articles/es6入门笔记-函数.json","excerpt":"es6中，新增函数方法。<br>","covers":null,"content":"<p>es6中，新增函数方法。<br><a id=\"more\"></a></p>\n<h2 id=\"参数默认值\"><a href=\"#参数默认值\" class=\"headerlink\" title=\"参数默认值\"></a>参数默认值</h2><h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6之前</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//x = x || 'world';</span></span><br><span class=\"line\">    <span class=\"comment\">//当x = false,上式不成立</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        x = <span class=\"string\">'world'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>+x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//es6写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">x = <span class=\"string\">'world'</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>+x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"与解构结合\"><a href=\"#与解构结合\" class=\"headerlink\" title=\"与解构结合\"></a>与解构结合</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只有当函数参数等于一个对象时，才会使用函数的默认赋值，下例单纯运用结构赋值。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">&#123;x, y = <span class=\"number\">5</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(&#123;&#125;) <span class=\"comment\">// undefined 5</span></span><br><span class=\"line\">foo(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;) <span class=\"comment\">// 1 5</span></span><br><span class=\"line\">foo(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;) <span class=\"comment\">// 1 2</span></span><br><span class=\"line\">foo() <span class=\"comment\">// TypeError: Cannot read property 'x' of undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//参数等于对象时函数默认赋值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">&#123;x, y = <span class=\"number\">5</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo() <span class=\"comment\">// undefined 5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参数相关\"><a href=\"#参数相关\" class=\"headerlink\" title=\"参数相关\"></a>参数相关</h3><ul>\n<li>默认参数的位置一般在尾部，否则不能省略该参数。</li>\n<li>当指定默认参数之后，它的length失真，不再返回其个数。</li>\n<li>当设置了默认参数，参数在初始化时形成作用域，初始化结束消失。</li>\n</ul>\n<h2 id=\"rest参数\"><a href=\"#rest参数\" class=\"headerlink\" title=\"rest参数\"></a>rest参数</h2><p>ES6 引入 <code>rest</code> 参数（形式为…变量名），用于获取函数的多余参数，这样就不需要使用<code>arguments</code>对象了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</span><br><span class=\"line\">    sum += val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortNumbers</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>).sort();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// rest参数的写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sortNumbers = <span class=\"function\">(<span class=\"params\">...numbers</span>) =&gt;</span> numbers.sort();</span><br></pre></td></tr></table></figure>\n<p>注：<em>rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。函数的length属性，不包括 rest 参数。</em></p>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><p>从 ES5 开始，函数内部可以设定为严格模式。ES2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。</p>\n<h2 id=\"name属性\"><a href=\"#name属性\" class=\"headerlink\" title=\"name属性\"></a>name属性</h2><p>函数的name属性，返回该函数的函数名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">f.name <span class=\"comment\">// \"\"</span></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">f.name <span class=\"comment\">// \"f\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果将一个具名函数赋值给一个变量，则 ES5 和 ES6 的name属性都返回这个具名函数原本的名字。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">bar.name <span class=\"comment\">// ES5  \"baz\"</span></span><br><span class=\"line\">bar.name <span class=\"comment\">// ES6  \"baz\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Function构造函数返回的函数实例，name属性的值为anonymous。</span></span><br><span class=\"line\">(<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>).name <span class=\"comment\">// \"anonymous\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//bind返回的函数，name属性值会加上bound前缀。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">foo.bind(&#123;&#125;).name <span class=\"comment\">// \"bound foo\"</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;).bind(&#123;&#125;).name <span class=\"comment\">// \"bound \"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</li>\n<li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li>\n<li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</li>\n<li>不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</li>\n</ul>\n<h2 id=\"双冒号运算符\"><a href=\"#双冒号运算符\" class=\"headerlink\" title=\"双冒号运算符\"></a>双冒号运算符</h2><p>箭头函数可以绑定this对象，大大减少了显式绑定this对象的写法（call、apply、bind）。但是，箭头函数并不适用于所有场合，所以现在有一个提案，提出了“函数绑定”（function bind）运算符，用来取代call、apply、bind调用。<br>函数绑定运算符是并排的两个冒号（::），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo::bar;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">bar.bind(foo);</span><br><span class=\"line\"></span><br><span class=\"line\">foo::bar(...arguments);</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">bar.apply(foo, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hasOwnProperty = <span class=\"built_in\">Object</span>.prototype.hasOwnProperty;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasOwn</span>(<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj::hasOwnProperty(key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考链接<br><a href=\"http://es6.ruanyifeng.com/#docs/function\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/function</a></p>\n","more":"</p>\n<h2 id=\"参数默认值\"><a href=\"#参数默认值\" class=\"headerlink\" title=\"参数默认值\"></a>参数默认值</h2><h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6之前</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//x = x || 'world';</span></span><br><span class=\"line\">    <span class=\"comment\">//当x = false,上式不成立</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        x = <span class=\"string\">'world'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>+x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//es6写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">x = <span class=\"string\">'world'</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>+x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"与解构结合\"><a href=\"#与解构结合\" class=\"headerlink\" title=\"与解构结合\"></a>与解构结合</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只有当函数参数等于一个对象时，才会使用函数的默认赋值，下例单纯运用结构赋值。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">&#123;x, y = <span class=\"number\">5</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(&#123;&#125;) <span class=\"comment\">// undefined 5</span></span><br><span class=\"line\">foo(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;) <span class=\"comment\">// 1 5</span></span><br><span class=\"line\">foo(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;) <span class=\"comment\">// 1 2</span></span><br><span class=\"line\">foo() <span class=\"comment\">// TypeError: Cannot read property 'x' of undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//参数等于对象时函数默认赋值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">&#123;x, y = <span class=\"number\">5</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo() <span class=\"comment\">// undefined 5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参数相关\"><a href=\"#参数相关\" class=\"headerlink\" title=\"参数相关\"></a>参数相关</h3><ul>\n<li>默认参数的位置一般在尾部，否则不能省略该参数。</li>\n<li>当指定默认参数之后，它的length失真，不再返回其个数。</li>\n<li>当设置了默认参数，参数在初始化时形成作用域，初始化结束消失。</li>\n</ul>\n<h2 id=\"rest参数\"><a href=\"#rest参数\" class=\"headerlink\" title=\"rest参数\"></a>rest参数</h2><p>ES6 引入 <code>rest</code> 参数（形式为…变量名），用于获取函数的多余参数，这样就不需要使用<code>arguments</code>对象了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</span><br><span class=\"line\">    sum += val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortNumbers</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>).sort();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// rest参数的写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sortNumbers = <span class=\"function\">(<span class=\"params\">...numbers</span>) =&gt;</span> numbers.sort();</span><br></pre></td></tr></table></figure>\n<p>注：<em>rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。函数的length属性，不包括 rest 参数。</em></p>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><p>从 ES5 开始，函数内部可以设定为严格模式。ES2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。</p>\n<h2 id=\"name属性\"><a href=\"#name属性\" class=\"headerlink\" title=\"name属性\"></a>name属性</h2><p>函数的name属性，返回该函数的函数名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">f.name <span class=\"comment\">// \"\"</span></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">f.name <span class=\"comment\">// \"f\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果将一个具名函数赋值给一个变量，则 ES5 和 ES6 的name属性都返回这个具名函数原本的名字。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">bar.name <span class=\"comment\">// ES5  \"baz\"</span></span><br><span class=\"line\">bar.name <span class=\"comment\">// ES6  \"baz\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Function构造函数返回的函数实例，name属性的值为anonymous。</span></span><br><span class=\"line\">(<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>).name <span class=\"comment\">// \"anonymous\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//bind返回的函数，name属性值会加上bound前缀。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">foo.bind(&#123;&#125;).name <span class=\"comment\">// \"bound foo\"</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;).bind(&#123;&#125;).name <span class=\"comment\">// \"bound \"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</li>\n<li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li>\n<li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</li>\n<li>不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</li>\n</ul>\n<h2 id=\"双冒号运算符\"><a href=\"#双冒号运算符\" class=\"headerlink\" title=\"双冒号运算符\"></a>双冒号运算符</h2><p>箭头函数可以绑定this对象，大大减少了显式绑定this对象的写法（call、apply、bind）。但是，箭头函数并不适用于所有场合，所以现在有一个提案，提出了“函数绑定”（function bind）运算符，用来取代call、apply、bind调用。<br>函数绑定运算符是并排的两个冒号（::），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo::bar;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">bar.bind(foo);</span><br><span class=\"line\"></span><br><span class=\"line\">foo::bar(...arguments);</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">bar.apply(foo, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hasOwnProperty = <span class=\"built_in\">Object</span>.prototype.hasOwnProperty;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasOwn</span>(<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj::hasOwnProperty(key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考链接<br><a href=\"http://es6.ruanyifeng.com/#docs/function\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/function</a></p>","categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"es6","path":"api/tags/es6.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"Function","path":"api/tags/Function.json"}]}