{"title":"类型转换","slug":"类型转换","date":"2019-03-11T16:00:00.000Z","updated":"2019-03-11T16:00:00.000Z","comments":true,"path":"api/articles/类型转换.json","excerpt":"JavaScript目前有七种数据类型，分别是Undefined，NaN，Boolean，Number，Symbol，String，Object。它们之间存在隐形转换。<br>","covers":["../images/type_conversion.jpg"],"content":"<p>JavaScript目前有七种数据类型，分别是Undefined，NaN，Boolean，Number，Symbol，String，Object。它们之间存在隐形转换。<br><a id=\"more\"></a></p>\n<h2 id=\"类型转换问题\"><a href=\"#类型转换问题\" class=\"headerlink\" title=\"类型转换问题\"></a>类型转换问题</h2><p>因为js是弱语言类型，所以类型转换很频繁，按照个人思维去直觉判断就会出现问题，最臭名昭著的就是“==”转换，因为其跨类型转换，其复杂规则是很难全记住的，所以往往要求通过显示转换后，在通过“===”比较。</p>\n<p>大多数类型的规则如下</p>\n<p><img src=\"../images/type_conversion.jpg\" alt=\"type_conversion.jpg\"></p>\n<h2 id=\"StringToNumber\"><a href=\"#StringToNumber\" class=\"headerlink\" title=\"StringToNumber\"></a>StringToNumber</h2><p>推荐使用Number转换。</p>\n<p>关于parseInt、parseFloat，需要注意的是，es5后默认为第二参数转换为十进制，废除不传参数时，es3允许的0开头的八进制转换，目前为</p>\n<ul>\n<li>0b11</li>\n<li>0o17</li>\n<li>0xff</li>\n</ul>\n<p>对于<code>1e3</code>这一类的转换，parseInt只会支持整数，无视e及其之后的数字。</p>\n<h2 id=\"NumberToString\"><a href=\"#NumberToString\" class=\"headerlink\" title=\"NumberToString\"></a>NumberToString</h2><p>完全符合你的直觉，很少用到。</p>\n<h2 id=\"装箱转换\"><a href=\"#装箱转换\" class=\"headerlink\" title=\"装箱转换\"></a>装箱转换</h2><p>基础类型中Number，Boolean，Symbol，String在对象中有相应的类。将基础类型转换为相应对象为装箱。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> symbolObject = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;).call(<span class=\"built_in\">Symbol</span>(<span class=\"string\">\"a\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> symbolObject); <span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(symbolObject <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Symbol</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(symbolObject.constructor == <span class=\"built_in\">Symbol</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> symbolObject = <span class=\"built_in\">Object</span>(<span class=\"built_in\">Symbol</span>(<span class=\"string\">\"a\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> symbolObject); <span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(symbolObject <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Symbol</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(symbolObject.constructor == <span class=\"built_in\">Symbol</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"拆箱转换\"><a href=\"#拆箱转换\" class=\"headerlink\" title=\"拆箱转换\"></a>拆箱转换</h2><p>在 JavaScript 标准中，定了 ToPrimitive 函数，它是对象类型到基本类型的转换。</p>\n<p>对象到String、Number先拆在转换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Obj==&gt;Number</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    valueOf : <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">\"valueOf\"</span>); <span class=\"keyword\">return</span> &#123;&#125;&#125;,</span><br><span class=\"line\">    toString : <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">\"toString\"</span>); <span class=\"keyword\">return</span> &#123;&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">o * <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">// valueOf</span></span><br><span class=\"line\"><span class=\"comment\">// toString</span></span><br><span class=\"line\"><span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Obj==&gt;String</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    valueOf : <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">\"valueOf\"</span>); <span class=\"keyword\">return</span> &#123;&#125;&#125;,</span><br><span class=\"line\">    toString : <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">\"toString\"</span>); <span class=\"keyword\">return</span> &#123;&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>(o)</span><br><span class=\"line\"><span class=\"comment\">// toString</span></span><br><span class=\"line\"><span class=\"comment\">// valueOf</span></span><br><span class=\"line\"><span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n<p>参考链接 <a href=\"https://time.geekbang.org/column/article/78884\" target=\"_blank\" rel=\"noopener\">https://time.geekbang.org/column/article/78884</a></p>\n","more":"</p>\n<h2 id=\"类型转换问题\"><a href=\"#类型转换问题\" class=\"headerlink\" title=\"类型转换问题\"></a>类型转换问题</h2><p>因为js是弱语言类型，所以类型转换很频繁，按照个人思维去直觉判断就会出现问题，最臭名昭著的就是“==”转换，因为其跨类型转换，其复杂规则是很难全记住的，所以往往要求通过显示转换后，在通过“===”比较。</p>\n<p>大多数类型的规则如下</p>\n<p><img src=\"../images/type_conversion.jpg\" alt=\"type_conversion.jpg\"></p>\n<h2 id=\"StringToNumber\"><a href=\"#StringToNumber\" class=\"headerlink\" title=\"StringToNumber\"></a>StringToNumber</h2><p>推荐使用Number转换。</p>\n<p>关于parseInt、parseFloat，需要注意的是，es5后默认为第二参数转换为十进制，废除不传参数时，es3允许的0开头的八进制转换，目前为</p>\n<ul>\n<li>0b11</li>\n<li>0o17</li>\n<li>0xff</li>\n</ul>\n<p>对于<code>1e3</code>这一类的转换，parseInt只会支持整数，无视e及其之后的数字。</p>\n<h2 id=\"NumberToString\"><a href=\"#NumberToString\" class=\"headerlink\" title=\"NumberToString\"></a>NumberToString</h2><p>完全符合你的直觉，很少用到。</p>\n<h2 id=\"装箱转换\"><a href=\"#装箱转换\" class=\"headerlink\" title=\"装箱转换\"></a>装箱转换</h2><p>基础类型中Number，Boolean，Symbol，String在对象中有相应的类。将基础类型转换为相应对象为装箱。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> symbolObject = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;).call(<span class=\"built_in\">Symbol</span>(<span class=\"string\">\"a\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> symbolObject); <span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(symbolObject <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Symbol</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(symbolObject.constructor == <span class=\"built_in\">Symbol</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> symbolObject = <span class=\"built_in\">Object</span>(<span class=\"built_in\">Symbol</span>(<span class=\"string\">\"a\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> symbolObject); <span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(symbolObject <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Symbol</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(symbolObject.constructor == <span class=\"built_in\">Symbol</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"拆箱转换\"><a href=\"#拆箱转换\" class=\"headerlink\" title=\"拆箱转换\"></a>拆箱转换</h2><p>在 JavaScript 标准中，定了 ToPrimitive 函数，它是对象类型到基本类型的转换。</p>\n<p>对象到String、Number先拆在转换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Obj==&gt;Number</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    valueOf : <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">\"valueOf\"</span>); <span class=\"keyword\">return</span> &#123;&#125;&#125;,</span><br><span class=\"line\">    toString : <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">\"toString\"</span>); <span class=\"keyword\">return</span> &#123;&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">o * <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">// valueOf</span></span><br><span class=\"line\"><span class=\"comment\">// toString</span></span><br><span class=\"line\"><span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Obj==&gt;String</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    valueOf : <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">\"valueOf\"</span>); <span class=\"keyword\">return</span> &#123;&#125;&#125;,</span><br><span class=\"line\">    toString : <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">\"toString\"</span>); <span class=\"keyword\">return</span> &#123;&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>(o)</span><br><span class=\"line\"><span class=\"comment\">// toString</span></span><br><span class=\"line\"><span class=\"comment\">// valueOf</span></span><br><span class=\"line\"><span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n<p>参考链接 <a href=\"https://time.geekbang.org/column/article/78884\" target=\"_blank\" rel=\"noopener\">https://time.geekbang.org/column/article/78884</a></p>","categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"String","path":"api/tags/String.json"},{"name":"Number","path":"api/tags/Number.json"},{"name":"转换","path":"api/tags/转换.json"}]}