{"title":"es6入门笔记-数组","slug":"es6入门笔记-数组","date":"2017-07-14T16:00:00.000Z","updated":"2017-07-14T16:00:00.000Z","comments":true,"path":"api/articles/es6入门笔记-数组.json","excerpt":"es6中，新增数组方法。<br>","covers":null,"content":"<p>es6中，新增数组方法。<br><a id=\"more\"></a></p>\n<h2 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h2><h3 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h3><p>扩展运算符（spread）是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>, ...[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></span><br><span class=\"line\"><span class=\"comment\">//空数组不产生任何效果</span></span><br><span class=\"line\">[...[], <span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"comment\">// [1]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"替代函数apply\"><a href=\"#替代函数apply\" class=\"headerlink\" title=\"替代函数apply\"></a>替代函数apply</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5 的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x,y,z)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x,y,z)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f(...args);</span><br></pre></td></tr></table></figure>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><h4 id=\"复制数组\"><a href=\"#复制数组\" class=\"headerlink\" title=\"复制数组\"></a>复制数组</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">//es5写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = a1.concat();</span><br><span class=\"line\"><span class=\"comment\">// es6写法一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = [...a1];</span><br><span class=\"line\"><span class=\"comment\">// es6写法二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [...a2] = a1;</span><br></pre></td></tr></table></figure>\n<h4 id=\"合并数组\"><a href=\"#合并数组\" class=\"headerlink\" title=\"合并数组\"></a>合并数组</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> more = [<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat(more)</span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...more]</span><br></pre></td></tr></table></figure>\n<h4 id=\"结构赋值\"><a href=\"#结构赋值\" class=\"headerlink\" title=\"结构赋值\"></a>结构赋值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">a = list[<span class=\"number\">0</span>], rest = list.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">[a, ...rest] = list</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...<span class=\"string\">'hello'</span>]</span><br><span class=\"line\"><span class=\"comment\">// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'x\\uD83D\\uDE80y'</span>.length <span class=\"comment\">// 4</span></span><br><span class=\"line\">[...<span class=\"string\">'x\\uD83D\\uDE80y'</span>].length <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实现了-Iterator-接口的对象\"><a href=\"#实现了-Iterator-接口的对象\" class=\"headerlink\" title=\"实现了 Iterator 接口的对象\"></a>实现了 Iterator 接口的对象</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nodeList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> array = [...nodeList];</span><br></pre></td></tr></table></figure>\n<h4 id=\"Map-和-Set-结构，Generator-函数\"><a href=\"#Map-和-Set-结构，Generator-函数\" class=\"headerlink\" title=\"Map 和 Set 结构，Generator 函数\"></a>Map 和 Set 结构，Generator 函数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [...map.keys()]; <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> go = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">[...go()] <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h2><p>Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">    <span class=\"string\">'0'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">    <span class=\"string\">'1'</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">    <span class=\"string\">'2'</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">    length: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ES5的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [].slice.call(arrayLike); <span class=\"comment\">// ['a', 'b', 'c']</span></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"built_in\">Array</span>.from(arrayLike); <span class=\"comment\">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure>\n<p>扩展运算符背后调用的是遍历器接口（Symbol.iterator），如果一个对象没有部署这个接口，就无法转换。任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。</p>\n<p>Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike, x =&gt; x * x);</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike).map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], (x) =&gt; x * x)</span><br><span class=\"line\"><span class=\"comment\">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h2><p>Array.of方法用于将一组值，转换为数组。弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3,11,8]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>) <span class=\"comment\">// [3]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>).length <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>Array.of方法可以用下面的代码模拟实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ArrayOf</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [].slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组实例的-copyWithin\"><a href=\"#数组实例的-copyWithin\" class=\"headerlink\" title=\"数组实例的 copyWithin()\"></a>数组实例的 copyWithin()</h2><p>数组实例的copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.copyWithin(target, start = <span class=\"number\">0</span>, end = <span class=\"keyword\">this</span>.length)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>) <span class=\"comment\">// [4, 5, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组实例的-find-和-findIndex\"><a href=\"#数组实例的-find-和-findIndex\" class=\"headerlink\" title=\"数组实例的 find() 和 findIndex()\"></a>数组实例的 find() 和 findIndex()</h2><p>数组实例的<code>find</code>方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为<code>true</code>的成员，然后返回该成员。如果没有符合条件的成员，则返回<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>数组实例的<code>findIndex</code>方法的用法与<code>find</code>方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v &gt; <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;;</span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">26</span>, <span class=\"number\">15</span>].find(f, person);    <span class=\"comment\">// 26</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组实例的-fill\"><a href=\"#数组实例的-fill\" class=\"headerlink\" title=\"数组实例的 fill()\"></a>数组实例的 fill()</h2><p>fill方法使用给定值，填充一个数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\">// [7, 7, 7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\">// [7, 7, 7]</span></span><br></pre></td></tr></table></figure>\n<p>fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组实例的-entries-，keys-和-values\"><a href=\"#数组实例的-entries-，keys-和-values\" class=\"headerlink\" title=\"数组实例的 entries()，keys() 和 values()\"></a>数组实例的 entries()，keys() 和 values()</h2><p>ES6 提供三个新的方法——<code>entries()</code>，<code>keys()</code>和<code>values()</code>——用于遍历数组。它们都返回一个遍历器对象，可以用<code>for...of</code>循环进行遍历，唯一的区别是<code>keys()</code>是对键名的遍历、<code>values()</code>是对键值的遍历，<code>entries()</code>是对键值对的遍历。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> elem <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 'a'</span></span><br><span class=\"line\"><span class=\"comment\">// 'b'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 \"a\"</span></span><br><span class=\"line\"><span class=\"comment\">// 1 \"b\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组实例的-includes\"><a href=\"#数组实例的-includes\" class=\"headerlink\" title=\"数组实例的 includes()\"></a>数组实例的 includes()</h2><p>Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>)     <span class=\"comment\">// true</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">4</span>)     <span class=\"comment\">// false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"空位\"><a href=\"#空位\" class=\"headerlink\" title=\"空位\"></a>空位</h2><ul>\n<li>forEach(), filter(), reduce(), every() 和some()都会跳过空位。</li>\n<li>map()会跳过空位，但会保留这个值</li>\n<li>join()和toString()会将空位视为undefined，而undefined和null会被处理成空字符串。</li>\n</ul>\n<p>空位不等于undefind。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> [<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>] <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> [, , ,] <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>ES6 则是明确将空位转为undefined。</p>\n<ul>\n<li>Array.from方法会将数组的空位，转为undefined，也就是说，这个方法不会忽略空位。</li>\n<li>扩展运算符（…）也会将空位转为undefined。</li>\n<li>copyWithin()会连空位一起拷贝。</li>\n<li>fill()会将空位视为正常的数组位置。</li>\n<li>for…of循环也会遍历空位。</li>\n<li>entries()、keys()、values()、find()和findIndex()会将空位处理成undefined。</li>\n</ul>\n<p>参考链接<br><a href=\"http://es6.ruanyifeng.com/#docs/array\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/array</a></p>\n","more":"</p>\n<h2 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h2><h3 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h3><p>扩展运算符（spread）是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>, ...[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></span><br><span class=\"line\"><span class=\"comment\">//空数组不产生任何效果</span></span><br><span class=\"line\">[...[], <span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"comment\">// [1]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"替代函数apply\"><a href=\"#替代函数apply\" class=\"headerlink\" title=\"替代函数apply\"></a>替代函数apply</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5 的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x,y,z)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x,y,z)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f(...args);</span><br></pre></td></tr></table></figure>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><h4 id=\"复制数组\"><a href=\"#复制数组\" class=\"headerlink\" title=\"复制数组\"></a>复制数组</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">//es5写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = a1.concat();</span><br><span class=\"line\"><span class=\"comment\">// es6写法一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = [...a1];</span><br><span class=\"line\"><span class=\"comment\">// es6写法二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [...a2] = a1;</span><br></pre></td></tr></table></figure>\n<h4 id=\"合并数组\"><a href=\"#合并数组\" class=\"headerlink\" title=\"合并数组\"></a>合并数组</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> more = [<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat(more)</span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...more]</span><br></pre></td></tr></table></figure>\n<h4 id=\"结构赋值\"><a href=\"#结构赋值\" class=\"headerlink\" title=\"结构赋值\"></a>结构赋值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">a = list[<span class=\"number\">0</span>], rest = list.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">[a, ...rest] = list</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...<span class=\"string\">'hello'</span>]</span><br><span class=\"line\"><span class=\"comment\">// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'x\\uD83D\\uDE80y'</span>.length <span class=\"comment\">// 4</span></span><br><span class=\"line\">[...<span class=\"string\">'x\\uD83D\\uDE80y'</span>].length <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实现了-Iterator-接口的对象\"><a href=\"#实现了-Iterator-接口的对象\" class=\"headerlink\" title=\"实现了 Iterator 接口的对象\"></a>实现了 Iterator 接口的对象</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nodeList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> array = [...nodeList];</span><br></pre></td></tr></table></figure>\n<h4 id=\"Map-和-Set-结构，Generator-函数\"><a href=\"#Map-和-Set-结构，Generator-函数\" class=\"headerlink\" title=\"Map 和 Set 结构，Generator 函数\"></a>Map 和 Set 结构，Generator 函数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [...map.keys()]; <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> go = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">[...go()] <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h2><p>Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">    <span class=\"string\">'0'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">    <span class=\"string\">'1'</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">    <span class=\"string\">'2'</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">    length: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ES5的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [].slice.call(arrayLike); <span class=\"comment\">// ['a', 'b', 'c']</span></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"built_in\">Array</span>.from(arrayLike); <span class=\"comment\">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure>\n<p>扩展运算符背后调用的是遍历器接口（Symbol.iterator），如果一个对象没有部署这个接口，就无法转换。任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。</p>\n<p>Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike, x =&gt; x * x);</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike).map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], (x) =&gt; x * x)</span><br><span class=\"line\"><span class=\"comment\">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h2><p>Array.of方法用于将一组值，转换为数组。弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3,11,8]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>) <span class=\"comment\">// [3]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>).length <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>Array.of方法可以用下面的代码模拟实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ArrayOf</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [].slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组实例的-copyWithin\"><a href=\"#数组实例的-copyWithin\" class=\"headerlink\" title=\"数组实例的 copyWithin()\"></a>数组实例的 copyWithin()</h2><p>数组实例的copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.copyWithin(target, start = <span class=\"number\">0</span>, end = <span class=\"keyword\">this</span>.length)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>) <span class=\"comment\">// [4, 5, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组实例的-find-和-findIndex\"><a href=\"#数组实例的-find-和-findIndex\" class=\"headerlink\" title=\"数组实例的 find() 和 findIndex()\"></a>数组实例的 find() 和 findIndex()</h2><p>数组实例的<code>find</code>方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为<code>true</code>的成员，然后返回该成员。如果没有符合条件的成员，则返回<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>数组实例的<code>findIndex</code>方法的用法与<code>find</code>方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v &gt; <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;;</span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">26</span>, <span class=\"number\">15</span>].find(f, person);    <span class=\"comment\">// 26</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组实例的-fill\"><a href=\"#数组实例的-fill\" class=\"headerlink\" title=\"数组实例的 fill()\"></a>数组实例的 fill()</h2><p>fill方法使用给定值，填充一个数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\">// [7, 7, 7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\">// [7, 7, 7]</span></span><br></pre></td></tr></table></figure>\n<p>fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组实例的-entries-，keys-和-values\"><a href=\"#数组实例的-entries-，keys-和-values\" class=\"headerlink\" title=\"数组实例的 entries()，keys() 和 values()\"></a>数组实例的 entries()，keys() 和 values()</h2><p>ES6 提供三个新的方法——<code>entries()</code>，<code>keys()</code>和<code>values()</code>——用于遍历数组。它们都返回一个遍历器对象，可以用<code>for...of</code>循环进行遍历，唯一的区别是<code>keys()</code>是对键名的遍历、<code>values()</code>是对键值的遍历，<code>entries()</code>是对键值对的遍历。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> elem <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 'a'</span></span><br><span class=\"line\"><span class=\"comment\">// 'b'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 \"a\"</span></span><br><span class=\"line\"><span class=\"comment\">// 1 \"b\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组实例的-includes\"><a href=\"#数组实例的-includes\" class=\"headerlink\" title=\"数组实例的 includes()\"></a>数组实例的 includes()</h2><p>Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>)     <span class=\"comment\">// true</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">4</span>)     <span class=\"comment\">// false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"空位\"><a href=\"#空位\" class=\"headerlink\" title=\"空位\"></a>空位</h2><ul>\n<li>forEach(), filter(), reduce(), every() 和some()都会跳过空位。</li>\n<li>map()会跳过空位，但会保留这个值</li>\n<li>join()和toString()会将空位视为undefined，而undefined和null会被处理成空字符串。</li>\n</ul>\n<p>空位不等于undefind。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> [<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>] <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> [, , ,] <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>ES6 则是明确将空位转为undefined。</p>\n<ul>\n<li>Array.from方法会将数组的空位，转为undefined，也就是说，这个方法不会忽略空位。</li>\n<li>扩展运算符（…）也会将空位转为undefined。</li>\n<li>copyWithin()会连空位一起拷贝。</li>\n<li>fill()会将空位视为正常的数组位置。</li>\n<li>for…of循环也会遍历空位。</li>\n<li>entries()、keys()、values()、find()和findIndex()会将空位处理成undefined。</li>\n</ul>\n<p>参考链接<br><a href=\"http://es6.ruanyifeng.com/#docs/array\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/array</a></p>","categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"es6","path":"api/tags/es6.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"Array","path":"api/tags/Array.json"}]}