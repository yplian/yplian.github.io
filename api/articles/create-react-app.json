{"title":"create-react-app","slug":"create-react-app","date":"2018-05-23T07:21:10.000Z","updated":"2018-05-23T07:21:10.000Z","comments":true,"path":"api/articles/create-react-app.json","excerpt":"近期，趁着空闲时间，学习了下react的相关知识，对于配置问题，为了方便快速上手，就采用了官方的create-react-app来配置环境。期间遇到不少问题。总结一下。项目基本完成，还有一些需要小优化。展示链接http://luckyp.top/cnode/，备用链接https://rcnode.luckyp.top/<br>","covers":["../images/component-lifecycle.jpg"],"content":"<p>近期，趁着空闲时间，学习了下react的相关知识，对于配置问题，为了方便快速上手，就采用了官方的<a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener\">create-react-app</a>来配置环境。期间遇到不少问题。总结一下。</p>\n<p>项目基本完成，还有一些需要小优化。展示链接<a href=\"http://luckyp.top/cnode/\">http://luckyp.top/cnode/</a>，备用链接<a href=\"https://rcnode.luckyp.top/\" target=\"_blank\" rel=\"noopener\">https://rcnode.luckyp.top/</a><br><a id=\"more\"></a></p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>对于react来说，需要注意的就是它的生命周期问题，网上有大量的资料，一幅图简单的说明如下</p>\n<p><img src=\"../images/component-lifecycle.jpg\" alt=\"component-lifecycle.jpg\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">生命周期</th>\n<th style=\"text-align:center\">调用次数</th>\n<th style=\"text-align:center\">能否使用 setSate()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">getDefaultProps</td>\n<td style=\"text-align:center\">1(全局调用一次)</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getInitialState</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">componentWillMount</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">render</td>\n<td style=\"text-align:center\">&gt;=1</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">componentDidMount</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">componentWillReceiveProps(nextProps)</td>\n<td style=\"text-align:center\">&gt;=0</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">shouldComponentUpdate(nextProps,nextState)</td>\n<td style=\"text-align:center\">&gt;=0</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">componentWillUpdate(nextProps,nextState)</td>\n<td style=\"text-align:center\">&gt;=0</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">componentDidUpdate(prevProps,prevState)</td>\n<td style=\"text-align:center\">&gt;=0</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">componentWillUnmount</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"create-react-app\"><a href=\"#create-react-app\" class=\"headerlink\" title=\"create-react-app\"></a>create-react-app</h2><h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>为了方便使用，<code>create-react-app</code>提供了直接暴露配置文件的方法,如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run eject</span><br></pre></td></tr></table></figure>\n<p>当然是单向不可逆操作的，为了尽可能的减少改变源码的操作，使用了另外一种办法，通过<a href=\"https://github.com/timarney/react-app-rewired\" target=\"_blank\" rel=\"noopener\">react-app-rewired</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-app-rewired --save-dev</span><br></pre></td></tr></table></figure>\n<p>简单的使用方式就是在根目录创建一个config-overrides.js文件,调整package.json的默认配置。详细配置见github。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* config-overrides.js */</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">override</span>(<span class=\"params\">config, env</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do stuff with the webpack config...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* package.json */</span></span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">-   <span class=\"string\">\"start\"</span>: <span class=\"string\">\"react-scripts start\"</span>,</span><br><span class=\"line\">+   <span class=\"string\">\"start\"</span>: <span class=\"string\">\"react-app-rewired start\"</span>,</span><br><span class=\"line\">-   <span class=\"string\">\"build\"</span>: <span class=\"string\">\"react-scripts build\"</span>,</span><br><span class=\"line\">+   <span class=\"string\">\"build\"</span>: <span class=\"string\">\"react-app-rewired build\"</span>,</span><br><span class=\"line\">-   <span class=\"string\">\"test\"</span>: <span class=\"string\">\"react-scripts test --env=jsdom\"</span>,</span><br><span class=\"line\">+   <span class=\"string\">\"test\"</span>: <span class=\"string\">\"react-app-rewired test --env=jsdom\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"github-pages部署\"><a href=\"#github-pages部署\" class=\"headerlink\" title=\"github pages部署\"></a>github pages部署</h2><h3 id=\"homepage设置\"><a href=\"#homepage设置\" class=\"headerlink\" title=\"homepage设置\"></a>homepage设置</h3><p>在项目完成之后，打包，通过的也是<code>npm run build</code>（同<code>yarn run build</code>）,如果直接上传到github服务器托管会存在路径问题，这里查看<a href=\"https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#deployment\" target=\"_blank\" rel=\"noopener\">文档</a>可以知道。需要在<code>package.json</code>中设置</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"homepage\": \"http://mywebsite.com/relativepath\",</span><br></pre></td></tr></table></figure>\n<p>如果没有托管的服务器地址，也可以设置为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"homepage\":\".\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目页面设置\"><a href=\"#项目页面设置\" class=\"headerlink\" title=\"项目页面设置\"></a>项目页面设置</h3><p>因为上传的GitHub用户页面被博客占用，所以只能使用项目页面，需要添加<a href=\"https://github.com/tschaub/gh-pages\" target=\"_blank\" rel=\"noopener\">gh-pages</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save gh-pages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* package.json */</span></span><br><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">+   <span class=\"string\">\"predeploy\"</span>: <span class=\"string\">\"npm run build\"</span>,</span><br><span class=\"line\">+   <span class=\"string\">\"deploy\"</span>: <span class=\"string\">\"gh-pages -d build\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"react-app-rewired start\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"react-app-rewired build\"</span>,</span><br></pre></td></tr></table></figure>\n<p><code>npm run deploy</code>会执行<code>predeploy</code>,同时上传创建github的分支，默认<code>gh-pages</code>分支。进入项目主页，设置<code>gh-pages</code>分支展示为page即可。</p>\n<p>这时候页面的展示地址应该是<code>https://myusername.github.io/project-name</code>。</p>\n<h3 id=\"路由设置\"><a href=\"#路由设置\" class=\"headerlink\" title=\"路由设置\"></a>路由设置</h3><p>因为使用react-router@^4，所以还需要设置在<code>&lt;Router&gt;</code>中设置<code>basename</code>，该值为你的项目名称。这里我的项目是名称是<code>cnode</code>。</p>\n<p>可以新建一个文件,然后导出，判断是否为开发环境，以便用于域名的二级目录。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> basename = process.env.NODE_ENV === <span class=\"string\">'production'</span> ? <span class=\"string\">'/cnode'</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> basename</span><br></pre></td></tr></table></figure>\n<p>因为需要部署到github，而GitHub Pages存在一个问题，不支持pushState引擎盖下使用HTML5 历史API的路由器（例如，使用React Router browserHistory）。因为在<code>https://myusername.github.io/project-name/topics</code>中,<code>/topics</code>属于前端部分，后端获取不到，会报404错误。</p>\n<p>这里有两种解决方式，一种就是通过重定向，当404时，跳转你设置好的页面，另一种就是使用<code>hashHistory</code>,不过存在的问题是，路径过长，这里我采用的是第二种方法。</p>\n","more":"</p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>对于react来说，需要注意的就是它的生命周期问题，网上有大量的资料，一幅图简单的说明如下</p>\n<p><img src=\"../images/component-lifecycle.jpg\" alt=\"component-lifecycle.jpg\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">生命周期</th>\n<th style=\"text-align:center\">调用次数</th>\n<th style=\"text-align:center\">能否使用 setSate()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">getDefaultProps</td>\n<td style=\"text-align:center\">1(全局调用一次)</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getInitialState</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">componentWillMount</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">render</td>\n<td style=\"text-align:center\">&gt;=1</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">componentDidMount</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">componentWillReceiveProps(nextProps)</td>\n<td style=\"text-align:center\">&gt;=0</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">shouldComponentUpdate(nextProps,nextState)</td>\n<td style=\"text-align:center\">&gt;=0</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">componentWillUpdate(nextProps,nextState)</td>\n<td style=\"text-align:center\">&gt;=0</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">componentDidUpdate(prevProps,prevState)</td>\n<td style=\"text-align:center\">&gt;=0</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">componentWillUnmount</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"create-react-app\"><a href=\"#create-react-app\" class=\"headerlink\" title=\"create-react-app\"></a>create-react-app</h2><h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>为了方便使用，<code>create-react-app</code>提供了直接暴露配置文件的方法,如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run eject</span><br></pre></td></tr></table></figure>\n<p>当然是单向不可逆操作的，为了尽可能的减少改变源码的操作，使用了另外一种办法，通过<a href=\"https://github.com/timarney/react-app-rewired\" target=\"_blank\" rel=\"noopener\">react-app-rewired</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-app-rewired --save-dev</span><br></pre></td></tr></table></figure>\n<p>简单的使用方式就是在根目录创建一个config-overrides.js文件,调整package.json的默认配置。详细配置见github。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* config-overrides.js */</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">override</span>(<span class=\"params\">config, env</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do stuff with the webpack config...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* package.json */</span></span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">-   <span class=\"string\">\"start\"</span>: <span class=\"string\">\"react-scripts start\"</span>,</span><br><span class=\"line\">+   <span class=\"string\">\"start\"</span>: <span class=\"string\">\"react-app-rewired start\"</span>,</span><br><span class=\"line\">-   <span class=\"string\">\"build\"</span>: <span class=\"string\">\"react-scripts build\"</span>,</span><br><span class=\"line\">+   <span class=\"string\">\"build\"</span>: <span class=\"string\">\"react-app-rewired build\"</span>,</span><br><span class=\"line\">-   <span class=\"string\">\"test\"</span>: <span class=\"string\">\"react-scripts test --env=jsdom\"</span>,</span><br><span class=\"line\">+   <span class=\"string\">\"test\"</span>: <span class=\"string\">\"react-app-rewired test --env=jsdom\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"github-pages部署\"><a href=\"#github-pages部署\" class=\"headerlink\" title=\"github pages部署\"></a>github pages部署</h2><h3 id=\"homepage设置\"><a href=\"#homepage设置\" class=\"headerlink\" title=\"homepage设置\"></a>homepage设置</h3><p>在项目完成之后，打包，通过的也是<code>npm run build</code>（同<code>yarn run build</code>）,如果直接上传到github服务器托管会存在路径问题，这里查看<a href=\"https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#deployment\" target=\"_blank\" rel=\"noopener\">文档</a>可以知道。需要在<code>package.json</code>中设置</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"homepage\": \"http://mywebsite.com/relativepath\",</span><br></pre></td></tr></table></figure>\n<p>如果没有托管的服务器地址，也可以设置为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"homepage\":\".\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目页面设置\"><a href=\"#项目页面设置\" class=\"headerlink\" title=\"项目页面设置\"></a>项目页面设置</h3><p>因为上传的GitHub用户页面被博客占用，所以只能使用项目页面，需要添加<a href=\"https://github.com/tschaub/gh-pages\" target=\"_blank\" rel=\"noopener\">gh-pages</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save gh-pages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* package.json */</span></span><br><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">+   <span class=\"string\">\"predeploy\"</span>: <span class=\"string\">\"npm run build\"</span>,</span><br><span class=\"line\">+   <span class=\"string\">\"deploy\"</span>: <span class=\"string\">\"gh-pages -d build\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"react-app-rewired start\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"react-app-rewired build\"</span>,</span><br></pre></td></tr></table></figure>\n<p><code>npm run deploy</code>会执行<code>predeploy</code>,同时上传创建github的分支，默认<code>gh-pages</code>分支。进入项目主页，设置<code>gh-pages</code>分支展示为page即可。</p>\n<p>这时候页面的展示地址应该是<code>https://myusername.github.io/project-name</code>。</p>\n<h3 id=\"路由设置\"><a href=\"#路由设置\" class=\"headerlink\" title=\"路由设置\"></a>路由设置</h3><p>因为使用react-router@^4，所以还需要设置在<code>&lt;Router&gt;</code>中设置<code>basename</code>，该值为你的项目名称。这里我的项目是名称是<code>cnode</code>。</p>\n<p>可以新建一个文件,然后导出，判断是否为开发环境，以便用于域名的二级目录。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> basename = process.env.NODE_ENV === <span class=\"string\">'production'</span> ? <span class=\"string\">'/cnode'</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> basename</span><br></pre></td></tr></table></figure>\n<p>因为需要部署到github，而GitHub Pages存在一个问题，不支持pushState引擎盖下使用HTML5 历史API的路由器（例如，使用React Router browserHistory）。因为在<code>https://myusername.github.io/project-name/topics</code>中,<code>/topics</code>属于前端部分，后端获取不到，会报404错误。</p>\n<p>这里有两种解决方式，一种就是通过重定向，当404时，跳转你设置好的页面，另一种就是使用<code>hashHistory</code>,不过存在的问题是，路径过长，这里我采用的是第二种方法。</p>","categories":[{"name":"react","path":"api/categories/react.json"}],"tags":[{"name":"react","path":"api/tags/react.json"},{"name":"脚手架","path":"api/tags/脚手架.json"}]}