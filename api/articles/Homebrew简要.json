{"title":"Homebrew简要","slug":"Homebrew简要","date":"2020-06-21T12:34:41.000Z","updated":"2020-06-21T12:34:41.000Z","comments":true,"path":"api/articles/Homebrew简要.json","excerpt":"在 Unix 大家族里，每个家族成员都有一项让人引以为豪的技能，那就是 包管理，macOS 也不例外。如果说 Mac App Store 是一家大超市，Homebrew 就是一间精品小铺——如它名字（家酿啤酒）所代表的那样。在使用 Mac 的过程当中，会接触各种 dmg 格式的安装文件，用它们装上的应用往往不知藏身何处；也可能看到一些其他人正在使用命令行工具，往往却不知道如何下载和配置。有了 Homebrew，就能轻松安装、管理、卸载许多应用，一条指令可能就足够了。<br>","covers":["/images/homebrew_1.png"],"content":"<p>在 Unix 大家族里，每个家族成员都有一项让人引以为豪的技能，那就是 包管理，macOS 也不例外。如果说 Mac App Store 是一家大超市，Homebrew 就是一间精品小铺——如它名字（家酿啤酒）所代表的那样。在使用 Mac 的过程当中，会接触各种 dmg 格式的安装文件，用它们装上的应用往往不知藏身何处；也可能看到一些其他人正在使用命令行工具，往往却不知道如何下载和配置。有了 Homebrew，就能轻松安装、管理、卸载许多应用，一条指令可能就足够了。<br><a id=\"more\"></a></p>\n<h2 id=\"解决的问题\"><a href=\"#解决的问题\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h2><p>更好管理”看不见”的应用，我们可以在 Terminal 使用命令行来轻松安装所需要的包，例如 node：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install node</span><br></pre></td></tr></table></figure>\n<p>命令执行完毕之后，node 被安装到了 <code>/usr/local/Cellar</code> 目录中。 通过 <code>Homebrew</code> 安装的所有包都会被放在这里。 这样做有几个好处，一个是方便集中管理，删除不再使用的软件包，省去了大量软件包散落在各处带来日后清理的头疼问题。另外可以方便更集中的权限管理。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><h3 id=\"安装卸载\"><a href=\"#安装卸载\" class=\"headerlink\" title=\"安装卸载\"></a>安装卸载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew --version 或者 brew -v 显示brew版本信息</span><br><span class=\"line\">brew install &lt;formula&gt; 安装指定软件</span><br><span class=\"line\">brew unistall &lt;formula 卸载指定软件</span><br><span class=\"line\">brew list  显示所有的已安装的软件</span><br><span class=\"line\">brew search text 搜索本地远程仓库的软件，已安装会显示绿色的勾</span><br><span class=\"line\">brew search /text/ 使用正则表达式搜软件</span><br></pre></td></tr></table></figure>\n<h3 id=\"升级软件\"><a href=\"#升级软件\" class=\"headerlink\" title=\"升级软件\"></a>升级软件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew update 自动升级homebrew（从github下载最新版本）</span><br><span class=\"line\">brew outdated 检测已经过时的软件</span><br><span class=\"line\">brew upgrade  升级所有已过时的软件，即列出的以过时软件</span><br><span class=\"line\">brew upgrade &lt;formula&gt;升级指定的软件</span><br><span class=\"line\">brew pin &lt;formula&gt; 禁止指定软件升级</span><br><span class=\"line\">brew unpin &lt;formula&gt; 解锁禁止升级</span><br><span class=\"line\">brew upgrade --all 升级所有的软件包，包括未清理干净的旧版本的包</span><br></pre></td></tr></table></figure>\n<h3 id=\"清理相关\"><a href=\"#清理相关\" class=\"headerlink\" title=\"清理相关\"></a>清理相关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cleanup -n 列出需要清理的内容</span><br><span class=\"line\">brew cleanup &lt;formula&gt; 清理指定的软件过时包</span><br><span class=\"line\">brew cleanup 清理所有的过时软件</span><br><span class=\"line\">brew unistall &lt;formula&gt; 卸载指定软件</span><br><span class=\"line\">brew unistall &lt;fromula&gt; --force 彻底卸载指定软件，包括旧版本</span><br></pre></td></tr></table></figure>\n<h2 id=\"管理”看得见”的应用\"><a href=\"#管理”看得见”的应用\" class=\"headerlink\" title=\"管理”看得见”的应用\"></a>管理”看得见”的应用</h2><p>Homebrew Cask 是 Homebrew 的扩展，借助它可以方便地在 macOS 上安装 图形界面程序，即我们常用的各类应用。Homebrew 中文含义为自制、自酿酒，Cask 中文含义为桶、木桶，桶装酒是一种成品，也就是说每一个 homebrew cask 都可以直接使用的，比如著名浏览器 Chrome 的 Cask 名称为 google-chrome，那么就可以使用如下命令安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install google-chrome</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动管理依赖关系\"><a href=\"#自动管理依赖关系\" class=\"headerlink\" title=\"自动管理依赖关系\"></a>自动管理依赖关系</h2><p>如果没有包管理工具，我们就需要找到每个组件的下载位置，还要手动管理它们的更新，依赖关系等等，这些事情就需要消耗掉不少的精力。 好在包管理工具已经为我们处理好了这一切，我们要做的只是安装和使用。例如，要下载一个依赖于另一个软件的应用，比如说<code>you-get</code>（一款下载互联网视频的自由软件）需要先安装<code>Python 3</code>。<code>Homebrew</code>会要么提醒你电脑缺少所依赖的<code>Python 3</code>，要么恰如其分地把依赖的软件不多不少地安装好，再继续中断的<code>You-Get</code>安装过程（通常情况下会采取后者）。整个过程不但安全可靠，而且简洁优雅，所有软件都来源于其对应的官方网站，并能够安全干净地卸载，而这一切都是普通的安装方式所做不到或做不好的。</p>\n<h2 id=\"终端代理问题\"><a href=\"#终端代理问题\" class=\"headerlink\" title=\"终端代理问题\"></a>终端代理问题</h2><p>由于境内网络环境的复杂性，有不少情况下我们可能无法正常地更新 brew 和其管理下的应用。而我们日常电脑上使用的一些代理软件，通常没办法自动对终端进行代理，所以需要手动进行一些相应的设置，以方便日后的使用。</p>\n<p>之前用的是 <code>proxychains-ng</code> 的一款命令行应用。由于 <code>macOS</code> 升级后的 <code>SIP</code> 限制，在 <code>proxychains.conf</code> 文件中设置 <code>ss</code> 的 <code>socks5</code> 代理，无效了。解决办法是在重启后，在 <code>Recovery mode</code> 下关闭 <code>SIP</code>，但是这种方法现在已经不太推荐了。这里采用的是把代理服务器地址写入 <code>shell</code> 配置文件 <code>.bashrc</code> 或者 <code>.zshrc</code> 的方法，直接在 <code>.bashrc</code> 或者 <code>.zshrc</code> 添加下面内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy=&quot;http://localhost:port&quot;</span><br><span class=\"line\">export https_proxy=&quot;http://localhost:port&quot;</span><br></pre></td></tr></table></figure>\n<p>如果使用的是<code>trojan</code>或者<code>Shadowsocks</code>类似的客户端用户，可以手动到应用的<code>高级设置</code>里边查看，如图所示则需要将配置的端口设置为 1080：如下图所示：</p>\n<p><img src=\"/images/homebrew_1.png\" alt=\"homebrew_1\"></p>\n<p>相应的代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy=&quot;socks5://127.0.0.1:1080&quot;</span><br><span class=\"line\">export https_proxy=&quot;socks5://127.0.0.1:1080&quot;</span><br></pre></td></tr></table></figure>\n<p>或者直接设置 ALL_PROXY：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ALL_PROXY=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n<p><code>localhost</code> 就是一个域名，域名默认指向 <code>127.0.0.1</code>，两者是一样的。然后ESC后<code>:wq</code>保存文件，接着在终端中执行 <code>source ~/.bashrc</code>，或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。或者通过设置<code>alias</code>简写来简化操作，每次要用的时候输入 <code>setproxy</code>，不用了就 <code>unsetproxy</code></p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>关于替换镜像源，个人不推荐使用镜像，会存在延时或抽风的时候。同时改变完成后可能还需要还原，如果一定要使用，推荐USTC（中科大镜像）。</p>\n<h3 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 替换 Homebrew</span><br><span class=\"line\">git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换 Homebrew Core</span><br><span class=\"line\">git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换 Homebrew Cask</span><br><span class=\"line\">git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换 Homebrew-bottles</span><br><span class=\"line\"># 对于 bash 用户：</span><br><span class=\"line\">echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\"># 对于 zsh 用户：</span><br><span class=\"line\">echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.zshrc</span><br><span class=\"line\">source ~/.zshrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"重置\"><a href=\"#重置\" class=\"headerlink\" title=\"重置\"></a>重置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 重置brew.git</span><br><span class=\"line\">cd &quot;$(brew --repo)&quot;</span><br><span class=\"line\">git remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 重置Homebrew-core.git</span><br><span class=\"line\">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class=\"line\">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换Homebrew Cask</span><br><span class=\"line\">git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://github.com/Homebrew/homebrew-cask.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 注释掉bash/zsh配置文件里的有关Homebrew Bottles</span><br></pre></td></tr></table></figure>\n<p>参考链接<br><a href=\"https://www.zhihu.com/question/31360766/answer/673451632\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/31360766/answer/673451632</a></p>\n","more":"</p>\n<h2 id=\"解决的问题\"><a href=\"#解决的问题\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h2><p>更好管理”看不见”的应用，我们可以在 Terminal 使用命令行来轻松安装所需要的包，例如 node：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install node</span><br></pre></td></tr></table></figure>\n<p>命令执行完毕之后，node 被安装到了 <code>/usr/local/Cellar</code> 目录中。 通过 <code>Homebrew</code> 安装的所有包都会被放在这里。 这样做有几个好处，一个是方便集中管理，删除不再使用的软件包，省去了大量软件包散落在各处带来日后清理的头疼问题。另外可以方便更集中的权限管理。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><h3 id=\"安装卸载\"><a href=\"#安装卸载\" class=\"headerlink\" title=\"安装卸载\"></a>安装卸载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew --version 或者 brew -v 显示brew版本信息</span><br><span class=\"line\">brew install &lt;formula&gt; 安装指定软件</span><br><span class=\"line\">brew unistall &lt;formula 卸载指定软件</span><br><span class=\"line\">brew list  显示所有的已安装的软件</span><br><span class=\"line\">brew search text 搜索本地远程仓库的软件，已安装会显示绿色的勾</span><br><span class=\"line\">brew search /text/ 使用正则表达式搜软件</span><br></pre></td></tr></table></figure>\n<h3 id=\"升级软件\"><a href=\"#升级软件\" class=\"headerlink\" title=\"升级软件\"></a>升级软件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew update 自动升级homebrew（从github下载最新版本）</span><br><span class=\"line\">brew outdated 检测已经过时的软件</span><br><span class=\"line\">brew upgrade  升级所有已过时的软件，即列出的以过时软件</span><br><span class=\"line\">brew upgrade &lt;formula&gt;升级指定的软件</span><br><span class=\"line\">brew pin &lt;formula&gt; 禁止指定软件升级</span><br><span class=\"line\">brew unpin &lt;formula&gt; 解锁禁止升级</span><br><span class=\"line\">brew upgrade --all 升级所有的软件包，包括未清理干净的旧版本的包</span><br></pre></td></tr></table></figure>\n<h3 id=\"清理相关\"><a href=\"#清理相关\" class=\"headerlink\" title=\"清理相关\"></a>清理相关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cleanup -n 列出需要清理的内容</span><br><span class=\"line\">brew cleanup &lt;formula&gt; 清理指定的软件过时包</span><br><span class=\"line\">brew cleanup 清理所有的过时软件</span><br><span class=\"line\">brew unistall &lt;formula&gt; 卸载指定软件</span><br><span class=\"line\">brew unistall &lt;fromula&gt; --force 彻底卸载指定软件，包括旧版本</span><br></pre></td></tr></table></figure>\n<h2 id=\"管理”看得见”的应用\"><a href=\"#管理”看得见”的应用\" class=\"headerlink\" title=\"管理”看得见”的应用\"></a>管理”看得见”的应用</h2><p>Homebrew Cask 是 Homebrew 的扩展，借助它可以方便地在 macOS 上安装 图形界面程序，即我们常用的各类应用。Homebrew 中文含义为自制、自酿酒，Cask 中文含义为桶、木桶，桶装酒是一种成品，也就是说每一个 homebrew cask 都可以直接使用的，比如著名浏览器 Chrome 的 Cask 名称为 google-chrome，那么就可以使用如下命令安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install google-chrome</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动管理依赖关系\"><a href=\"#自动管理依赖关系\" class=\"headerlink\" title=\"自动管理依赖关系\"></a>自动管理依赖关系</h2><p>如果没有包管理工具，我们就需要找到每个组件的下载位置，还要手动管理它们的更新，依赖关系等等，这些事情就需要消耗掉不少的精力。 好在包管理工具已经为我们处理好了这一切，我们要做的只是安装和使用。例如，要下载一个依赖于另一个软件的应用，比如说<code>you-get</code>（一款下载互联网视频的自由软件）需要先安装<code>Python 3</code>。<code>Homebrew</code>会要么提醒你电脑缺少所依赖的<code>Python 3</code>，要么恰如其分地把依赖的软件不多不少地安装好，再继续中断的<code>You-Get</code>安装过程（通常情况下会采取后者）。整个过程不但安全可靠，而且简洁优雅，所有软件都来源于其对应的官方网站，并能够安全干净地卸载，而这一切都是普通的安装方式所做不到或做不好的。</p>\n<h2 id=\"终端代理问题\"><a href=\"#终端代理问题\" class=\"headerlink\" title=\"终端代理问题\"></a>终端代理问题</h2><p>由于境内网络环境的复杂性，有不少情况下我们可能无法正常地更新 brew 和其管理下的应用。而我们日常电脑上使用的一些代理软件，通常没办法自动对终端进行代理，所以需要手动进行一些相应的设置，以方便日后的使用。</p>\n<p>之前用的是 <code>proxychains-ng</code> 的一款命令行应用。由于 <code>macOS</code> 升级后的 <code>SIP</code> 限制，在 <code>proxychains.conf</code> 文件中设置 <code>ss</code> 的 <code>socks5</code> 代理，无效了。解决办法是在重启后，在 <code>Recovery mode</code> 下关闭 <code>SIP</code>，但是这种方法现在已经不太推荐了。这里采用的是把代理服务器地址写入 <code>shell</code> 配置文件 <code>.bashrc</code> 或者 <code>.zshrc</code> 的方法，直接在 <code>.bashrc</code> 或者 <code>.zshrc</code> 添加下面内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy=&quot;http://localhost:port&quot;</span><br><span class=\"line\">export https_proxy=&quot;http://localhost:port&quot;</span><br></pre></td></tr></table></figure>\n<p>如果使用的是<code>trojan</code>或者<code>Shadowsocks</code>类似的客户端用户，可以手动到应用的<code>高级设置</code>里边查看，如图所示则需要将配置的端口设置为 1080：如下图所示：</p>\n<p><img src=\"/images/homebrew_1.png\" alt=\"homebrew_1\"></p>\n<p>相应的代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy=&quot;socks5://127.0.0.1:1080&quot;</span><br><span class=\"line\">export https_proxy=&quot;socks5://127.0.0.1:1080&quot;</span><br></pre></td></tr></table></figure>\n<p>或者直接设置 ALL_PROXY：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ALL_PROXY=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n<p><code>localhost</code> 就是一个域名，域名默认指向 <code>127.0.0.1</code>，两者是一样的。然后ESC后<code>:wq</code>保存文件，接着在终端中执行 <code>source ~/.bashrc</code>，或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。或者通过设置<code>alias</code>简写来简化操作，每次要用的时候输入 <code>setproxy</code>，不用了就 <code>unsetproxy</code></p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>关于替换镜像源，个人不推荐使用镜像，会存在延时或抽风的时候。同时改变完成后可能还需要还原，如果一定要使用，推荐USTC（中科大镜像）。</p>\n<h3 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 替换 Homebrew</span><br><span class=\"line\">git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换 Homebrew Core</span><br><span class=\"line\">git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换 Homebrew Cask</span><br><span class=\"line\">git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换 Homebrew-bottles</span><br><span class=\"line\"># 对于 bash 用户：</span><br><span class=\"line\">echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\"># 对于 zsh 用户：</span><br><span class=\"line\">echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.zshrc</span><br><span class=\"line\">source ~/.zshrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"重置\"><a href=\"#重置\" class=\"headerlink\" title=\"重置\"></a>重置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 重置brew.git</span><br><span class=\"line\">cd &quot;$(brew --repo)&quot;</span><br><span class=\"line\">git remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 重置Homebrew-core.git</span><br><span class=\"line\">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class=\"line\">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换Homebrew Cask</span><br><span class=\"line\">git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://github.com/Homebrew/homebrew-cask.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 注释掉bash/zsh配置文件里的有关Homebrew Bottles</span><br></pre></td></tr></table></figure>\n<p>参考链接<br><a href=\"https://www.zhihu.com/question/31360766/answer/673451632\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/31360766/answer/673451632</a></p>","categories":[],"tags":[{"name":"Homebrew","path":"api/tags/Homebrew.json"},{"name":"镜像","path":"api/tags/镜像.json"},{"name":"代理","path":"api/tags/代理.json"}]}