{"title":"JavaScript基本面试问题和解答","slug":"JavaScript基本面试问题和解答","date":"2018-05-26T16:00:00.000Z","updated":"2018-05-26T16:00:00.000Z","comments":true,"path":"api/articles/JavaScript基本面试问题和解答.json","excerpt":"有关于JavaScript的基本面试问题和解答。<br>","covers":null,"content":"<p>有关于JavaScript的基本面试问题和解答。<br><a id=\"more\"></a></p>\n<h2 id=\"使用typeof-bar-“object”来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免\"><a href=\"#使用typeof-bar-“object”来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免\" class=\"headerlink\" title=\"使用typeof bar ===“object”来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免\"></a>使用typeof bar ===“object”来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免</h2><p>虽然typeof bar === “object” 是检查是否一种可靠的方法bar是一个对象，在JavaScript中令人惊讶的小问题，就是null在还考虑的对象！</p>\n<p>因此，对于大多数开发人员来说，下面的代码会将真实（而不是错误）记录到控制台：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> bar === <span class=\"string\">\"object\"</span>);  <span class=\"comment\">// logs true!</span></span><br></pre></td></tr></table></figure>\n<p>只要是意识到了这一点，这个问题可以很容易地通过检查也避免了如果bar是null：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((bar !== <span class=\"literal\">null</span>) &amp;&amp; (<span class=\"keyword\">typeof</span> bar === <span class=\"string\">\"object\"</span>));  <span class=\"comment\">// logs false</span></span><br></pre></td></tr></table></figure>\n<p>为了让答案更加完整，还有两件事值得注意：</p>\n<p>首先，如果bar是一个函数，上面的解决方案将返回false。在大多数情况下，这是所期望的行为，但是在您希望函数返回true的情况下，您可以将上述解决方案修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((bar !== <span class=\"literal\">null</span>) &amp;&amp; ((<span class=\"keyword\">typeof</span> bar === <span class=\"string\">\"object\"</span>) || (<span class=\"keyword\">typeof</span> bar === <span class=\"string\">\"function\"</span>)));</span><br></pre></td></tr></table></figure>\n<p>其次，如果bar是数组，则上述解决方案将返回true（例如，如果var bar = [];）。在大多数情况下，这是所需的行为，因为数组确实是对象，但是在需要false数组的情况下，可以将上述解决方案修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((bar !== <span class=\"literal\">null</span>) &amp;&amp; (<span class=\"keyword\">typeof</span> bar === <span class=\"string\">\"object\"</span>) &amp;&amp; (toString.call(bar) !== <span class=\"string\">\"[object Array]\"</span>));</span><br></pre></td></tr></table></figure>\n<p>但是，还有一个替代方法对空值，数组和函数返回false，但对对象返回true：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((bar !== <span class=\"literal\">null</span>) &amp;&amp; (bar.constructor === <span class=\"built_in\">Object</span>));</span><br></pre></td></tr></table></figure>\n<p>或者，如果您使用jQuery：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((bar !== <span class=\"literal\">null</span>) &amp;&amp; (<span class=\"keyword\">typeof</span> bar === <span class=\"string\">\"object\"</span>) &amp;&amp; (! $.isArray(bar)));</span><br></pre></td></tr></table></figure>\n<p>ES5使得数组的情况非常简单，包括它自己的空检查：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(bar));</span><br></pre></td></tr></table></figure>\n<h2 id=\"下面的代码将输出到控制台的是什么，为什么\"><a href=\"#下面的代码将输出到控制台的是什么，为什么\" class=\"headerlink\" title=\"下面的代码将输出到控制台的是什么，为什么\"></a>下面的代码将输出到控制台的是什么，为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = b = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"a defined? \"</span> + (<span class=\"keyword\">typeof</span> a !== <span class=\"string\">'undefined'</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b defined? \"</span> + (<span class=\"keyword\">typeof</span> b !== <span class=\"string\">'undefined'</span>));</span><br></pre></td></tr></table></figure>\n<p>由于a和b都在函数的封闭范围内定义，并且由于它们所在的行以var关键字开头，因此大多数JavaScript开发人员会希望<code>typeof a</code>和<code>typeof b</code>在上面的示例中都未定义。</p>\n<p>但是，情况并非如此。这里的问题是大多数开发人员不正确地理解该语句<code>var a = b = 3;</code>简写为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = b;</span><br></pre></td></tr></table></figure>\n<p>但实际上，<code>var a = b = 3;</code>其实是速记：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = b;</span><br></pre></td></tr></table></figure>\n<p>因此（如果您不使用严格模式），代码片段的输出将为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a defined? <span class=\"literal\">false</span></span><br><span class=\"line\">b defined? <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>但是如何在闭包范围外定义b呢？因为声明<code>var a = b = 3;</code>是语句<code>b = 3</code>的简写，同时<code>var a = b;</code>,故b最终成为了一个全局变量（因为它不在var关键字后面）。所以它还在作用域内，即使在封闭函数之外。</p>\n<p>请注意，在严格模式下（即with use strict），该语句<code>var a = b = 3;</code>在运行时会报错<code>ReferenceError: b is not defined</code>，从而避免可能导致的任何headfakes/bugs。（作为的另一个主要例子，这就是你为什么在代码中应该理所当然的使用use strict！）</p>\n<h2 id=\"下面的代码在控制台将输出什么，为什么\"><a href=\"#下面的代码在控制台将输出什么，为什么\" class=\"headerlink\" title=\"下面的代码在控制台将输出什么，为什么\"></a>下面的代码在控制台将输出什么，为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">    foo: <span class=\"string\">\"bar\"</span>,</span><br><span class=\"line\">    func: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"outer func:  this.foo = \"</span> + <span class=\"keyword\">this</span>.foo);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"outer func:  self.foo = \"</span> + self.foo);</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"inner func:  this.foo = \"</span> + <span class=\"keyword\">this</span>.foo);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"inner func:  self.foo = \"</span> + self.foo);</span><br><span class=\"line\">        &#125;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myObject.func();</span><br></pre></td></tr></table></figure>\n<p>以上代码将输出到控制台：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outer func:  <span class=\"keyword\">this</span>.foo = bar</span><br><span class=\"line\">outer func:  self.foo = bar</span><br><span class=\"line\">inner func:  <span class=\"keyword\">this</span>.foo = <span class=\"literal\">undefined</span></span><br><span class=\"line\">inner func:  self.foo = bar</span><br></pre></td></tr></table></figure>\n<p>在外部函数，这两个this和self参考myObject，因此两者都可以正确地引用和访问foo。</p>\n<p>然而，在内部函数中，this不能再访问myObject。因此，this.foo在内部函数中未定义，而对局部变量的引用self保持在范围内并且可以在那里访问。</p>\n<h2 id=\"在功能块中封装JavaScript源文件的全部内容的重要性和原因是什么\"><a href=\"#在功能块中封装JavaScript源文件的全部内容的重要性和原因是什么\" class=\"headerlink\" title=\"在功能块中封装JavaScript源文件的全部内容的重要性和原因是什么\"></a>在功能块中封装JavaScript源文件的全部内容的重要性和原因是什么</h2><p>这是一种日益普遍的做法，被许多流行的JavaScript库（jQuery，Node.js等）所采用。这种技术在文件的全部内容周围创建一个闭包，这可能最重要的是创建一个私有名称空间，从而有助于避免不同JavaScript模块和库之间的潜在名称冲突。</p>\n<p>这种技术的另一个特点是为全局变量提供一个容易引用（可能更短）的别名。例如，这通常用于jQuery插件。jQuery允许您使用禁用$对jQuery名称空间的引用jQuery.noConflict()。如果这样做了，你的代码仍然可以$使用这种闭包技术，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>) </span>&#123; <span class=\"comment\">/* jQuery plugin code referencing $ */</span> &#125; )(jQuery);</span><br></pre></td></tr></table></figure>\n<h2 id=\"在JavaScript源文件的开始部分包含’use-strict’有什么意义以及好处\"><a href=\"#在JavaScript源文件的开始部分包含’use-strict’有什么意义以及好处\" class=\"headerlink\" title=\"在JavaScript源文件的开始部分包含’use strict’有什么意义以及好处\"></a>在JavaScript源文件的开始部分包含’use strict’有什么意义以及好处</h2><p>最简单也是最重要的答案是，<code>use strict</code>是一种在运行时自动执行更严格的JavaScript代码解析和错误处理的方法。如果代码错误被忽略或失败，将会产生错误或抛出异常。总的来说，这是一个很好的做法。</p>\n<p>严格模式的一些主要优点包括：</p>\n<ul>\n<li>使调试更容易。如果代码错误本来会被忽略或失败，那么现在将会产生错误或抛出异常，从而更快地发现代码中的问题，并更快地指引它们的源代码。</li>\n<li>防止意外全局。如果没有严格模式，将值赋给未声明的变量会自动创建一个具有该名称的全局变量。这是JavaScript中最常见的错误之一。在严格模式下，尝试这样做会抛出错误。</li>\n<li>消除<code>this</code>的威胁。在没有严格模式的情况下，this对空值或未定义值的引用会自动强制到全局。这可能会导致许多<code>headfakes</code>和<code>pull-out-your-hair</code>类型的错误。在严格模式下，引用thisnull或undefined的值会抛出错误。</li>\n<li>不允许重复的参数值。 严格模式在检测到函数的重复命名参数（例如，function foo(val1, val2, val1){}）时会引发错误，从而捕获代码中几乎可以肯定存在的错误，否则可能会浪费大量时间追踪。<ul>\n<li>注意：它曾经是（在ECMAScript 5中）严格模式将不允许重复的属性名称（例如var object = {foo: “bar”, foo: “baz”};），但从ECMAScript 2015开始不再是这种情况。</li>\n</ul>\n</li>\n<li>使eval（）更安全。eval()在严格模式和非严格模式下，表现 方式存在一些差异。最重要的是，在严格模式下，声明eval()内部声明的变量和函数不会在包含范围中创建（它们是以非严格模式在包含范围中创建的，这也可能是问题的常见来源）。</li>\n<li>抛出错误或无效使用的delete。 delete操作符（用于从对象中删除属性）不能在对象的非配置属性上来使用。当试图删除一个不可配置的属性时，非严格代码将自动失败，而在这种情况下，严格模式会引发错误。</li>\n</ul>\n<h2 id=\"思考下面的两个函数。他们都会返回相同的值吗？为什么\"><a href=\"#思考下面的两个函数。他们都会返回相同的值吗？为什么\" class=\"headerlink\" title=\"思考下面的两个函数。他们都会返回相同的值吗？为什么\"></a>思考下面的两个函数。他们都会返回相同的值吗？为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo1</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      bar: <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo2</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      bar: <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>令人惊讶的是，这两个函数不会返回相同的结果。而是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"foo1 returns:\"</span>);<span class=\"comment\">//foo1 returns:</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo1());<span class=\"comment\">//Object &#123;bar: \"hello\"&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"foo2 returns:\"</span>);<span class=\"comment\">//foo2 returns:</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo2());<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>这不仅令人惊讶，而且特别令人烦恼的是foo2()返回未定义而没有引发任何错误。</p>\n<p>原因与JavaScript中分号在技术上是可选的事实有关（尽管忽略它们通常是非常糟糕的形式）。因此，在foo2（）中遇到包含return语句的行（没有其他内容）时，会在return语句之后立即自动插入分号。</p>\n<p>由于代码的其余部分是完全有效的，即使它没有被调用或做任何事情（它只是一个未使用的代码块，它定义了一个属性栏，它等于字符串“hello”），所以不会抛出任何错误。</p>\n<p>这种行为也被认为是遵循了在JavaScript中将一行开头大括号放在行尾的约定，而不是在新行的开头。如此处所示，这不仅仅是JavaScript中的一种风格偏好。</p>\n<h2 id=\"什么是NaN？它的类型是什么？如何可靠地测试一个值是否等于NaN\"><a href=\"#什么是NaN？它的类型是什么？如何可靠地测试一个值是否等于NaN\" class=\"headerlink\" title=\"什么是NaN？它的类型是什么？如何可靠地测试一个值是否等于NaN\"></a>什么是NaN？它的类型是什么？如何可靠地测试一个值是否等于NaN</h2><p>NaN属性表示“不是数字”的值。这个特殊值是由于一个操作数是非数字的（例如“abc”/ 4）或者因为操作的结果是非数字而无法执行的。</p>\n<p>虽然这看起来很简单，但NaN有一些令人惊讶的特征，如果人们没有意识到这些特征，就会导致bug。</p>\n<p>一方面，虽然NaN的意思是“不是数字”，但它的类型是，数字：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">NaN</span> === <span class=\"string\">\"number\"</span>);  <span class=\"comment\">// logs \"true\"</span></span><br></pre></td></tr></table></figure>\n<p>此外，NaN相比任何事情 - 甚至本身！ - 是false：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>);  <span class=\"comment\">// logs \"false\"</span></span><br></pre></td></tr></table></figure>\n<p>测试数字是否等于NaN的半可靠方法是使用内置函数isNaN（），但即使使用isNaN（）也不是一个好的解决方案。.</p>\n<p>一个更好的解决方案要么是使用value！==值，如果该值等于NaN，那么只会生成true。另外，ES6提供了一个新的Number.isNaN（）函数 ，它与旧的全局isNaN（）函数不同，也更加可靠。</p>\n<h2 id=\"下面的代码输出什么？解释你的答案\"><a href=\"#下面的代码输出什么？解释你的答案\" class=\"headerlink\" title=\"下面的代码输出什么？解释你的答案\"></a>下面的代码输出什么？解释你的答案</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> == <span class=\"number\">0.3</span>);</span><br></pre></td></tr></table></figure>\n<p>对这个问题的一个有教养的回答是：“你不能确定。它可能打印出0.3和true，或者可能不打印。 JavaScript中的数字全部用浮点精度处理，因此可能不会总是产生预期的结果。“</p>\n<p>上面提供的示例是演示此问题的经典案例。令人惊讶的是，它会打印出来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.30000000000000004</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>一个典型的解决方案是比较两个数字与特殊常数Number.EPSILON之间的绝对差值：</p>\n<p>讨论写函数的可能方法isInteger（x），它确定x是否是一个整数。</p>\n<p>这听起来很平凡，事实上，ECMAscript 6为此正好引入了一个新的Number.isInteger（）函数，这是微不足道的。但是，在ECMAScript 6之前，这有点复杂，因为没有提供与Number.isInteger（）方法等价的方法。</p>\n<p>问题在于，在ECMAScript规范中，整数只在概念上存在;即数值始终作为浮点值存储。</p>\n<p>考虑到这一点，最简单，最清洁的ECMAScript-6之前的解决方案（即使将非数字值（例如字符串或空值）传递给该函数，该解决方案也具有足够的可靠性以返回false）将成为以下用法按位异或运算符：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInteger</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> (x ^ <span class=\"number\">0</span>) === x; &#125;</span><br></pre></td></tr></table></figure>\n<p>下面的解决方案也可以工作，尽管不如上面那样高雅</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInteger</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.round(x) === x; &#125;</span><br></pre></td></tr></table></figure>\n<p>请注意，在上面的实现中Math.ceil（）或Math.floor（）可以同样使用（而不是Math.round（））。</p>\n<p>或者：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInteger</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'number'</span>) &amp;&amp; (x % <span class=\"number\">1</span> === <span class=\"number\">0</span>); &#125;</span><br></pre></td></tr></table></figure>\n<p>一个相当常见的不正确的解决方案如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInteger</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(x, <span class=\"number\">10</span>) === x; &#125;</span><br></pre></td></tr></table></figure>\n<p>虽然这个基于parseInt的方法对许多x值很有效，但一旦x变得相当大，它将无法正常工作。问题是parseInt（）在解析数字之前将其第一个参数强制转换为字符串。因此，一旦数字变得足够大，其字符串表示将以指数形式呈现（例如1e + 21）。因此，parseInt（）将尝试解析1e + 21，但是当它到达e字符时将停止解析，因此将返回值1.观察：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">String</span>(<span class=\"number\">1000000000000000000000</span>)</span><br><span class=\"line\"><span class=\"string\">'1e+21'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"built_in\">parseInt</span>(<span class=\"number\">1000000000000000000000</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"built_in\">parseInt</span>(<span class=\"number\">1000000000000000000000</span>, <span class=\"number\">10</span>) === <span class=\"number\">1000000000000000000000</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"执行下面的代码时，按什么顺序将数字1-4记录到控制台？为什么\"><a href=\"#执行下面的代码时，按什么顺序将数字1-4记录到控制台？为什么\" class=\"headerlink\" title=\"执行下面的代码时，按什么顺序将数字1-4记录到控制台？为什么\"></a>执行下面的代码时，按什么顺序将数字1-4记录到控制台？为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>这些值将按以下顺序记录：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>我们先来解释一下这些可能更为明显的部分：</p>\n<ul>\n<li>首先显示1和4，因为它们是通过简单调用console.log（）而没有任何延迟记录的</li>\n<li>在3之后显示，因为在延迟1000毫秒（即1秒）之后记录2，而在0毫秒的延迟之后记录3。</li>\n</ul>\n<p>好的。但是，如果在延迟0毫秒后记录3，这是否意味着它正在被立即记录？而且，如果是这样，不应该在4之前记录它，因为4是由后面的代码行记录的吗？</p>\n<p>答案与正确理解JavaScript事件和时间有关。</p>\n<p>浏览器有一个事件循环，它检查事件队列并处理未决事件。例如，如果在浏览器繁忙时（例如，处理onclick）在后台发生事件（例如脚本onload事件），则该事件被附加到队列中。当onclick处理程序完成时，将检查队列并处理该事件（例如，执行onload脚本）。</p>\n<p>同样，如果浏览器繁忙，setTimeout（）也会将其引用函数的执行放入事件队列中。</p>\n<p>当值为零作为setTimeout（）的第二个参数传递时，它将尝试“尽快”执行指定的函数。具体来说，函数的执行放置在事件队列中，以在下一个计时器滴答时发生。但请注意，这不是直接的;该功能不会执行，直到下一个滴答声。这就是为什么在上面的例子中，调用console.log（4）发生在调用console.log（3）之前（因为调用console.log（3）是通过setTimeout调用的，所以稍微延迟了一点）。</p>\n<h2 id=\"编写一个简单的函数（少于160个字符），返回一个布尔值，指示字符串是否是palindrome\"><a href=\"#编写一个简单的函数（少于160个字符），返回一个布尔值，指示字符串是否是palindrome\" class=\"headerlink\" title=\"编写一个简单的函数（少于160个字符），返回一个布尔值，指示字符串是否是palindrome\"></a>编写一个简单的函数（少于160个字符），返回一个布尔值，指示字符串是否是palindrome</h2><p>如果str是回文，以下一行函数将返回true;否则，它返回false。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPalindrome</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  str = str.replace(<span class=\"regexp\">/\\W/g</span>, <span class=\"string\">''</span>).toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (str == str.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(isPalindrome(<span class=\"string\">\"level\"</span>));                   <span class=\"comment\">// logs 'true'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isPalindrome(<span class=\"string\">\"levels\"</span>));                  <span class=\"comment\">// logs 'false'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isPalindrome(<span class=\"string\">\"A car, a man, a maraca\"</span>));  <span class=\"comment\">// logs 'true'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"写一个sum方法，当使用下面的语法调用时它将正常工作\"><a href=\"#写一个sum方法，当使用下面的语法调用时它将正常工作\" class=\"headerlink\" title=\"写一个sum方法，当使用下面的语法调用时它将正常工作\"></a>写一个sum方法，当使用下面的语法调用时它将正常工作</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">2</span>,<span class=\"number\">3</span>));   <span class=\"comment\">// Outputs 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">2</span>)(<span class=\"number\">3</span>));  <span class=\"comment\">// Outputs 5</span></span><br></pre></td></tr></table></figure>\n<p>有（至少）两种方法可以做到这一点：</p>\n<p>METHOD 1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] + <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在JavaScript中，函数提供对参数对象的访问，该对象提供对传递给函数的实际参数的访问。这使我们能够使用length属性在运行时确定传递给函数的参数的数量</p>\n<p>如果传递两个参数，我们只需将它们相加并返回。</p>\n<p>否则，我们假设它是以sum（2）（3）的形式被调用的，所以我们返回一个匿名函数，它将传递给sum（）（在本例中为2）的参数和传递给匿名函数的参数这种情况3）。</p>\n<p>METHOD 2</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (y !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当函数被调用时，JavaScript不需要参数的数量来匹配函数定义中参数的数量。如果传递的参数数量超过了函数定义中参数的数量，则超出的参数将被忽略。另一方面，如果传递的参数数量少于函数定义中的参数数量，则在函数内引用时，缺少的参数将具有未定义的值。因此，在上面的例子中，通过简单地检查第二个参数是否未定义，我们可以确定函数被调用的方式并相应地继续。</p>\n<h2 id=\"考虑下面的代码片段\"><a href=\"#考虑下面的代码片段\" class=\"headerlink\" title=\"考虑下面的代码片段\"></a>考虑下面的代码片段</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">  btn.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'Button '</span> + i));</span><br><span class=\"line\">  btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(btn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(a) 当用户点击“按钮4”时，什么被记录到控制台？为什么？</p>\n<p>(b) 提供一个或多个可按预期工作的替代实现。</p>\n<p>答：</p>\n<p>(a) 无论用户点击哪个按钮，数字5将始终记录到控制台。这是因为，在调用onclick方法（对于任何按钮）时，for循环已经完成，并且变量i已经具有值5.（如果受访者知道足够的话就可以获得奖励点数关于执行上下文，变量对象，激活对象和内部“范围”属性如何影响闭包行为。）</p>\n<p>(b) 使这项工作的关键是通过将它传递给新创建的函数对象来捕获每次通过for循环的i的值。以下是四种可能的方法来实现这一点：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">  btn.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'Button '</span> + i));</span><br><span class=\"line\">  btn.addEventListener(<span class=\"string\">'click'</span>, (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;;</span><br><span class=\"line\">  &#125;)(i));</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(btn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者，您可以将新的匿名函数中的整个调用包装为btn.addEventListener：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">  btn.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'Button '</span> + i));</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;);</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(btn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者，我们可以通过调用数组对象的原生forEach方法来替换for循环：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">  btn.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'Button '</span> + i));</span><br><span class=\"line\">  btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(btn);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>最后，最简单的解决方案，如果你在ES6 / ES2015上下文中，就是使用let i而不是var i：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">  btn.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'Button '</span> + i));</span><br><span class=\"line\">  btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(btn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"假设d是范围内的“空”对象\"><a href=\"#假设d是范围内的“空”对象\" class=\"headerlink\" title=\"假设d是范围内的“空”对象\"></a>假设d是范围内的“空”对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> d = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用下面的代码完成了什么？使用下面的代码完成了什么？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ <span class=\"string\">'zebra'</span>, <span class=\"string\">'horse'</span> ].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k</span>) </span>&#123;</span><br><span class=\"line\">    d[k] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面显示的代码片段在对象d上设置了两个属性。理想情况下，对具有未设置键的JavaScript对象执行的查找评估为未定义。但是运行这段代码会将这些属性标记为对象的“自己的属性”。</p>\n<p>这是确保对象具有一组给定属性的有用策略。将该对象传递给Object.keys将返回一个包含这些设置键的数组（即使它们的值未定义）。</p>\n<h2 id=\"下面的代码将输出到控制台，为什么\"><a href=\"#下面的代码将输出到控制台，为什么\" class=\"headerlink\" title=\"下面的代码将输出到控制台，为什么\"></a>下面的代码将输出到控制台，为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"string\">\"john\"</span>.split(<span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1.reverse();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = <span class=\"string\">\"jones\"</span>.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">arr2.push(arr3);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"array 1: length=\"</span> + arr1.length + <span class=\"string\">\" last=\"</span> + arr1.slice(<span class=\"number\">-1</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"array 2: length=\"</span> + arr2.length + <span class=\"string\">\" last=\"</span> + arr2.slice(<span class=\"number\">-1</span>));</span><br></pre></td></tr></table></figure>\n<p>记录的输出将是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"array 1: length=5 last=j,o,n,e,s\"</span></span><br><span class=\"line\"><span class=\"string\">\"array 2: length=5 last=j,o,n,e,s\"</span></span><br></pre></td></tr></table></figure>\n<p>arr1和arr2是相同的（即[‘n’，’h’，’o’，’j’，[‘j’，’o’，’n’，’e’，’s’]]）上述代码由于以下原因而被执行：</p>\n<p>调用数组对象的reverse（）方法不仅以相反的顺序返回数组，它还颠倒了数组本身的顺序（即在这种情况下，arr1）。</p>\n<p>reverse（）方法返回对数组本身的引用（即，在这种情况下为arr1）。因此，arr2仅仅是对arr1的引用（而不是副本）。因此，当对arr2做任何事情时（即，当我们调用arr2.push（arr3）;）时，arr1也会受到影响，因为arr1和arr2只是对同一个对象的引用。</p>\n<p>这里有几个观点可以让人们回答这个问题：</p>\n<p>将数组传递给另一个数组的push（）方法会将整个数组作为单个元素推入数组的末尾。结果，声明arr2.push（arr3）;将arr3作为一个整体添加到arr2的末尾（即，它不连接两个数组，这就是concat（）方法的用途）。</p>\n<p>像Python一样，JavaScript在调用像slice（）这样的数组方法时，会承认负面下标，以此作为在数组末尾引用元素的方式;例如，下标-1表示数组中的最后一个元素，依此类推。</p>\n<h2 id=\"下面的代码输出到控制台，为什么\"><a href=\"#下面的代码输出到控制台，为什么\" class=\"headerlink\" title=\"下面的代码输出到控制台，为什么\"></a>下面的代码输出到控制台，为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> +  <span class=\"string\">\"2\"</span> + <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> +  +<span class=\"string\">\"2\"</span> + <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> +  -<span class=\"string\">\"1\"</span> + <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+<span class=\"string\">\"1\"</span> +  <span class=\"string\">\"1\"</span> + <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"string\">\"A\"</span> - <span class=\"string\">\"B\"</span> + <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"string\">\"A\"</span> - <span class=\"string\">\"B\"</span> + <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>以上代码将输出到控制台：</p>\n<p>“122”<br>“32”<br>“02”<br>“112”<br>“NaN2”<br>NaN</p>\n<p>这是为什么…</p>\n<p>这里的基本问题是JavaScript（ECMAScript）是一种松散类型的语言，它对值执行自动类型转换以适应正在执行的操作。让我们来看看这是如何与上面的每个例子进行比较。</p>\n<p>示例1：1 +“2”+“2”输出：“122”说明：第一个操作在1 +“2”中执行。由于其中一个操作数（“2”）是一个字符串，所以JavaScript假定需要执行字符串连接，因此将1的类型转换为“1”，1 +“2”转换为“12”。然后，“12”+“2”产生“122”。</p>\n<p>示例2：1 + +“2”+“2”输出：“32”说明：根据操作顺序，要执行的第一个操作是+“2”（第一个“2”之前的额外+被视为一个一元运算符）。因此，JavaScript将“2”的类型转换为数字，然后将一元+符号应用于它（即将其视为正数）。结果，下一个操作现在是1 + 2，当然这会产生3.但是，我们有一个数字和一个字符串之间的操作（即3和“2”），所以JavaScript再次转换数值赋给一个字符串并执行字符串连接，产生“32”。</p>\n<p>示例3：1 + - “1”+“2”输出：“02”说明：这里的解释与前面的示例相同，只是一元运算符是 - 而不是+。因此，“1”变为1，然后在应用 - 时将其变为-1，然后将其加1到产生0，然后转换为字符串并与最终的“2”操作数连接，产生“02”。</p>\n<p>示例4：+“1”+“1”+“2”输出：“112”说明：尽管第一个“1”操作数是基于其前面的一元+运算符的数值类型转换的，当它与第二个“1”操作数连接在一起时返回一个字符串，然后与最终的“2”操作数连接，产生字符串“112”。</p>\n<p>示例5：“A” - “B”+“2”输出：“NaN2”说明：由于 - 运算符不能应用于字符串，并且既不能将“A”也不能将“B”转换为数值， “ - ”B“产生NaN，然后​​与字符串”2“串联产生”NaN2“。</p>\n<p>例6：“A” - “B”+2输出：NaN说明：在前面的例子中，“A” - “B”产生NaN。但是任何运算符应用于NaN和其他数字操作数仍然会产生NaN。</p>\n<h2 id=\"如果数组列表太大，以下递归代码将导致堆栈溢出。你如何解决这个问题，仍然保留递归模式\"><a href=\"#如果数组列表太大，以下递归代码将导致堆栈溢出。你如何解决这个问题，仍然保留递归模式\" class=\"headerlink\" title=\"如果数组列表太大，以下递归代码将导致堆栈溢出。你如何解决这个问题，仍然保留递归模式\"></a>如果数组列表太大，以下递归代码将导致堆栈溢出。你如何解决这个问题，仍然保留递归模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = readHugeList();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nextListItem = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = list.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// process the list item...</span></span><br><span class=\"line\">        nextListItem();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过修改nextListItem函数可以避免潜在的堆栈溢出，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = readHugeList();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nextListItem = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = list.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// process the list item...</span></span><br><span class=\"line\">        setTimeout( nextListItem, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>堆栈溢出被消除，因为事件循环处理递归，而不是调用堆栈。当nextListItem运行时，如果item不为null，则将超时函数（nextListItem）推送到事件队列，并且函数退出，从而使调用堆栈清零。当事件队列运行超时事件时，将处理下一个项目，并设置一个计时器以再次调用nextListItem。因此，该方法从头到尾不经过直接递归调用即可处理，因此调用堆栈保持清晰，无论迭代次数如何。</p>\n<h2 id=\"什么是JavaScript中的“闭包”？举一个例子\"><a href=\"#什么是JavaScript中的“闭包”？举一个例子\" class=\"headerlink\" title=\"什么是JavaScript中的“闭包”？举一个例子\"></a>什么是JavaScript中的“闭包”？举一个例子</h2><p>闭包是一个内部函数，它可以访问外部（封闭）函数的作用域链中的变量。闭包可以访问三个范围内的变量;具体来说：（1）变量在其自己的范围内，（2）封闭函数范围内的变量，以及（3）全局变量。</p>\n<p>这里是一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> globalVar = <span class=\"string\">\"xyz\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outerFunc</span>(<span class=\"params\">outerArg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> outerVar = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFunc</span>(<span class=\"params\">innerArg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> innerVar = <span class=\"string\">'b'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">        <span class=\"string\">\"outerArg = \"</span> + outerArg + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"innerArg = \"</span> + innerArg + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"outerVar = \"</span> + outerVar + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"innerVar = \"</span> + innerVar + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"globalVar = \"</span> + globalVar);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)(<span class=\"number\">456</span>);</span><br><span class=\"line\">&#125;)(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，innerFunc，outerFunc和全局名称空间的变量都在innerFunc的范围内。上面的代码将产生以下输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outerArg = <span class=\"number\">123</span></span><br><span class=\"line\">innerArg = <span class=\"number\">456</span></span><br><span class=\"line\">outerVar = a</span><br><span class=\"line\">innerVar = b</span><br><span class=\"line\">globalVar = xyz</span><br></pre></td></tr></table></figure>\n<h2 id=\"以下代码的输出是什么\"><a href=\"#以下代码的输出是什么\" class=\"headerlink\" title=\"以下代码的输出是什么\"></a>以下代码的输出是什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;, i * <span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解释你的答案。如何在这里使用闭包？</p>\n<p>显示的代码示例不会显示值0,1,2,3和4，这可能是预期的;而是显示5,5,5,5。</p>\n<p>这是因为循环内执行的每个函数将在整个循环完成后执行，因此所有函数都会引用存储在i中的最后一个值，即5。</p>\n<p>通过为每次迭代创建一个唯一的作用域 ，可以使用闭包来防止这个问题，并将该变量的每个唯一值存储在其作用域中，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(x); &#125;, x * <span class=\"number\">1000</span> );</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这会产生将0,1,2,3和4记录到控制台的可能结果。</p>\n<p>在ES2015上下文中，您可以在原始代码中简单地使用let而不是var：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;, i * <span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"以下几行代码输出到控制台\"><a href=\"#以下几行代码输出到控制台\" class=\"headerlink\" title=\"以下几行代码输出到控制台\"></a>以下几行代码输出到控制台</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"0 || 1 = \"</span>+(<span class=\"number\">0</span> || <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 || 2 = \"</span>+(<span class=\"number\">1</span> || <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"0 &amp;&amp; 1 = \"</span>+(<span class=\"number\">0</span> &amp;&amp; <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 &amp;&amp; 2 = \"</span>+(<span class=\"number\">1</span> &amp;&amp; <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<p>解释你的答案。</p>\n<p>该代码将输出以下四行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> || <span class=\"number\">1</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> || <span class=\"number\">2</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span> &amp;&amp; <span class=\"number\">1</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span> &amp;&amp; <span class=\"number\">2</span> = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>在JavaScript中，都是||和&amp;&amp;是逻辑运算符，当从左向右计算时返回第一个完全确定的“逻辑值”。</p>\n<p>或（||）运算符。在形式为X || Y的表达式中，首先计算X并将其解释为布尔值。如果此布尔值为真，则返回true（1），并且不计算Y，因为“或”条件已经满足。但是，如果此布尔值为“假”，我们仍然不知道X || Y是真还是假，直到我们评估Y，并将其解释为布尔值。</p>\n<p>因此，0 || 1评估为真（1），正如1 || 2。</p>\n<p>和（&amp;&amp;）运算符。在X &amp;&amp; Y形式的表达式中，首先评估X并将其解释为布尔值。如果此布尔值为false，则返回false（0）并且不评估Y，因为“and”条件已失败。但是，如果这个布尔值为“真”，我们仍然不知道X &amp;&amp; Y是真还是假，直到我们评估Y，并将其解释为布尔值。</p>\n<p>然而，&amp;&amp;运算符的有趣之处在于，当表达式评估为“真”时，则返回表达式本身。这很好，因为它在逻辑表达式中被视为“真”，但也可以用于在您关心时返回该值。这解释了为什么，有点令人惊讶的是，1 &amp;&amp; 2返回2（而你可能会期望它返回true或1）。</p>\n<h2 id=\"下面的代码执行时输出是什么？说明\"><a href=\"#下面的代码执行时输出是什么？说明\" class=\"headerlink\" title=\"下面的代码执行时输出是什么？说明\"></a>下面的代码执行时输出是什么？说明</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span> == <span class=\"string\">'0'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span> === <span class=\"string\">'0'</span>)</span><br></pre></td></tr></table></figure>\n<p>该代码将输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>在JavaScript中，有两套相等运算符。三重相等运算符===的行为与任何传统的相等运算符相同：如果两侧的两个表达式具有相同的类型和相同的值，则计算结果为true。然而，双等号运算符在比较它们之前试图强制这些值。因此，通常使用===而不是==。对于！== vs！=也是如此。</p>\n<h2 id=\"以下代码的输出是什么？解释你的答案\"><a href=\"#以下代码的输出是什么？解释你的答案\" class=\"headerlink\" title=\"以下代码的输出是什么？解释你的答案\"></a>以下代码的输出是什么？解释你的答案</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a=&#123;&#125;,</span><br><span class=\"line\">    b=&#123;<span class=\"attr\">key</span>:<span class=\"string\">'b'</span>&#125;,</span><br><span class=\"line\">    c=&#123;<span class=\"attr\">key</span>:<span class=\"string\">'c'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a[b]=<span class=\"number\">123</span>;</span><br><span class=\"line\">a[c]=<span class=\"number\">456</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[b]);</span><br></pre></td></tr></table></figure>\n<p>此代码的输出将是456（不是123）。</p>\n<p>原因如下：设置对象属性时，JavaScript会隐式地将参数值串联起来。在这种情况下，由于b和c都是对象，它们都将被转换为“[object Object]”。因此，a [b]和a [c]都等价于[“[object Object]”]，并且可以互换使用。因此，设置或引用[c]与设置或引用[b]完全相同。</p>\n<h2 id=\"以下代码将输出到控制台中\"><a href=\"#以下代码将输出到控制台中\" class=\"headerlink\" title=\"以下代码将输出到控制台中\"></a>以下代码将输出到控制台中</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">n</span>)</span>&#123;<span class=\"keyword\">return</span> ((n &gt; <span class=\"number\">1</span>) ? n * f(n<span class=\"number\">-1</span>) : n)&#125;)(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n<p>该代码将输出10阶乘的值（即10！或3,628,800）。</p>\n<p>原因如下：</p>\n<p>命名函数f（）以递归方式调用自身，直到它调用f（1），它简单地返回1.因此，这就是它的作用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(<span class=\"number\">1</span>): returns n, which is <span class=\"number\">1</span></span><br><span class=\"line\">f(<span class=\"number\">2</span>): returns <span class=\"number\">2</span> * f(<span class=\"number\">1</span>), which is <span class=\"number\">2</span></span><br><span class=\"line\">f(<span class=\"number\">3</span>): returns <span class=\"number\">3</span> * f(<span class=\"number\">2</span>), which is <span class=\"number\">6</span></span><br><span class=\"line\">f(<span class=\"number\">4</span>): returns <span class=\"number\">4</span> * f(<span class=\"number\">3</span>), which is <span class=\"number\">24</span></span><br><span class=\"line\">f(<span class=\"number\">5</span>): returns <span class=\"number\">5</span> * f(<span class=\"number\">4</span>), which is <span class=\"number\">120</span></span><br><span class=\"line\">f(<span class=\"number\">6</span>): returns <span class=\"number\">6</span> * f(<span class=\"number\">5</span>), which is <span class=\"number\">720</span></span><br><span class=\"line\">f(<span class=\"number\">7</span>): returns <span class=\"number\">7</span> * f(<span class=\"number\">6</span>), which is <span class=\"number\">5040</span></span><br><span class=\"line\">f(<span class=\"number\">8</span>): returns <span class=\"number\">8</span> * f(<span class=\"number\">7</span>), which is <span class=\"number\">40320</span></span><br><span class=\"line\">f(<span class=\"number\">9</span>): returns <span class=\"number\">9</span> * f(<span class=\"number\">8</span>), which is <span class=\"number\">362880</span></span><br><span class=\"line\">f(<span class=\"number\">10</span>): returns <span class=\"number\">10</span> * f(<span class=\"number\">9</span>), which is <span class=\"number\">3628800</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"考虑下面的代码片段。控制台的输出是什么，为什么\"><a href=\"#考虑下面的代码片段。控制台的输出是什么，为什么\" class=\"headerlink\" title=\"考虑下面的代码片段。控制台的输出是什么，为什么\"></a>考虑下面的代码片段。控制台的输出是什么，为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    &#125;)(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>输出将为1，即使x的值从未在内部函数中设置。原因如下：</p>\n<p>正如我们的JavaScript招聘指南中所解释的，闭包是一个函数，以及创建闭包时在范围内的所有变量或函数。在JavaScript中，闭包被实现为“内部函数”;即在另一功能的主体内定义的功能。闭包的一个重要特征是内部函数仍然可以访问外部函数的变量。</p>\n<p>因此，在这个例子中，因为x没有在内部函数中定义，所以在外部函数的作用域中搜索一个定义的变量x，该变量的值为1。</p>\n<h2 id=\"以下代码将输出到控制台以及为什么\"><a href=\"#以下代码将输出到控制台以及为什么\" class=\"headerlink\" title=\"以下代码将输出到控制台以及为什么\"></a>以下代码将输出到控制台以及为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">    _name: <span class=\"string\">'John Doe'</span>,</span><br><span class=\"line\">    getSecretIdentity: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> stoleSecretIdentity = hero.getSecretIdentity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stoleSecretIdentity());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hero.getSecretIdentity());</span><br></pre></td></tr></table></figure>\n<p>这段代码有什么问题，以及如何解决这个问题。</p>\n<p>该代码将输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">John Doe</span><br></pre></td></tr></table></figure>\n<p>第一个console.log打印未定义，因为我们从hero对象中提取方法，所以stoleSecretIdentity（）在_name属性不存在的全局上下文（即窗口对象）中被调用。</p>\n<p>修复stoleSecretIdentity（）函数的一种方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stoleSecretIdentity = hero.getSecretIdentity.bind(hero);</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建一个函数，给定页面上的DOM元素，将访问元素本身及其所有后代（不仅仅是它的直接子元素）。对于每个访问的元素，函数应该将该元素传递给提供的回调函数\"><a href=\"#创建一个函数，给定页面上的DOM元素，将访问元素本身及其所有后代（不仅仅是它的直接子元素）。对于每个访问的元素，函数应该将该元素传递给提供的回调函数\" class=\"headerlink\" title=\"创建一个函数，给定页面上的DOM元素，将访问元素本身及其所有后代（不仅仅是它的直接子元素）。对于每个访问的元素，函数应该将该元素传递给提供的回调函数\"></a>创建一个函数，给定页面上的DOM元素，将访问元素本身及其所有后代（不仅仅是它的直接子元素）。对于每个访问的元素，函数应该将该元素传递给提供的回调函数</h2><p>该函数的参数应该是：</p>\n<ul>\n<li>一个 DOM 元素</li>\n<li>一个回调函数（以DOM元素作为参数）</li>\n</ul>\n<p>访问树中的所有元素（DOM）是[经典的深度优先搜索算法]Depth-First-Search algorithm应用程序。以下是一个示例解决方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Traverse</span>(<span class=\"params\">p_element,p_callback</span>) </span>&#123;</span><br><span class=\"line\">   p_callback(p_element);</span><br><span class=\"line\">   <span class=\"keyword\">var</span> list = p_element.children;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">       Traverse(list[i],p_callback);  <span class=\"comment\">// recursive call</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在JavaScript中测试您的这些知识：以下代码的输出是什么\"><a href=\"#在JavaScript中测试您的这些知识：以下代码的输出是什么\" class=\"headerlink\" title=\"在JavaScript中测试您的这些知识：以下代码的输出是什么\"></a>在JavaScript中测试您的这些知识：以下代码的输出是什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> length = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  length: <span class=\"number\">5</span>,</span><br><span class=\"line\">  method: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    fn();</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.method(fn, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>为什么不是10和5？</p>\n<p>首先，由于fn作为函数方法的参数传递，函数fn的作用域（this）是窗口。 var length = 10;在窗口级别声明。它也可以作为window.length或length或this.length来访问（当这个===窗口时）。</p>\n<p>方法绑定到Object obj，obj.method用参数fn和1调用。虽然方法只接受一个参数，但调用它时已经传递了两个参数;第一个是函数回调，其他只是一个数字。</p>\n<p>当在内部方法中调用fn（）时，该函数在全局级别作为参数传递，this.length将有权访问在Object obj中定义的var length = 10（全局声明）而不是length = 5。</p>\n<p>现在，我们知道我们可以使用arguments []数组访问JavaScript函数中的任意数量的参数。</p>\n<p>因此arguments0只不过是调用fn（）。在fn里面，这个函数的作用域成为参数数组，并且记录参数[]的长度将返回2。</p>\n<p>因此输出将如上所述。</p>\n<h2 id=\"考虑下面的代码。输出是什么，为什么\"><a href=\"#考虑下面的代码。输出是什么，为什么\" class=\"headerlink\" title=\"考虑下面的代码。输出是什么，为什么\"></a>考虑下面的代码。输出是什么，为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>, y = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(y);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>var语句被挂起（没有它们的值初始化）到它所属的全局或函数作用域的顶部，即使它位于with或catch块内。但是，错误的标识符只在catch块内部可见。它相当于：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x, y; <span class=\"comment\">// outer and hoisted</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (x <span class=\"comment\">/* inner */</span>) &#123;</span><br><span class=\"line\">        x = <span class=\"number\">1</span>; <span class=\"comment\">// inner x, not the outer one</span></span><br><span class=\"line\">        y = <span class=\"number\">2</span>; <span class=\"comment\">// there is only one y, which is in the outer scope</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x <span class=\"comment\">/* inner */</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(y);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h2 id=\"这段代码的输出是什么\"><a href=\"#这段代码的输出是什么\" class=\"headerlink\" title=\"这段代码的输出是什么\"></a>这段代码的输出是什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">21</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> girl = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">girl ();</span><br></pre></td></tr></table></figure>\n<p>21，也不是20，结果是‘undefined’的</p>\n<p>这是因为JavaScript初始化没有被挂起。</p>\n<p>（为什么它不显示21的全局值？原因是当函数执行时，它检查是否存在本地x变量但尚未声明它，因此它不会查找全局变量。 ）</p>\n<h2 id=\"你如何克隆一个对象\"><a href=\"#你如何克隆一个对象\" class=\"headerlink\" title=\"你如何克隆一个对象\"></a>你如何克隆一个对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span> ,<span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> objclone = <span class=\"built_in\">Object</span>.assign(&#123;&#125;,obj);</span><br></pre></td></tr></table></figure>\n<p>现在objclone的值是{a：1，b：2}，但指向与obj不同的对象。</p>\n<p>但请注意潜在的缺陷：Object.clone（）只会执行浅拷贝，而不是深拷贝。这意味着嵌套的对象不会被复制。他们仍然引用与原始相同的嵌套对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: <span class=\"number\">2</span>,</span><br><span class=\"line\">    c: &#123;</span><br><span class=\"line\">        age: <span class=\"number\">30</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objclone = <span class=\"built_in\">Object</span>.assign(&#123;&#125;,obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'objclone: '</span>, objclone);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.c.age = <span class=\"number\">45</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'After Change - obj: '</span>, obj);           <span class=\"comment\">// 45 - This also changes</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'After Change - objclone: '</span>, objclone); <span class=\"comment\">// 45</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;, i * <span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"此代码将打印什么\"><a href=\"#此代码将打印什么\" class=\"headerlink\" title=\"此代码将打印什么\"></a>此代码将打印什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;, i * <span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>它会打印0 1 2 3 4，因为我们在这里使用let而不是var。变量i只能在for循环的块范围中看到。</p>\n<h2 id=\"以下几行输出什么，为什么\"><a href=\"#以下几行输出什么，为什么\" class=\"headerlink\" title=\"以下几行输出什么，为什么\"></a>以下几行输出什么，为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> &lt; <span class=\"number\">2</span> &lt; <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> &gt; <span class=\"number\">2</span> &gt; <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>第一条语句返回true，如预期的那样。</p>\n<p>第二个返回false是因为引擎如何针对&lt;和&gt;的操作符关联性工作。它比较从左到右，所以3&gt; 2&gt; 1 JavaScript翻译为true&gt; 1. true具有值1，因此它比较1&gt; 1，这是错误的。</p>\n<h2 id=\"如何在数组的开头添加元素？最后如何添加一个\"><a href=\"#如何在数组的开头添加元素？最后如何添加一个\" class=\"headerlink\" title=\"如何在数组的开头添加元素？最后如何添加一个\"></a>如何在数组的开头添加元素？最后如何添加一个</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myArray = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];</span><br><span class=\"line\">myArray.push(<span class=\"string\">'end'</span>);</span><br><span class=\"line\">myArray.unshift(<span class=\"string\">'start'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myArray); <span class=\"comment\">// [\"start\", \"a\", \"b\", \"c\", \"d\", \"end\"]</span></span><br></pre></td></tr></table></figure>\n<p>使用ES6，可以使用扩展运算符：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myArray = [<span class=\"string\">'start'</span>, ...myArray];</span><br><span class=\"line\">myArray = [...myArray, <span class=\"string\">'end'</span>];</span><br></pre></td></tr></table></figure>\n<p>或者，简而言之：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myArray = [<span class=\"string\">'start'</span>, ...myArray, <span class=\"string\">'end'</span>];</span><br></pre></td></tr></table></figure>\n<h2 id=\"想象一下你有这样的代码吗\"><a href=\"#想象一下你有这样的代码吗\" class=\"headerlink\" title=\"想象一下你有这样的代码吗\"></a>想象一下你有这样的代码吗</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<p>a）这会导致崩溃吗？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[<span class=\"number\">10</span>] = <span class=\"number\">99</span>;</span><br></pre></td></tr></table></figure>\n<p>b）这个输出是什么？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a[<span class=\"number\">6</span>]);</span><br></pre></td></tr></table></figure>\n<p>a）它不会崩溃。 JavaScript引擎将使阵列插槽3至9成为“空插槽”。</p>\n<p>b）在这里，a [6]将输出未定义的值，但时隙仍为空，而不是未定义的。在某些情况下，这可能是一个重要的细微差别。例如，使用map（）时，map（）的输出中的空插槽将保持为空，但未定义的插槽将使用传递给它的函数重映射：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"literal\">undefined</span>];</span><br><span class=\"line\">b[<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);             <span class=\"comment\">// (3) [undefined, empty × 1, 1]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.map(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"number\">7</span>)); <span class=\"comment\">// (3) [7,         empty × 1, 7]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"typeof-undefined-typeof-NULL的值是什么\"><a href=\"#typeof-undefined-typeof-NULL的值是什么\" class=\"headerlink\" title=\"typeof undefined == typeof NULL的值是什么\"></a>typeof undefined == typeof NULL的值是什么</h2><p>该表达式将被评估为true，因为NULL将被视为任何其他未定义的变量。</p>\n<p>注意：JavaScript区分大小写，我们在这里使用NULL而不是null。</p>\n<h2 id=\"代码返回后会怎么样\"><a href=\"#代码返回后会怎么样\" class=\"headerlink\" title=\"代码返回后会怎么样\"></a>代码返回后会怎么样</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"keyword\">typeof</span> <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">string</span><br></pre></td></tr></table></figure>\n<p>typeof 1将返回“number”，typeof“number”将返回字符串。</p>\n<h2 id=\"以下代码输出什么？为什么\"><a href=\"#以下代码输出什么？为什么\" class=\"headerlink\" title=\"以下代码输出什么？为什么\"></a>以下代码输出什么？为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        b++;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    inner();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">outer();</span><br></pre></td></tr></table></figure>\n<p>输出到控制台将是“3”。</p>\n<p>在这个例子中有三个闭包，每个都有它自己的var b声明。当调用变量时，将按照从本地到全局的顺序检查闭包，直到找到实例。由于内部闭包有自己的b变量，这就是输出。</p>\n<p>此外，由于提升内部的代码将被解释如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b; <span class=\"comment\">// b is undefined</span></span><br><span class=\"line\">    b++; <span class=\"comment\">// b is NaN</span></span><br><span class=\"line\">    b = <span class=\"number\">3</span>; <span class=\"comment\">// b is 3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// output \"3\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>面试比棘手的技术问题要多，所以这些仅仅是作为指导。并不是每个值得聘用的“A”候选人都能够回答所有问题，也不会回答他们都保证有“A”候选人。在这一天结束时，招聘仍然是一门艺术，一门科学 - 还有很多工作。.</p>\n<p>原文链接:<a href=\"https://www.toptal.com/javascript/interview-questions\" target=\"_blank\" rel=\"noopener\">https://www.toptal.com/javascript/interview-questions</a><br>转载链接:<a href=\"https://www.zcfy.cc/article/37-essential-javascript-interview-questions-and-answers\" target=\"_blank\" rel=\"noopener\">https://www.zcfy.cc/article/37-essential-javascript-interview-questions-and-answers</a></p>\n","more":"</p>\n<h2 id=\"使用typeof-bar-“object”来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免\"><a href=\"#使用typeof-bar-“object”来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免\" class=\"headerlink\" title=\"使用typeof bar ===“object”来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免\"></a>使用typeof bar ===“object”来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免</h2><p>虽然typeof bar === “object” 是检查是否一种可靠的方法bar是一个对象，在JavaScript中令人惊讶的小问题，就是null在还考虑的对象！</p>\n<p>因此，对于大多数开发人员来说，下面的代码会将真实（而不是错误）记录到控制台：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> bar === <span class=\"string\">\"object\"</span>);  <span class=\"comment\">// logs true!</span></span><br></pre></td></tr></table></figure>\n<p>只要是意识到了这一点，这个问题可以很容易地通过检查也避免了如果bar是null：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((bar !== <span class=\"literal\">null</span>) &amp;&amp; (<span class=\"keyword\">typeof</span> bar === <span class=\"string\">\"object\"</span>));  <span class=\"comment\">// logs false</span></span><br></pre></td></tr></table></figure>\n<p>为了让答案更加完整，还有两件事值得注意：</p>\n<p>首先，如果bar是一个函数，上面的解决方案将返回false。在大多数情况下，这是所期望的行为，但是在您希望函数返回true的情况下，您可以将上述解决方案修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((bar !== <span class=\"literal\">null</span>) &amp;&amp; ((<span class=\"keyword\">typeof</span> bar === <span class=\"string\">\"object\"</span>) || (<span class=\"keyword\">typeof</span> bar === <span class=\"string\">\"function\"</span>)));</span><br></pre></td></tr></table></figure>\n<p>其次，如果bar是数组，则上述解决方案将返回true（例如，如果var bar = [];）。在大多数情况下，这是所需的行为，因为数组确实是对象，但是在需要false数组的情况下，可以将上述解决方案修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((bar !== <span class=\"literal\">null</span>) &amp;&amp; (<span class=\"keyword\">typeof</span> bar === <span class=\"string\">\"object\"</span>) &amp;&amp; (toString.call(bar) !== <span class=\"string\">\"[object Array]\"</span>));</span><br></pre></td></tr></table></figure>\n<p>但是，还有一个替代方法对空值，数组和函数返回false，但对对象返回true：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((bar !== <span class=\"literal\">null</span>) &amp;&amp; (bar.constructor === <span class=\"built_in\">Object</span>));</span><br></pre></td></tr></table></figure>\n<p>或者，如果您使用jQuery：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((bar !== <span class=\"literal\">null</span>) &amp;&amp; (<span class=\"keyword\">typeof</span> bar === <span class=\"string\">\"object\"</span>) &amp;&amp; (! $.isArray(bar)));</span><br></pre></td></tr></table></figure>\n<p>ES5使得数组的情况非常简单，包括它自己的空检查：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(bar));</span><br></pre></td></tr></table></figure>\n<h2 id=\"下面的代码将输出到控制台的是什么，为什么\"><a href=\"#下面的代码将输出到控制台的是什么，为什么\" class=\"headerlink\" title=\"下面的代码将输出到控制台的是什么，为什么\"></a>下面的代码将输出到控制台的是什么，为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = b = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"a defined? \"</span> + (<span class=\"keyword\">typeof</span> a !== <span class=\"string\">'undefined'</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b defined? \"</span> + (<span class=\"keyword\">typeof</span> b !== <span class=\"string\">'undefined'</span>));</span><br></pre></td></tr></table></figure>\n<p>由于a和b都在函数的封闭范围内定义，并且由于它们所在的行以var关键字开头，因此大多数JavaScript开发人员会希望<code>typeof a</code>和<code>typeof b</code>在上面的示例中都未定义。</p>\n<p>但是，情况并非如此。这里的问题是大多数开发人员不正确地理解该语句<code>var a = b = 3;</code>简写为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = b;</span><br></pre></td></tr></table></figure>\n<p>但实际上，<code>var a = b = 3;</code>其实是速记：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = b;</span><br></pre></td></tr></table></figure>\n<p>因此（如果您不使用严格模式），代码片段的输出将为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a defined? <span class=\"literal\">false</span></span><br><span class=\"line\">b defined? <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>但是如何在闭包范围外定义b呢？因为声明<code>var a = b = 3;</code>是语句<code>b = 3</code>的简写，同时<code>var a = b;</code>,故b最终成为了一个全局变量（因为它不在var关键字后面）。所以它还在作用域内，即使在封闭函数之外。</p>\n<p>请注意，在严格模式下（即with use strict），该语句<code>var a = b = 3;</code>在运行时会报错<code>ReferenceError: b is not defined</code>，从而避免可能导致的任何headfakes/bugs。（作为的另一个主要例子，这就是你为什么在代码中应该理所当然的使用use strict！）</p>\n<h2 id=\"下面的代码在控制台将输出什么，为什么\"><a href=\"#下面的代码在控制台将输出什么，为什么\" class=\"headerlink\" title=\"下面的代码在控制台将输出什么，为什么\"></a>下面的代码在控制台将输出什么，为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">    foo: <span class=\"string\">\"bar\"</span>,</span><br><span class=\"line\">    func: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"outer func:  this.foo = \"</span> + <span class=\"keyword\">this</span>.foo);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"outer func:  self.foo = \"</span> + self.foo);</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"inner func:  this.foo = \"</span> + <span class=\"keyword\">this</span>.foo);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"inner func:  self.foo = \"</span> + self.foo);</span><br><span class=\"line\">        &#125;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myObject.func();</span><br></pre></td></tr></table></figure>\n<p>以上代码将输出到控制台：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outer func:  <span class=\"keyword\">this</span>.foo = bar</span><br><span class=\"line\">outer func:  self.foo = bar</span><br><span class=\"line\">inner func:  <span class=\"keyword\">this</span>.foo = <span class=\"literal\">undefined</span></span><br><span class=\"line\">inner func:  self.foo = bar</span><br></pre></td></tr></table></figure>\n<p>在外部函数，这两个this和self参考myObject，因此两者都可以正确地引用和访问foo。</p>\n<p>然而，在内部函数中，this不能再访问myObject。因此，this.foo在内部函数中未定义，而对局部变量的引用self保持在范围内并且可以在那里访问。</p>\n<h2 id=\"在功能块中封装JavaScript源文件的全部内容的重要性和原因是什么\"><a href=\"#在功能块中封装JavaScript源文件的全部内容的重要性和原因是什么\" class=\"headerlink\" title=\"在功能块中封装JavaScript源文件的全部内容的重要性和原因是什么\"></a>在功能块中封装JavaScript源文件的全部内容的重要性和原因是什么</h2><p>这是一种日益普遍的做法，被许多流行的JavaScript库（jQuery，Node.js等）所采用。这种技术在文件的全部内容周围创建一个闭包，这可能最重要的是创建一个私有名称空间，从而有助于避免不同JavaScript模块和库之间的潜在名称冲突。</p>\n<p>这种技术的另一个特点是为全局变量提供一个容易引用（可能更短）的别名。例如，这通常用于jQuery插件。jQuery允许您使用禁用$对jQuery名称空间的引用jQuery.noConflict()。如果这样做了，你的代码仍然可以$使用这种闭包技术，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>) </span>&#123; <span class=\"comment\">/* jQuery plugin code referencing $ */</span> &#125; )(jQuery);</span><br></pre></td></tr></table></figure>\n<h2 id=\"在JavaScript源文件的开始部分包含’use-strict’有什么意义以及好处\"><a href=\"#在JavaScript源文件的开始部分包含’use-strict’有什么意义以及好处\" class=\"headerlink\" title=\"在JavaScript源文件的开始部分包含’use strict’有什么意义以及好处\"></a>在JavaScript源文件的开始部分包含’use strict’有什么意义以及好处</h2><p>最简单也是最重要的答案是，<code>use strict</code>是一种在运行时自动执行更严格的JavaScript代码解析和错误处理的方法。如果代码错误被忽略或失败，将会产生错误或抛出异常。总的来说，这是一个很好的做法。</p>\n<p>严格模式的一些主要优点包括：</p>\n<ul>\n<li>使调试更容易。如果代码错误本来会被忽略或失败，那么现在将会产生错误或抛出异常，从而更快地发现代码中的问题，并更快地指引它们的源代码。</li>\n<li>防止意外全局。如果没有严格模式，将值赋给未声明的变量会自动创建一个具有该名称的全局变量。这是JavaScript中最常见的错误之一。在严格模式下，尝试这样做会抛出错误。</li>\n<li>消除<code>this</code>的威胁。在没有严格模式的情况下，this对空值或未定义值的引用会自动强制到全局。这可能会导致许多<code>headfakes</code>和<code>pull-out-your-hair</code>类型的错误。在严格模式下，引用thisnull或undefined的值会抛出错误。</li>\n<li>不允许重复的参数值。 严格模式在检测到函数的重复命名参数（例如，function foo(val1, val2, val1){}）时会引发错误，从而捕获代码中几乎可以肯定存在的错误，否则可能会浪费大量时间追踪。<ul>\n<li>注意：它曾经是（在ECMAScript 5中）严格模式将不允许重复的属性名称（例如var object = {foo: “bar”, foo: “baz”};），但从ECMAScript 2015开始不再是这种情况。</li>\n</ul>\n</li>\n<li>使eval（）更安全。eval()在严格模式和非严格模式下，表现 方式存在一些差异。最重要的是，在严格模式下，声明eval()内部声明的变量和函数不会在包含范围中创建（它们是以非严格模式在包含范围中创建的，这也可能是问题的常见来源）。</li>\n<li>抛出错误或无效使用的delete。 delete操作符（用于从对象中删除属性）不能在对象的非配置属性上来使用。当试图删除一个不可配置的属性时，非严格代码将自动失败，而在这种情况下，严格模式会引发错误。</li>\n</ul>\n<h2 id=\"思考下面的两个函数。他们都会返回相同的值吗？为什么\"><a href=\"#思考下面的两个函数。他们都会返回相同的值吗？为什么\" class=\"headerlink\" title=\"思考下面的两个函数。他们都会返回相同的值吗？为什么\"></a>思考下面的两个函数。他们都会返回相同的值吗？为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo1</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      bar: <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo2</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      bar: <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>令人惊讶的是，这两个函数不会返回相同的结果。而是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"foo1 returns:\"</span>);<span class=\"comment\">//foo1 returns:</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo1());<span class=\"comment\">//Object &#123;bar: \"hello\"&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"foo2 returns:\"</span>);<span class=\"comment\">//foo2 returns:</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo2());<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>这不仅令人惊讶，而且特别令人烦恼的是foo2()返回未定义而没有引发任何错误。</p>\n<p>原因与JavaScript中分号在技术上是可选的事实有关（尽管忽略它们通常是非常糟糕的形式）。因此，在foo2（）中遇到包含return语句的行（没有其他内容）时，会在return语句之后立即自动插入分号。</p>\n<p>由于代码的其余部分是完全有效的，即使它没有被调用或做任何事情（它只是一个未使用的代码块，它定义了一个属性栏，它等于字符串“hello”），所以不会抛出任何错误。</p>\n<p>这种行为也被认为是遵循了在JavaScript中将一行开头大括号放在行尾的约定，而不是在新行的开头。如此处所示，这不仅仅是JavaScript中的一种风格偏好。</p>\n<h2 id=\"什么是NaN？它的类型是什么？如何可靠地测试一个值是否等于NaN\"><a href=\"#什么是NaN？它的类型是什么？如何可靠地测试一个值是否等于NaN\" class=\"headerlink\" title=\"什么是NaN？它的类型是什么？如何可靠地测试一个值是否等于NaN\"></a>什么是NaN？它的类型是什么？如何可靠地测试一个值是否等于NaN</h2><p>NaN属性表示“不是数字”的值。这个特殊值是由于一个操作数是非数字的（例如“abc”/ 4）或者因为操作的结果是非数字而无法执行的。</p>\n<p>虽然这看起来很简单，但NaN有一些令人惊讶的特征，如果人们没有意识到这些特征，就会导致bug。</p>\n<p>一方面，虽然NaN的意思是“不是数字”，但它的类型是，数字：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">NaN</span> === <span class=\"string\">\"number\"</span>);  <span class=\"comment\">// logs \"true\"</span></span><br></pre></td></tr></table></figure>\n<p>此外，NaN相比任何事情 - 甚至本身！ - 是false：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>);  <span class=\"comment\">// logs \"false\"</span></span><br></pre></td></tr></table></figure>\n<p>测试数字是否等于NaN的半可靠方法是使用内置函数isNaN（），但即使使用isNaN（）也不是一个好的解决方案。.</p>\n<p>一个更好的解决方案要么是使用value！==值，如果该值等于NaN，那么只会生成true。另外，ES6提供了一个新的Number.isNaN（）函数 ，它与旧的全局isNaN（）函数不同，也更加可靠。</p>\n<h2 id=\"下面的代码输出什么？解释你的答案\"><a href=\"#下面的代码输出什么？解释你的答案\" class=\"headerlink\" title=\"下面的代码输出什么？解释你的答案\"></a>下面的代码输出什么？解释你的答案</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> == <span class=\"number\">0.3</span>);</span><br></pre></td></tr></table></figure>\n<p>对这个问题的一个有教养的回答是：“你不能确定。它可能打印出0.3和true，或者可能不打印。 JavaScript中的数字全部用浮点精度处理，因此可能不会总是产生预期的结果。“</p>\n<p>上面提供的示例是演示此问题的经典案例。令人惊讶的是，它会打印出来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.30000000000000004</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>一个典型的解决方案是比较两个数字与特殊常数Number.EPSILON之间的绝对差值：</p>\n<p>讨论写函数的可能方法isInteger（x），它确定x是否是一个整数。</p>\n<p>这听起来很平凡，事实上，ECMAscript 6为此正好引入了一个新的Number.isInteger（）函数，这是微不足道的。但是，在ECMAScript 6之前，这有点复杂，因为没有提供与Number.isInteger（）方法等价的方法。</p>\n<p>问题在于，在ECMAScript规范中，整数只在概念上存在;即数值始终作为浮点值存储。</p>\n<p>考虑到这一点，最简单，最清洁的ECMAScript-6之前的解决方案（即使将非数字值（例如字符串或空值）传递给该函数，该解决方案也具有足够的可靠性以返回false）将成为以下用法按位异或运算符：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInteger</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> (x ^ <span class=\"number\">0</span>) === x; &#125;</span><br></pre></td></tr></table></figure>\n<p>下面的解决方案也可以工作，尽管不如上面那样高雅</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInteger</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.round(x) === x; &#125;</span><br></pre></td></tr></table></figure>\n<p>请注意，在上面的实现中Math.ceil（）或Math.floor（）可以同样使用（而不是Math.round（））。</p>\n<p>或者：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInteger</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'number'</span>) &amp;&amp; (x % <span class=\"number\">1</span> === <span class=\"number\">0</span>); &#125;</span><br></pre></td></tr></table></figure>\n<p>一个相当常见的不正确的解决方案如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInteger</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(x, <span class=\"number\">10</span>) === x; &#125;</span><br></pre></td></tr></table></figure>\n<p>虽然这个基于parseInt的方法对许多x值很有效，但一旦x变得相当大，它将无法正常工作。问题是parseInt（）在解析数字之前将其第一个参数强制转换为字符串。因此，一旦数字变得足够大，其字符串表示将以指数形式呈现（例如1e + 21）。因此，parseInt（）将尝试解析1e + 21，但是当它到达e字符时将停止解析，因此将返回值1.观察：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">String</span>(<span class=\"number\">1000000000000000000000</span>)</span><br><span class=\"line\"><span class=\"string\">'1e+21'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"built_in\">parseInt</span>(<span class=\"number\">1000000000000000000000</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"built_in\">parseInt</span>(<span class=\"number\">1000000000000000000000</span>, <span class=\"number\">10</span>) === <span class=\"number\">1000000000000000000000</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"执行下面的代码时，按什么顺序将数字1-4记录到控制台？为什么\"><a href=\"#执行下面的代码时，按什么顺序将数字1-4记录到控制台？为什么\" class=\"headerlink\" title=\"执行下面的代码时，按什么顺序将数字1-4记录到控制台？为什么\"></a>执行下面的代码时，按什么顺序将数字1-4记录到控制台？为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>这些值将按以下顺序记录：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>我们先来解释一下这些可能更为明显的部分：</p>\n<ul>\n<li>首先显示1和4，因为它们是通过简单调用console.log（）而没有任何延迟记录的</li>\n<li>在3之后显示，因为在延迟1000毫秒（即1秒）之后记录2，而在0毫秒的延迟之后记录3。</li>\n</ul>\n<p>好的。但是，如果在延迟0毫秒后记录3，这是否意味着它正在被立即记录？而且，如果是这样，不应该在4之前记录它，因为4是由后面的代码行记录的吗？</p>\n<p>答案与正确理解JavaScript事件和时间有关。</p>\n<p>浏览器有一个事件循环，它检查事件队列并处理未决事件。例如，如果在浏览器繁忙时（例如，处理onclick）在后台发生事件（例如脚本onload事件），则该事件被附加到队列中。当onclick处理程序完成时，将检查队列并处理该事件（例如，执行onload脚本）。</p>\n<p>同样，如果浏览器繁忙，setTimeout（）也会将其引用函数的执行放入事件队列中。</p>\n<p>当值为零作为setTimeout（）的第二个参数传递时，它将尝试“尽快”执行指定的函数。具体来说，函数的执行放置在事件队列中，以在下一个计时器滴答时发生。但请注意，这不是直接的;该功能不会执行，直到下一个滴答声。这就是为什么在上面的例子中，调用console.log（4）发生在调用console.log（3）之前（因为调用console.log（3）是通过setTimeout调用的，所以稍微延迟了一点）。</p>\n<h2 id=\"编写一个简单的函数（少于160个字符），返回一个布尔值，指示字符串是否是palindrome\"><a href=\"#编写一个简单的函数（少于160个字符），返回一个布尔值，指示字符串是否是palindrome\" class=\"headerlink\" title=\"编写一个简单的函数（少于160个字符），返回一个布尔值，指示字符串是否是palindrome\"></a>编写一个简单的函数（少于160个字符），返回一个布尔值，指示字符串是否是palindrome</h2><p>如果str是回文，以下一行函数将返回true;否则，它返回false。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPalindrome</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  str = str.replace(<span class=\"regexp\">/\\W/g</span>, <span class=\"string\">''</span>).toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (str == str.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(isPalindrome(<span class=\"string\">\"level\"</span>));                   <span class=\"comment\">// logs 'true'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isPalindrome(<span class=\"string\">\"levels\"</span>));                  <span class=\"comment\">// logs 'false'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isPalindrome(<span class=\"string\">\"A car, a man, a maraca\"</span>));  <span class=\"comment\">// logs 'true'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"写一个sum方法，当使用下面的语法调用时它将正常工作\"><a href=\"#写一个sum方法，当使用下面的语法调用时它将正常工作\" class=\"headerlink\" title=\"写一个sum方法，当使用下面的语法调用时它将正常工作\"></a>写一个sum方法，当使用下面的语法调用时它将正常工作</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">2</span>,<span class=\"number\">3</span>));   <span class=\"comment\">// Outputs 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">2</span>)(<span class=\"number\">3</span>));  <span class=\"comment\">// Outputs 5</span></span><br></pre></td></tr></table></figure>\n<p>有（至少）两种方法可以做到这一点：</p>\n<p>METHOD 1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] + <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在JavaScript中，函数提供对参数对象的访问，该对象提供对传递给函数的实际参数的访问。这使我们能够使用length属性在运行时确定传递给函数的参数的数量</p>\n<p>如果传递两个参数，我们只需将它们相加并返回。</p>\n<p>否则，我们假设它是以sum（2）（3）的形式被调用的，所以我们返回一个匿名函数，它将传递给sum（）（在本例中为2）的参数和传递给匿名函数的参数这种情况3）。</p>\n<p>METHOD 2</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (y !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当函数被调用时，JavaScript不需要参数的数量来匹配函数定义中参数的数量。如果传递的参数数量超过了函数定义中参数的数量，则超出的参数将被忽略。另一方面，如果传递的参数数量少于函数定义中的参数数量，则在函数内引用时，缺少的参数将具有未定义的值。因此，在上面的例子中，通过简单地检查第二个参数是否未定义，我们可以确定函数被调用的方式并相应地继续。</p>\n<h2 id=\"考虑下面的代码片段\"><a href=\"#考虑下面的代码片段\" class=\"headerlink\" title=\"考虑下面的代码片段\"></a>考虑下面的代码片段</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">  btn.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'Button '</span> + i));</span><br><span class=\"line\">  btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(btn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(a) 当用户点击“按钮4”时，什么被记录到控制台？为什么？</p>\n<p>(b) 提供一个或多个可按预期工作的替代实现。</p>\n<p>答：</p>\n<p>(a) 无论用户点击哪个按钮，数字5将始终记录到控制台。这是因为，在调用onclick方法（对于任何按钮）时，for循环已经完成，并且变量i已经具有值5.（如果受访者知道足够的话就可以获得奖励点数关于执行上下文，变量对象，激活对象和内部“范围”属性如何影响闭包行为。）</p>\n<p>(b) 使这项工作的关键是通过将它传递给新创建的函数对象来捕获每次通过for循环的i的值。以下是四种可能的方法来实现这一点：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">  btn.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'Button '</span> + i));</span><br><span class=\"line\">  btn.addEventListener(<span class=\"string\">'click'</span>, (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;;</span><br><span class=\"line\">  &#125;)(i));</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(btn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者，您可以将新的匿名函数中的整个调用包装为btn.addEventListener：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">  btn.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'Button '</span> + i));</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;);</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(btn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者，我们可以通过调用数组对象的原生forEach方法来替换for循环：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">  btn.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'Button '</span> + i));</span><br><span class=\"line\">  btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(btn);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>最后，最简单的解决方案，如果你在ES6 / ES2015上下文中，就是使用let i而不是var i：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">  btn.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'Button '</span> + i));</span><br><span class=\"line\">  btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(btn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"假设d是范围内的“空”对象\"><a href=\"#假设d是范围内的“空”对象\" class=\"headerlink\" title=\"假设d是范围内的“空”对象\"></a>假设d是范围内的“空”对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> d = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用下面的代码完成了什么？使用下面的代码完成了什么？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ <span class=\"string\">'zebra'</span>, <span class=\"string\">'horse'</span> ].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k</span>) </span>&#123;</span><br><span class=\"line\">    d[k] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面显示的代码片段在对象d上设置了两个属性。理想情况下，对具有未设置键的JavaScript对象执行的查找评估为未定义。但是运行这段代码会将这些属性标记为对象的“自己的属性”。</p>\n<p>这是确保对象具有一组给定属性的有用策略。将该对象传递给Object.keys将返回一个包含这些设置键的数组（即使它们的值未定义）。</p>\n<h2 id=\"下面的代码将输出到控制台，为什么\"><a href=\"#下面的代码将输出到控制台，为什么\" class=\"headerlink\" title=\"下面的代码将输出到控制台，为什么\"></a>下面的代码将输出到控制台，为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"string\">\"john\"</span>.split(<span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1.reverse();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = <span class=\"string\">\"jones\"</span>.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">arr2.push(arr3);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"array 1: length=\"</span> + arr1.length + <span class=\"string\">\" last=\"</span> + arr1.slice(<span class=\"number\">-1</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"array 2: length=\"</span> + arr2.length + <span class=\"string\">\" last=\"</span> + arr2.slice(<span class=\"number\">-1</span>));</span><br></pre></td></tr></table></figure>\n<p>记录的输出将是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"array 1: length=5 last=j,o,n,e,s\"</span></span><br><span class=\"line\"><span class=\"string\">\"array 2: length=5 last=j,o,n,e,s\"</span></span><br></pre></td></tr></table></figure>\n<p>arr1和arr2是相同的（即[‘n’，’h’，’o’，’j’，[‘j’，’o’，’n’，’e’，’s’]]）上述代码由于以下原因而被执行：</p>\n<p>调用数组对象的reverse（）方法不仅以相反的顺序返回数组，它还颠倒了数组本身的顺序（即在这种情况下，arr1）。</p>\n<p>reverse（）方法返回对数组本身的引用（即，在这种情况下为arr1）。因此，arr2仅仅是对arr1的引用（而不是副本）。因此，当对arr2做任何事情时（即，当我们调用arr2.push（arr3）;）时，arr1也会受到影响，因为arr1和arr2只是对同一个对象的引用。</p>\n<p>这里有几个观点可以让人们回答这个问题：</p>\n<p>将数组传递给另一个数组的push（）方法会将整个数组作为单个元素推入数组的末尾。结果，声明arr2.push（arr3）;将arr3作为一个整体添加到arr2的末尾（即，它不连接两个数组，这就是concat（）方法的用途）。</p>\n<p>像Python一样，JavaScript在调用像slice（）这样的数组方法时，会承认负面下标，以此作为在数组末尾引用元素的方式;例如，下标-1表示数组中的最后一个元素，依此类推。</p>\n<h2 id=\"下面的代码输出到控制台，为什么\"><a href=\"#下面的代码输出到控制台，为什么\" class=\"headerlink\" title=\"下面的代码输出到控制台，为什么\"></a>下面的代码输出到控制台，为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> +  <span class=\"string\">\"2\"</span> + <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> +  +<span class=\"string\">\"2\"</span> + <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> +  -<span class=\"string\">\"1\"</span> + <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+<span class=\"string\">\"1\"</span> +  <span class=\"string\">\"1\"</span> + <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"string\">\"A\"</span> - <span class=\"string\">\"B\"</span> + <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"string\">\"A\"</span> - <span class=\"string\">\"B\"</span> + <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>以上代码将输出到控制台：</p>\n<p>“122”<br>“32”<br>“02”<br>“112”<br>“NaN2”<br>NaN</p>\n<p>这是为什么…</p>\n<p>这里的基本问题是JavaScript（ECMAScript）是一种松散类型的语言，它对值执行自动类型转换以适应正在执行的操作。让我们来看看这是如何与上面的每个例子进行比较。</p>\n<p>示例1：1 +“2”+“2”输出：“122”说明：第一个操作在1 +“2”中执行。由于其中一个操作数（“2”）是一个字符串，所以JavaScript假定需要执行字符串连接，因此将1的类型转换为“1”，1 +“2”转换为“12”。然后，“12”+“2”产生“122”。</p>\n<p>示例2：1 + +“2”+“2”输出：“32”说明：根据操作顺序，要执行的第一个操作是+“2”（第一个“2”之前的额外+被视为一个一元运算符）。因此，JavaScript将“2”的类型转换为数字，然后将一元+符号应用于它（即将其视为正数）。结果，下一个操作现在是1 + 2，当然这会产生3.但是，我们有一个数字和一个字符串之间的操作（即3和“2”），所以JavaScript再次转换数值赋给一个字符串并执行字符串连接，产生“32”。</p>\n<p>示例3：1 + - “1”+“2”输出：“02”说明：这里的解释与前面的示例相同，只是一元运算符是 - 而不是+。因此，“1”变为1，然后在应用 - 时将其变为-1，然后将其加1到产生0，然后转换为字符串并与最终的“2”操作数连接，产生“02”。</p>\n<p>示例4：+“1”+“1”+“2”输出：“112”说明：尽管第一个“1”操作数是基于其前面的一元+运算符的数值类型转换的，当它与第二个“1”操作数连接在一起时返回一个字符串，然后与最终的“2”操作数连接，产生字符串“112”。</p>\n<p>示例5：“A” - “B”+“2”输出：“NaN2”说明：由于 - 运算符不能应用于字符串，并且既不能将“A”也不能将“B”转换为数值， “ - ”B“产生NaN，然后​​与字符串”2“串联产生”NaN2“。</p>\n<p>例6：“A” - “B”+2输出：NaN说明：在前面的例子中，“A” - “B”产生NaN。但是任何运算符应用于NaN和其他数字操作数仍然会产生NaN。</p>\n<h2 id=\"如果数组列表太大，以下递归代码将导致堆栈溢出。你如何解决这个问题，仍然保留递归模式\"><a href=\"#如果数组列表太大，以下递归代码将导致堆栈溢出。你如何解决这个问题，仍然保留递归模式\" class=\"headerlink\" title=\"如果数组列表太大，以下递归代码将导致堆栈溢出。你如何解决这个问题，仍然保留递归模式\"></a>如果数组列表太大，以下递归代码将导致堆栈溢出。你如何解决这个问题，仍然保留递归模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = readHugeList();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nextListItem = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = list.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// process the list item...</span></span><br><span class=\"line\">        nextListItem();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过修改nextListItem函数可以避免潜在的堆栈溢出，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = readHugeList();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nextListItem = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = list.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// process the list item...</span></span><br><span class=\"line\">        setTimeout( nextListItem, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>堆栈溢出被消除，因为事件循环处理递归，而不是调用堆栈。当nextListItem运行时，如果item不为null，则将超时函数（nextListItem）推送到事件队列，并且函数退出，从而使调用堆栈清零。当事件队列运行超时事件时，将处理下一个项目，并设置一个计时器以再次调用nextListItem。因此，该方法从头到尾不经过直接递归调用即可处理，因此调用堆栈保持清晰，无论迭代次数如何。</p>\n<h2 id=\"什么是JavaScript中的“闭包”？举一个例子\"><a href=\"#什么是JavaScript中的“闭包”？举一个例子\" class=\"headerlink\" title=\"什么是JavaScript中的“闭包”？举一个例子\"></a>什么是JavaScript中的“闭包”？举一个例子</h2><p>闭包是一个内部函数，它可以访问外部（封闭）函数的作用域链中的变量。闭包可以访问三个范围内的变量;具体来说：（1）变量在其自己的范围内，（2）封闭函数范围内的变量，以及（3）全局变量。</p>\n<p>这里是一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> globalVar = <span class=\"string\">\"xyz\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outerFunc</span>(<span class=\"params\">outerArg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> outerVar = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFunc</span>(<span class=\"params\">innerArg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> innerVar = <span class=\"string\">'b'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">        <span class=\"string\">\"outerArg = \"</span> + outerArg + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"innerArg = \"</span> + innerArg + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"outerVar = \"</span> + outerVar + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"innerVar = \"</span> + innerVar + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"globalVar = \"</span> + globalVar);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)(<span class=\"number\">456</span>);</span><br><span class=\"line\">&#125;)(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，innerFunc，outerFunc和全局名称空间的变量都在innerFunc的范围内。上面的代码将产生以下输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outerArg = <span class=\"number\">123</span></span><br><span class=\"line\">innerArg = <span class=\"number\">456</span></span><br><span class=\"line\">outerVar = a</span><br><span class=\"line\">innerVar = b</span><br><span class=\"line\">globalVar = xyz</span><br></pre></td></tr></table></figure>\n<h2 id=\"以下代码的输出是什么\"><a href=\"#以下代码的输出是什么\" class=\"headerlink\" title=\"以下代码的输出是什么\"></a>以下代码的输出是什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;, i * <span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解释你的答案。如何在这里使用闭包？</p>\n<p>显示的代码示例不会显示值0,1,2,3和4，这可能是预期的;而是显示5,5,5,5。</p>\n<p>这是因为循环内执行的每个函数将在整个循环完成后执行，因此所有函数都会引用存储在i中的最后一个值，即5。</p>\n<p>通过为每次迭代创建一个唯一的作用域 ，可以使用闭包来防止这个问题，并将该变量的每个唯一值存储在其作用域中，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(x); &#125;, x * <span class=\"number\">1000</span> );</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这会产生将0,1,2,3和4记录到控制台的可能结果。</p>\n<p>在ES2015上下文中，您可以在原始代码中简单地使用let而不是var：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;, i * <span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"以下几行代码输出到控制台\"><a href=\"#以下几行代码输出到控制台\" class=\"headerlink\" title=\"以下几行代码输出到控制台\"></a>以下几行代码输出到控制台</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"0 || 1 = \"</span>+(<span class=\"number\">0</span> || <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 || 2 = \"</span>+(<span class=\"number\">1</span> || <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"0 &amp;&amp; 1 = \"</span>+(<span class=\"number\">0</span> &amp;&amp; <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 &amp;&amp; 2 = \"</span>+(<span class=\"number\">1</span> &amp;&amp; <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<p>解释你的答案。</p>\n<p>该代码将输出以下四行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> || <span class=\"number\">1</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> || <span class=\"number\">2</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span> &amp;&amp; <span class=\"number\">1</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span> &amp;&amp; <span class=\"number\">2</span> = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>在JavaScript中，都是||和&amp;&amp;是逻辑运算符，当从左向右计算时返回第一个完全确定的“逻辑值”。</p>\n<p>或（||）运算符。在形式为X || Y的表达式中，首先计算X并将其解释为布尔值。如果此布尔值为真，则返回true（1），并且不计算Y，因为“或”条件已经满足。但是，如果此布尔值为“假”，我们仍然不知道X || Y是真还是假，直到我们评估Y，并将其解释为布尔值。</p>\n<p>因此，0 || 1评估为真（1），正如1 || 2。</p>\n<p>和（&amp;&amp;）运算符。在X &amp;&amp; Y形式的表达式中，首先评估X并将其解释为布尔值。如果此布尔值为false，则返回false（0）并且不评估Y，因为“and”条件已失败。但是，如果这个布尔值为“真”，我们仍然不知道X &amp;&amp; Y是真还是假，直到我们评估Y，并将其解释为布尔值。</p>\n<p>然而，&amp;&amp;运算符的有趣之处在于，当表达式评估为“真”时，则返回表达式本身。这很好，因为它在逻辑表达式中被视为“真”，但也可以用于在您关心时返回该值。这解释了为什么，有点令人惊讶的是，1 &amp;&amp; 2返回2（而你可能会期望它返回true或1）。</p>\n<h2 id=\"下面的代码执行时输出是什么？说明\"><a href=\"#下面的代码执行时输出是什么？说明\" class=\"headerlink\" title=\"下面的代码执行时输出是什么？说明\"></a>下面的代码执行时输出是什么？说明</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span> == <span class=\"string\">'0'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span> === <span class=\"string\">'0'</span>)</span><br></pre></td></tr></table></figure>\n<p>该代码将输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>在JavaScript中，有两套相等运算符。三重相等运算符===的行为与任何传统的相等运算符相同：如果两侧的两个表达式具有相同的类型和相同的值，则计算结果为true。然而，双等号运算符在比较它们之前试图强制这些值。因此，通常使用===而不是==。对于！== vs！=也是如此。</p>\n<h2 id=\"以下代码的输出是什么？解释你的答案\"><a href=\"#以下代码的输出是什么？解释你的答案\" class=\"headerlink\" title=\"以下代码的输出是什么？解释你的答案\"></a>以下代码的输出是什么？解释你的答案</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a=&#123;&#125;,</span><br><span class=\"line\">    b=&#123;<span class=\"attr\">key</span>:<span class=\"string\">'b'</span>&#125;,</span><br><span class=\"line\">    c=&#123;<span class=\"attr\">key</span>:<span class=\"string\">'c'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a[b]=<span class=\"number\">123</span>;</span><br><span class=\"line\">a[c]=<span class=\"number\">456</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[b]);</span><br></pre></td></tr></table></figure>\n<p>此代码的输出将是456（不是123）。</p>\n<p>原因如下：设置对象属性时，JavaScript会隐式地将参数值串联起来。在这种情况下，由于b和c都是对象，它们都将被转换为“[object Object]”。因此，a [b]和a [c]都等价于[“[object Object]”]，并且可以互换使用。因此，设置或引用[c]与设置或引用[b]完全相同。</p>\n<h2 id=\"以下代码将输出到控制台中\"><a href=\"#以下代码将输出到控制台中\" class=\"headerlink\" title=\"以下代码将输出到控制台中\"></a>以下代码将输出到控制台中</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">n</span>)</span>&#123;<span class=\"keyword\">return</span> ((n &gt; <span class=\"number\">1</span>) ? n * f(n<span class=\"number\">-1</span>) : n)&#125;)(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n<p>该代码将输出10阶乘的值（即10！或3,628,800）。</p>\n<p>原因如下：</p>\n<p>命名函数f（）以递归方式调用自身，直到它调用f（1），它简单地返回1.因此，这就是它的作用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(<span class=\"number\">1</span>): returns n, which is <span class=\"number\">1</span></span><br><span class=\"line\">f(<span class=\"number\">2</span>): returns <span class=\"number\">2</span> * f(<span class=\"number\">1</span>), which is <span class=\"number\">2</span></span><br><span class=\"line\">f(<span class=\"number\">3</span>): returns <span class=\"number\">3</span> * f(<span class=\"number\">2</span>), which is <span class=\"number\">6</span></span><br><span class=\"line\">f(<span class=\"number\">4</span>): returns <span class=\"number\">4</span> * f(<span class=\"number\">3</span>), which is <span class=\"number\">24</span></span><br><span class=\"line\">f(<span class=\"number\">5</span>): returns <span class=\"number\">5</span> * f(<span class=\"number\">4</span>), which is <span class=\"number\">120</span></span><br><span class=\"line\">f(<span class=\"number\">6</span>): returns <span class=\"number\">6</span> * f(<span class=\"number\">5</span>), which is <span class=\"number\">720</span></span><br><span class=\"line\">f(<span class=\"number\">7</span>): returns <span class=\"number\">7</span> * f(<span class=\"number\">6</span>), which is <span class=\"number\">5040</span></span><br><span class=\"line\">f(<span class=\"number\">8</span>): returns <span class=\"number\">8</span> * f(<span class=\"number\">7</span>), which is <span class=\"number\">40320</span></span><br><span class=\"line\">f(<span class=\"number\">9</span>): returns <span class=\"number\">9</span> * f(<span class=\"number\">8</span>), which is <span class=\"number\">362880</span></span><br><span class=\"line\">f(<span class=\"number\">10</span>): returns <span class=\"number\">10</span> * f(<span class=\"number\">9</span>), which is <span class=\"number\">3628800</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"考虑下面的代码片段。控制台的输出是什么，为什么\"><a href=\"#考虑下面的代码片段。控制台的输出是什么，为什么\" class=\"headerlink\" title=\"考虑下面的代码片段。控制台的输出是什么，为什么\"></a>考虑下面的代码片段。控制台的输出是什么，为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    &#125;)(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>输出将为1，即使x的值从未在内部函数中设置。原因如下：</p>\n<p>正如我们的JavaScript招聘指南中所解释的，闭包是一个函数，以及创建闭包时在范围内的所有变量或函数。在JavaScript中，闭包被实现为“内部函数”;即在另一功能的主体内定义的功能。闭包的一个重要特征是内部函数仍然可以访问外部函数的变量。</p>\n<p>因此，在这个例子中，因为x没有在内部函数中定义，所以在外部函数的作用域中搜索一个定义的变量x，该变量的值为1。</p>\n<h2 id=\"以下代码将输出到控制台以及为什么\"><a href=\"#以下代码将输出到控制台以及为什么\" class=\"headerlink\" title=\"以下代码将输出到控制台以及为什么\"></a>以下代码将输出到控制台以及为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">    _name: <span class=\"string\">'John Doe'</span>,</span><br><span class=\"line\">    getSecretIdentity: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> stoleSecretIdentity = hero.getSecretIdentity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stoleSecretIdentity());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hero.getSecretIdentity());</span><br></pre></td></tr></table></figure>\n<p>这段代码有什么问题，以及如何解决这个问题。</p>\n<p>该代码将输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">John Doe</span><br></pre></td></tr></table></figure>\n<p>第一个console.log打印未定义，因为我们从hero对象中提取方法，所以stoleSecretIdentity（）在_name属性不存在的全局上下文（即窗口对象）中被调用。</p>\n<p>修复stoleSecretIdentity（）函数的一种方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stoleSecretIdentity = hero.getSecretIdentity.bind(hero);</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建一个函数，给定页面上的DOM元素，将访问元素本身及其所有后代（不仅仅是它的直接子元素）。对于每个访问的元素，函数应该将该元素传递给提供的回调函数\"><a href=\"#创建一个函数，给定页面上的DOM元素，将访问元素本身及其所有后代（不仅仅是它的直接子元素）。对于每个访问的元素，函数应该将该元素传递给提供的回调函数\" class=\"headerlink\" title=\"创建一个函数，给定页面上的DOM元素，将访问元素本身及其所有后代（不仅仅是它的直接子元素）。对于每个访问的元素，函数应该将该元素传递给提供的回调函数\"></a>创建一个函数，给定页面上的DOM元素，将访问元素本身及其所有后代（不仅仅是它的直接子元素）。对于每个访问的元素，函数应该将该元素传递给提供的回调函数</h2><p>该函数的参数应该是：</p>\n<ul>\n<li>一个 DOM 元素</li>\n<li>一个回调函数（以DOM元素作为参数）</li>\n</ul>\n<p>访问树中的所有元素（DOM）是[经典的深度优先搜索算法]Depth-First-Search algorithm应用程序。以下是一个示例解决方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Traverse</span>(<span class=\"params\">p_element,p_callback</span>) </span>&#123;</span><br><span class=\"line\">   p_callback(p_element);</span><br><span class=\"line\">   <span class=\"keyword\">var</span> list = p_element.children;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">       Traverse(list[i],p_callback);  <span class=\"comment\">// recursive call</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在JavaScript中测试您的这些知识：以下代码的输出是什么\"><a href=\"#在JavaScript中测试您的这些知识：以下代码的输出是什么\" class=\"headerlink\" title=\"在JavaScript中测试您的这些知识：以下代码的输出是什么\"></a>在JavaScript中测试您的这些知识：以下代码的输出是什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> length = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  length: <span class=\"number\">5</span>,</span><br><span class=\"line\">  method: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    fn();</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.method(fn, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>为什么不是10和5？</p>\n<p>首先，由于fn作为函数方法的参数传递，函数fn的作用域（this）是窗口。 var length = 10;在窗口级别声明。它也可以作为window.length或length或this.length来访问（当这个===窗口时）。</p>\n<p>方法绑定到Object obj，obj.method用参数fn和1调用。虽然方法只接受一个参数，但调用它时已经传递了两个参数;第一个是函数回调，其他只是一个数字。</p>\n<p>当在内部方法中调用fn（）时，该函数在全局级别作为参数传递，this.length将有权访问在Object obj中定义的var length = 10（全局声明）而不是length = 5。</p>\n<p>现在，我们知道我们可以使用arguments []数组访问JavaScript函数中的任意数量的参数。</p>\n<p>因此arguments0只不过是调用fn（）。在fn里面，这个函数的作用域成为参数数组，并且记录参数[]的长度将返回2。</p>\n<p>因此输出将如上所述。</p>\n<h2 id=\"考虑下面的代码。输出是什么，为什么\"><a href=\"#考虑下面的代码。输出是什么，为什么\" class=\"headerlink\" title=\"考虑下面的代码。输出是什么，为什么\"></a>考虑下面的代码。输出是什么，为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>, y = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(y);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>var语句被挂起（没有它们的值初始化）到它所属的全局或函数作用域的顶部，即使它位于with或catch块内。但是，错误的标识符只在catch块内部可见。它相当于：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x, y; <span class=\"comment\">// outer and hoisted</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (x <span class=\"comment\">/* inner */</span>) &#123;</span><br><span class=\"line\">        x = <span class=\"number\">1</span>; <span class=\"comment\">// inner x, not the outer one</span></span><br><span class=\"line\">        y = <span class=\"number\">2</span>; <span class=\"comment\">// there is only one y, which is in the outer scope</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x <span class=\"comment\">/* inner */</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(y);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h2 id=\"这段代码的输出是什么\"><a href=\"#这段代码的输出是什么\" class=\"headerlink\" title=\"这段代码的输出是什么\"></a>这段代码的输出是什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">21</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> girl = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">girl ();</span><br></pre></td></tr></table></figure>\n<p>21，也不是20，结果是‘undefined’的</p>\n<p>这是因为JavaScript初始化没有被挂起。</p>\n<p>（为什么它不显示21的全局值？原因是当函数执行时，它检查是否存在本地x变量但尚未声明它，因此它不会查找全局变量。 ）</p>\n<h2 id=\"你如何克隆一个对象\"><a href=\"#你如何克隆一个对象\" class=\"headerlink\" title=\"你如何克隆一个对象\"></a>你如何克隆一个对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span> ,<span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> objclone = <span class=\"built_in\">Object</span>.assign(&#123;&#125;,obj);</span><br></pre></td></tr></table></figure>\n<p>现在objclone的值是{a：1，b：2}，但指向与obj不同的对象。</p>\n<p>但请注意潜在的缺陷：Object.clone（）只会执行浅拷贝，而不是深拷贝。这意味着嵌套的对象不会被复制。他们仍然引用与原始相同的嵌套对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: <span class=\"number\">2</span>,</span><br><span class=\"line\">    c: &#123;</span><br><span class=\"line\">        age: <span class=\"number\">30</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objclone = <span class=\"built_in\">Object</span>.assign(&#123;&#125;,obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'objclone: '</span>, objclone);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.c.age = <span class=\"number\">45</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'After Change - obj: '</span>, obj);           <span class=\"comment\">// 45 - This also changes</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'After Change - objclone: '</span>, objclone); <span class=\"comment\">// 45</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;, i * <span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"此代码将打印什么\"><a href=\"#此代码将打印什么\" class=\"headerlink\" title=\"此代码将打印什么\"></a>此代码将打印什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i); &#125;, i * <span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>它会打印0 1 2 3 4，因为我们在这里使用let而不是var。变量i只能在for循环的块范围中看到。</p>\n<h2 id=\"以下几行输出什么，为什么\"><a href=\"#以下几行输出什么，为什么\" class=\"headerlink\" title=\"以下几行输出什么，为什么\"></a>以下几行输出什么，为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> &lt; <span class=\"number\">2</span> &lt; <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> &gt; <span class=\"number\">2</span> &gt; <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>第一条语句返回true，如预期的那样。</p>\n<p>第二个返回false是因为引擎如何针对&lt;和&gt;的操作符关联性工作。它比较从左到右，所以3&gt; 2&gt; 1 JavaScript翻译为true&gt; 1. true具有值1，因此它比较1&gt; 1，这是错误的。</p>\n<h2 id=\"如何在数组的开头添加元素？最后如何添加一个\"><a href=\"#如何在数组的开头添加元素？最后如何添加一个\" class=\"headerlink\" title=\"如何在数组的开头添加元素？最后如何添加一个\"></a>如何在数组的开头添加元素？最后如何添加一个</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myArray = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];</span><br><span class=\"line\">myArray.push(<span class=\"string\">'end'</span>);</span><br><span class=\"line\">myArray.unshift(<span class=\"string\">'start'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myArray); <span class=\"comment\">// [\"start\", \"a\", \"b\", \"c\", \"d\", \"end\"]</span></span><br></pre></td></tr></table></figure>\n<p>使用ES6，可以使用扩展运算符：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myArray = [<span class=\"string\">'start'</span>, ...myArray];</span><br><span class=\"line\">myArray = [...myArray, <span class=\"string\">'end'</span>];</span><br></pre></td></tr></table></figure>\n<p>或者，简而言之：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myArray = [<span class=\"string\">'start'</span>, ...myArray, <span class=\"string\">'end'</span>];</span><br></pre></td></tr></table></figure>\n<h2 id=\"想象一下你有这样的代码吗\"><a href=\"#想象一下你有这样的代码吗\" class=\"headerlink\" title=\"想象一下你有这样的代码吗\"></a>想象一下你有这样的代码吗</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<p>a）这会导致崩溃吗？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[<span class=\"number\">10</span>] = <span class=\"number\">99</span>;</span><br></pre></td></tr></table></figure>\n<p>b）这个输出是什么？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a[<span class=\"number\">6</span>]);</span><br></pre></td></tr></table></figure>\n<p>a）它不会崩溃。 JavaScript引擎将使阵列插槽3至9成为“空插槽”。</p>\n<p>b）在这里，a [6]将输出未定义的值，但时隙仍为空，而不是未定义的。在某些情况下，这可能是一个重要的细微差别。例如，使用map（）时，map（）的输出中的空插槽将保持为空，但未定义的插槽将使用传递给它的函数重映射：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"literal\">undefined</span>];</span><br><span class=\"line\">b[<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);             <span class=\"comment\">// (3) [undefined, empty × 1, 1]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.map(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"number\">7</span>)); <span class=\"comment\">// (3) [7,         empty × 1, 7]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"typeof-undefined-typeof-NULL的值是什么\"><a href=\"#typeof-undefined-typeof-NULL的值是什么\" class=\"headerlink\" title=\"typeof undefined == typeof NULL的值是什么\"></a>typeof undefined == typeof NULL的值是什么</h2><p>该表达式将被评估为true，因为NULL将被视为任何其他未定义的变量。</p>\n<p>注意：JavaScript区分大小写，我们在这里使用NULL而不是null。</p>\n<h2 id=\"代码返回后会怎么样\"><a href=\"#代码返回后会怎么样\" class=\"headerlink\" title=\"代码返回后会怎么样\"></a>代码返回后会怎么样</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"keyword\">typeof</span> <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">string</span><br></pre></td></tr></table></figure>\n<p>typeof 1将返回“number”，typeof“number”将返回字符串。</p>\n<h2 id=\"以下代码输出什么？为什么\"><a href=\"#以下代码输出什么？为什么\" class=\"headerlink\" title=\"以下代码输出什么？为什么\"></a>以下代码输出什么？为什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        b++;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    inner();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">outer();</span><br></pre></td></tr></table></figure>\n<p>输出到控制台将是“3”。</p>\n<p>在这个例子中有三个闭包，每个都有它自己的var b声明。当调用变量时，将按照从本地到全局的顺序检查闭包，直到找到实例。由于内部闭包有自己的b变量，这就是输出。</p>\n<p>此外，由于提升内部的代码将被解释如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b; <span class=\"comment\">// b is undefined</span></span><br><span class=\"line\">    b++; <span class=\"comment\">// b is NaN</span></span><br><span class=\"line\">    b = <span class=\"number\">3</span>; <span class=\"comment\">// b is 3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// output \"3\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>面试比棘手的技术问题要多，所以这些仅仅是作为指导。并不是每个值得聘用的“A”候选人都能够回答所有问题，也不会回答他们都保证有“A”候选人。在这一天结束时，招聘仍然是一门艺术，一门科学 - 还有很多工作。.</p>\n<p>原文链接:<a href=\"https://www.toptal.com/javascript/interview-questions\" target=\"_blank\" rel=\"noopener\">https://www.toptal.com/javascript/interview-questions</a><br>转载链接:<a href=\"https://www.zcfy.cc/article/37-essential-javascript-interview-questions-and-answers\" target=\"_blank\" rel=\"noopener\">https://www.zcfy.cc/article/37-essential-javascript-interview-questions-and-answers</a></p>","categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"js","path":"api/tags/js.json"},{"name":"面试","path":"api/tags/面试.json"}]}