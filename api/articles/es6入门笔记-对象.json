{"title":"es6入门笔记-对象","slug":"es6入门笔记-对象","date":"2017-07-15T16:00:00.000Z","updated":"2017-07-15T16:00:00.000Z","comments":true,"path":"api/articles/es6入门笔记-对象.json","excerpt":"es6中，新增对象方法。<br>","covers":null,"content":"<p>es6中，新增对象方法。<br><a id=\"more\"></a></p>\n<h2 id=\"属性简洁表示\"><a href=\"#属性简洁表示\" class=\"headerlink\" title=\"属性简洁表示\"></a>属性简洁表示</h2><p>ES6 允许直接写入变量和函数，作为对象的属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*简写属性*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> baz = &#123;foo&#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// &#123;foo: \"bar\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> baz = &#123;<span class=\"attr\">foo</span>: foo&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;x, y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">x</span>: x, <span class=\"attr\">y</span>: y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// Object &#123;x: 1, y: 2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*简写函数*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;</span><br><span class=\"line\">  method() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;</span><br><span class=\"line\">  method: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"属性名表达式\"><a href=\"#属性名表达式\" class=\"headerlink\" title=\"属性名表达式\"></a>属性名表达式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**** es3 ****/</span></span><br><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\">obj.foo = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\">obj[<span class=\"string\">'a'</span> + <span class=\"string\">'bc'</span>] = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"comment\">/**** es5 对象定义只有一种 ****/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  foo: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  abc: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**** es6 可以使用第二种方法定义对象属性 ****/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> propKey = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [propKey]: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  [<span class=\"string\">'a'</span> + <span class=\"string\">'bc'</span>]: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法的-name-属性\"><a href=\"#方法的-name-属性\" class=\"headerlink\" title=\"方法的 name 属性\"></a>方法的 name 属性</h2><p>函数的name属性，返回函数名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  sayName() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello!'</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">person.sayName.name   <span class=\"comment\">// \"sayName\"</span></span><br><span class=\"line\"><span class=\"comment\">/**** get set ****/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> foo() &#123;&#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span> foo(x) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.foo.name</span><br><span class=\"line\"><span class=\"comment\">// TypeError: Cannot read property 'name' of undefined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">'foo'</span>);</span><br><span class=\"line\">descriptor.get.name <span class=\"comment\">// \"get foo\"</span></span><br><span class=\"line\">descriptor.set.name <span class=\"comment\">// \"set foo\"</span></span><br><span class=\"line\"><span class=\"comment\">/**** bind function ****/</span></span><br><span class=\"line\">(<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>()).name <span class=\"comment\">// \"anonymous\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> doSomething = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">doSomething.bind().name <span class=\"comment\">// \"bound doSomething\"</span></span><br><span class=\"line\"><span class=\"comment\">/**** Symbol ****/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> key1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'description'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> key2 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [key1]() &#123;&#125;,</span><br><span class=\"line\">  [key2]() &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj[key1].name <span class=\"comment\">// \"[description]\"</span></span><br><span class=\"line\">obj[key2].name <span class=\"comment\">// \"\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-is\"><a href=\"#Object-is\" class=\"headerlink\" title=\"Object.is()\"></a>Object.is()</h2><p>用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。<br>不同之处只有两个：一是+0不等于-0，二是NaN等于自身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, <span class=\"number\">-0</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign()\"></a>Object.assign()</h2><p>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。第一个参数是目标对象，后面的参数都是源对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**** 只有一个参数时，返回该参数 ****/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(obj) === obj <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**** undefind 和 null不能转换 ****/</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">undefined</span>) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">null</span>) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**** 其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。 ****/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> v1 = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v2 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v3 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, v1, v2, v3);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" &#125;</span></span><br></pre></td></tr></table></figure>\n<p>注：<em>属于浅拷贝。只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。</em></p>\n<h2 id=\"属性的可枚举性和遍历\"><a href=\"#属性的可枚举性和遍历\" class=\"headerlink\" title=\"属性的可枚举性和遍历\"></a>属性的可枚举性和遍历</h2><p><code>Object.getOwnPropertyDescriptor</code>方法可以获取该属性的描述对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">'foo'</span>)</span><br><span class=\"line\"><span class=\"comment\">//  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    value: 123,</span></span><br><span class=\"line\"><span class=\"comment\">//    writable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//    enumerable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//    configurable: true</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">/*enumerable: false 时，for...in，Object.keys()，JSON.stringify()，Object.assign()忽略*/</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</li>\n<li>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</li>\n<li>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</li>\n<li>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。</li>\n<li>Reflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</li>\n</ul>\n<h2 id=\"Object-getOwnPropertyDescriptors\"><a href=\"#Object-getOwnPropertyDescriptors\" class=\"headerlink\" title=\"Object.getOwnPropertyDescriptors()\"></a>Object.getOwnPropertyDescriptors()</h2><p>ES2017 引入了Object.getOwnPropertyDescriptors方法，返回指定对象所有自身属性（非继承属性）的描述对象。</p>\n<h2 id=\"proto属性，Object-setPrototypeOf-，Object-getPrototypeOf\"><a href=\"#proto属性，Object-setPrototypeOf-，Object-getPrototypeOf\" class=\"headerlink\" title=\"proto属性，Object.setPrototypeOf()，Object.getPrototypeOf()\"></a><strong>proto</strong>属性，Object.setPrototypeOf()，Object.getPrototypeOf()</h2><ul>\n<li><code>__proto__</code>属性（前后各两个下划线），用来读取或设置当前对象的prototype对象。</li>\n<li><code>Object.setPrototypeOf</code>用来设置一个对象的prototype对象，返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法。</li>\n<li><code>Object.getPrototypeOf</code>该方法与Object.setPrototypeOf方法配套，用于读取一个对象的原型对象。</li>\n</ul>\n<h2 id=\"Object-keys-，Object-values-，Object-entries\"><a href=\"#Object-keys-，Object-values-，Object-entries\" class=\"headerlink\" title=\"Object.keys()，Object.values()，Object.entries()\"></a>Object.keys()，Object.values()，Object.entries()</h2><ul>\n<li>Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。</li>\n<li>Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。</li>\n<li>Object.entries方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。</li>\n</ul>\n<p>参考链接<br><a href=\"http://es6.ruanyifeng.com/#docs/object\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/object</a></p>\n","more":"</p>\n<h2 id=\"属性简洁表示\"><a href=\"#属性简洁表示\" class=\"headerlink\" title=\"属性简洁表示\"></a>属性简洁表示</h2><p>ES6 允许直接写入变量和函数，作为对象的属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*简写属性*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> baz = &#123;foo&#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// &#123;foo: \"bar\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> baz = &#123;<span class=\"attr\">foo</span>: foo&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;x, y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">x</span>: x, <span class=\"attr\">y</span>: y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// Object &#123;x: 1, y: 2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*简写函数*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;</span><br><span class=\"line\">  method() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;</span><br><span class=\"line\">  method: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"属性名表达式\"><a href=\"#属性名表达式\" class=\"headerlink\" title=\"属性名表达式\"></a>属性名表达式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**** es3 ****/</span></span><br><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\">obj.foo = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\">obj[<span class=\"string\">'a'</span> + <span class=\"string\">'bc'</span>] = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"comment\">/**** es5 对象定义只有一种 ****/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  foo: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  abc: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**** es6 可以使用第二种方法定义对象属性 ****/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> propKey = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [propKey]: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  [<span class=\"string\">'a'</span> + <span class=\"string\">'bc'</span>]: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法的-name-属性\"><a href=\"#方法的-name-属性\" class=\"headerlink\" title=\"方法的 name 属性\"></a>方法的 name 属性</h2><p>函数的name属性，返回函数名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  sayName() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello!'</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">person.sayName.name   <span class=\"comment\">// \"sayName\"</span></span><br><span class=\"line\"><span class=\"comment\">/**** get set ****/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> foo() &#123;&#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span> foo(x) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.foo.name</span><br><span class=\"line\"><span class=\"comment\">// TypeError: Cannot read property 'name' of undefined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">'foo'</span>);</span><br><span class=\"line\">descriptor.get.name <span class=\"comment\">// \"get foo\"</span></span><br><span class=\"line\">descriptor.set.name <span class=\"comment\">// \"set foo\"</span></span><br><span class=\"line\"><span class=\"comment\">/**** bind function ****/</span></span><br><span class=\"line\">(<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>()).name <span class=\"comment\">// \"anonymous\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> doSomething = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">doSomething.bind().name <span class=\"comment\">// \"bound doSomething\"</span></span><br><span class=\"line\"><span class=\"comment\">/**** Symbol ****/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> key1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'description'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> key2 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [key1]() &#123;&#125;,</span><br><span class=\"line\">  [key2]() &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj[key1].name <span class=\"comment\">// \"[description]\"</span></span><br><span class=\"line\">obj[key2].name <span class=\"comment\">// \"\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-is\"><a href=\"#Object-is\" class=\"headerlink\" title=\"Object.is()\"></a>Object.is()</h2><p>用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。<br>不同之处只有两个：一是+0不等于-0，二是NaN等于自身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, <span class=\"number\">-0</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign()\"></a>Object.assign()</h2><p>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。第一个参数是目标对象，后面的参数都是源对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**** 只有一个参数时，返回该参数 ****/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(obj) === obj <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**** undefind 和 null不能转换 ****/</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">undefined</span>) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">null</span>) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**** 其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。 ****/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> v1 = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v2 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v3 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, v1, v2, v3);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" &#125;</span></span><br></pre></td></tr></table></figure>\n<p>注：<em>属于浅拷贝。只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。</em></p>\n<h2 id=\"属性的可枚举性和遍历\"><a href=\"#属性的可枚举性和遍历\" class=\"headerlink\" title=\"属性的可枚举性和遍历\"></a>属性的可枚举性和遍历</h2><p><code>Object.getOwnPropertyDescriptor</code>方法可以获取该属性的描述对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">'foo'</span>)</span><br><span class=\"line\"><span class=\"comment\">//  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    value: 123,</span></span><br><span class=\"line\"><span class=\"comment\">//    writable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//    enumerable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//    configurable: true</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">/*enumerable: false 时，for...in，Object.keys()，JSON.stringify()，Object.assign()忽略*/</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</li>\n<li>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</li>\n<li>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</li>\n<li>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。</li>\n<li>Reflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</li>\n</ul>\n<h2 id=\"Object-getOwnPropertyDescriptors\"><a href=\"#Object-getOwnPropertyDescriptors\" class=\"headerlink\" title=\"Object.getOwnPropertyDescriptors()\"></a>Object.getOwnPropertyDescriptors()</h2><p>ES2017 引入了Object.getOwnPropertyDescriptors方法，返回指定对象所有自身属性（非继承属性）的描述对象。</p>\n<h2 id=\"proto属性，Object-setPrototypeOf-，Object-getPrototypeOf\"><a href=\"#proto属性，Object-setPrototypeOf-，Object-getPrototypeOf\" class=\"headerlink\" title=\"proto属性，Object.setPrototypeOf()，Object.getPrototypeOf()\"></a><strong>proto</strong>属性，Object.setPrototypeOf()，Object.getPrototypeOf()</h2><ul>\n<li><code>__proto__</code>属性（前后各两个下划线），用来读取或设置当前对象的prototype对象。</li>\n<li><code>Object.setPrototypeOf</code>用来设置一个对象的prototype对象，返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法。</li>\n<li><code>Object.getPrototypeOf</code>该方法与Object.setPrototypeOf方法配套，用于读取一个对象的原型对象。</li>\n</ul>\n<h2 id=\"Object-keys-，Object-values-，Object-entries\"><a href=\"#Object-keys-，Object-values-，Object-entries\" class=\"headerlink\" title=\"Object.keys()，Object.values()，Object.entries()\"></a>Object.keys()，Object.values()，Object.entries()</h2><ul>\n<li>Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。</li>\n<li>Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。</li>\n<li>Object.entries方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。</li>\n</ul>\n<p>参考链接<br><a href=\"http://es6.ruanyifeng.com/#docs/object\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/object</a></p>","categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"es6","path":"api/tags/es6.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"Object","path":"api/tags/Object.json"}]}