{"title":"Promise与setTimeOut","slug":"Promise与setTimeOut","date":"2019-04-02T16:00:00.000Z","updated":"2019-04-02T16:00:00.000Z","comments":true,"path":"api/articles/Promise与setTimeOut.json","excerpt":"当同时存在Promise与setTimeOut时，它们的执行顺序是什么呢？<br>","covers":null,"content":"<p>当同时存在<code>Promise</code>与<code>setTimeOut</code>时，它们的执行顺序是什么呢？<br><a id=\"more\"></a></p>\n<p>作为浏览器或者运行环境，在拿到开发者给的JavaScript的代码后，首先要传递给JavaScript引擎，让其执行。但是JavaScript的运行，往往需要时间，这时候就需要一个认知，一个JavaScript引擎会常驻内存，等待我们将代码或者函数传递给它。</p>\n<h2 id=\"es3及之后\"><a href=\"#es3及之后\" class=\"headerlink\" title=\"es3及之后\"></a>es3及之后</h2><p>在早期，JavaScript没有异步执行的概念，当传递代码时，往往是顺序执行宿主（浏览器）发起的任务。</p>\n<p>es5之后，JavaScript引入了<code>Promise</code>，JavaScript可以发起任务，而不需要浏览器的安排。</p>\n<p>这里浏览器发起的任务为宏观任务，JavaScript引擎发起的任务为微观任务。</p>\n<h2 id=\"宏观任务与微观任务\"><a href=\"#宏观任务与微观任务\" class=\"headerlink\" title=\"宏观任务与微观任务\"></a>宏观任务与微观任务</h2><p>JavaScript引擎等待宿主分配宏观任务，在操作系统中，等待行为称为事件循环。</p>\n<p>简单来讲就是“等待” - “执行”。这里省略了判断循环是否结束，宏观队列的问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(TRUE)&#123;</span><br><span class=\"line\">    r = wait();</span><br><span class=\"line\">    execute(r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每次的执行过程，就是一个宏观任务，事件的循环也可以称为宏观任务队列。<br>在宏观任务中，JavaScript会执行<code>Promise</code>异步代码。JavaScript要保证代码在宏观任务里执行，因此宏观任务包含一个微观任务队列。</p>\n<p>有了宏观任务和微观任务，就可以实现JavaScript的引擎和宿主任务了。这里，<code>Promise</code>永远在队列尾部添加微观任务，<code>setTimeOut</code>等宿主API，则添加宏观任务。</p>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p><code>Promise</code> 是 JavaScript 语言提供的一种标准化的异步管理方式，它的总体思想是，需要进行 io、等待或者其它异步操作的函数，不返回真实结果，而返回一个“承诺”，函数的调用方可以在合适的时机，选择等待这个承诺兑现（通过 <code>Promise</code> 的 then 方法的回调）。</p>\n<p>执行顺序分析：</p>\n<ul>\n<li>分析几个宏观任务</li>\n<li>确定每个宏观任务里有几个微观任务</li>\n<li>根据调用顺序，确定微观任务执行顺序</li>\n<li>确定宏观任务顺序</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">\"d\"</span>), <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    r.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> begin = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">Date</span>.now() - begin &lt; <span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"c1\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"c2\"</span>))</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 这里就不难理解，当代码执行时，输出c1、c2、d</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">duration</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">            setTimeout(resolve,duration);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">5000</span>).then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">\"c\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// a,b,c</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"asyc-await\"><a href=\"#asyc-await\" class=\"headerlink\" title=\"asyc/await\"></a>asyc/await</h2><p>es6新引入的特性，其运行基础为<code>Promise</code>,<code>asyc</code>函数必须返回<code>Promise</code>，返回的<code>Promise</code>即为异步函数。</p>\n<p>async 函数是一种特殊语法，特征是在 function 关键字之前加上 async 关键字，这样，就定义了一个 async 函数，我们可以在其中使用 await 来等待一个 <code>Promise</code>。</p>\n<p>其强大之处在于可以嵌套。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 盒子绿三秒，黄1秒，红三秒</span></span><br><span class=\"line\"><span class=\"comment\">//&lt;div id=\"light\" style=\"background: #fff;width:10px;height:10px;\"&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">duration</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(resolve, duration);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span>(<span class=\"params\">duration,color</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"light\"</span>).style.background = color;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> sleep(duration);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> changeColor(<span class=\"number\">3000</span>,<span class=\"string\">\"green\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> changeColor(<span class=\"number\">1000</span>, <span class=\"string\">\"yellow\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> changeColor(<span class=\"number\">2000</span>, <span class=\"string\">\"red\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n","more":"</p>\n<p>作为浏览器或者运行环境，在拿到开发者给的JavaScript的代码后，首先要传递给JavaScript引擎，让其执行。但是JavaScript的运行，往往需要时间，这时候就需要一个认知，一个JavaScript引擎会常驻内存，等待我们将代码或者函数传递给它。</p>\n<h2 id=\"es3及之后\"><a href=\"#es3及之后\" class=\"headerlink\" title=\"es3及之后\"></a>es3及之后</h2><p>在早期，JavaScript没有异步执行的概念，当传递代码时，往往是顺序执行宿主（浏览器）发起的任务。</p>\n<p>es5之后，JavaScript引入了<code>Promise</code>，JavaScript可以发起任务，而不需要浏览器的安排。</p>\n<p>这里浏览器发起的任务为宏观任务，JavaScript引擎发起的任务为微观任务。</p>\n<h2 id=\"宏观任务与微观任务\"><a href=\"#宏观任务与微观任务\" class=\"headerlink\" title=\"宏观任务与微观任务\"></a>宏观任务与微观任务</h2><p>JavaScript引擎等待宿主分配宏观任务，在操作系统中，等待行为称为事件循环。</p>\n<p>简单来讲就是“等待” - “执行”。这里省略了判断循环是否结束，宏观队列的问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(TRUE)&#123;</span><br><span class=\"line\">    r = wait();</span><br><span class=\"line\">    execute(r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每次的执行过程，就是一个宏观任务，事件的循环也可以称为宏观任务队列。<br>在宏观任务中，JavaScript会执行<code>Promise</code>异步代码。JavaScript要保证代码在宏观任务里执行，因此宏观任务包含一个微观任务队列。</p>\n<p>有了宏观任务和微观任务，就可以实现JavaScript的引擎和宿主任务了。这里，<code>Promise</code>永远在队列尾部添加微观任务，<code>setTimeOut</code>等宿主API，则添加宏观任务。</p>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p><code>Promise</code> 是 JavaScript 语言提供的一种标准化的异步管理方式，它的总体思想是，需要进行 io、等待或者其它异步操作的函数，不返回真实结果，而返回一个“承诺”，函数的调用方可以在合适的时机，选择等待这个承诺兑现（通过 <code>Promise</code> 的 then 方法的回调）。</p>\n<p>执行顺序分析：</p>\n<ul>\n<li>分析几个宏观任务</li>\n<li>确定每个宏观任务里有几个微观任务</li>\n<li>根据调用顺序，确定微观任务执行顺序</li>\n<li>确定宏观任务顺序</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">\"d\"</span>), <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    r.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> begin = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">Date</span>.now() - begin &lt; <span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"c1\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"c2\"</span>))</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 这里就不难理解，当代码执行时，输出c1、c2、d</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">duration</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">            setTimeout(resolve,duration);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">5000</span>).then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">\"c\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// a,b,c</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"asyc-await\"><a href=\"#asyc-await\" class=\"headerlink\" title=\"asyc/await\"></a>asyc/await</h2><p>es6新引入的特性，其运行基础为<code>Promise</code>,<code>asyc</code>函数必须返回<code>Promise</code>，返回的<code>Promise</code>即为异步函数。</p>\n<p>async 函数是一种特殊语法，特征是在 function 关键字之前加上 async 关键字，这样，就定义了一个 async 函数，我们可以在其中使用 await 来等待一个 <code>Promise</code>。</p>\n<p>其强大之处在于可以嵌套。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 盒子绿三秒，黄1秒，红三秒</span></span><br><span class=\"line\"><span class=\"comment\">//&lt;div id=\"light\" style=\"background: #fff;width:10px;height:10px;\"&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">duration</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(resolve, duration);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span>(<span class=\"params\">duration,color</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"light\"</span>).style.background = color;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> sleep(duration);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> changeColor(<span class=\"number\">3000</span>,<span class=\"string\">\"green\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> changeColor(<span class=\"number\">1000</span>, <span class=\"string\">\"yellow\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> changeColor(<span class=\"number\">2000</span>, <span class=\"string\">\"red\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>","categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"promise","path":"api/tags/promise.json"},{"name":"es6","path":"api/tags/es6.json"},{"name":"事件循环","path":"api/tags/事件循环.json"}]}