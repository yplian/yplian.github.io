{"title":"Docker简要","slug":"Docker简要","date":"2023-08-05T04:00:00.000Z","updated":"2023-08-05T04:00:00.000Z","comments":true,"path":"api/articles/Docker简要.json","excerpt":"介绍Docker基本使用方法，附带实现在Docker中运行前端项目开发环境的方法。<br>","covers":null,"content":"<p>介绍<code>Docker</code>基本使用方法，附带实现在<code>Docker</code>中运行前端项目开发环境的方法。<br><a id=\"more\"></a></p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>新手推荐下载桌面版，可视化操作更简单，很多指令可以通过可视化进行。<a href=\"https://www.docker.com/products/docker-desktop/\" target=\"_blank\" rel=\"noopener\">下载地址</a>。</p>\n<h2 id=\"Docker命令\"><a href=\"#Docker命令\" class=\"headerlink\" title=\"Docker命令\"></a>Docker命令</h2><p>建议通过<code>docker 指令名称 --help</code>查看详细的指令信息。这里简单列举大概有哪些。</p>\n<h3 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载 redis 镜像</span></span><br><span class=\"line\">docker pull redis </span><br><span class=\"line\"><span class=\"comment\"># 根据 reids 镜像生成端口从内部6378映射到外部6379的容器，其名为 myredis</span></span><br><span class=\"line\">docker run -itd --name myredis -p <span class=\"number\">6378</span><span class=\"symbol\">:</span><span class=\"number\">6379</span> redis</span><br><span class=\"line\"><span class=\"comment\"># 查看当前的容器，获取CONTAINER ID</span></span><br><span class=\"line\">docker ps </span><br><span class=\"line\"><span class=\"comment\"># 根据容器id，进入容器内部</span></span><br><span class=\"line\">docker exec -it CONTAINERID bash/sh</span><br><span class=\"line\"><span class=\"comment\"># 重启/停止容器</span></span><br><span class=\"line\">docker restart/stop CONTAINERID</span><br><span class=\"line\"><span class=\"comment\"># 根据容器id，删除容器</span></span><br><span class=\"line\">docker rm -f CONTAINERID</span><br><span class=\"line\"><span class=\"comment\"># 删除本地redis镜像</span></span><br><span class=\"line\">docker rmi redis</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器生命周期\"><a href=\"#容器生命周期\" class=\"headerlink\" title=\"容器生命周期\"></a>容器生命周期</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个新的容器并运行一个命令  </span></span><br><span class=\"line\"><span class=\"comment\"># -t: 在新容器内指定一个伪终端或终端。</span></span><br><span class=\"line\"><span class=\"comment\"># -i: 允许你对容器内的标准输入 (STDIN) 进行交互</span></span><br><span class=\"line\"><span class=\"comment\"># -d: 后台运行</span></span><br><span class=\"line\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class=\"line\">docker run -itd --name customName -p <span class=\"number\">3000</span><span class=\"symbol\">:</span><span class=\"number\">3000</span> <span class=\"symbol\">nginx:</span>latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动一个或多个已经被停止的容器</span></span><br><span class=\"line\">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止一个运行中的容器</span></span><br><span class=\"line\">docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启容器</span></span><br><span class=\"line\">docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 杀掉一个运行中的容器</span></span><br><span class=\"line\">docker kill [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\">docker kill mynginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除一个或多个容器</span></span><br><span class=\"line\">docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂停容器中所有的进程</span></span><br><span class=\"line\">docker pause CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复容器中所有的进程</span></span><br><span class=\"line\">docker unpause CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个新的容器但不启动它，语法同run</span></span><br><span class=\"line\">docker create [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在运行的容器中执行命令</span></span><br><span class=\"line\">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class=\"line\">docker exec -it xxxid bash/sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器操作\"><a href=\"#容器操作\" class=\"headerlink\" title=\"容器操作\"></a>容器操作</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出容器  </span></span><br><span class=\"line\">docker ps [OPTIONS]</span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取容器/镜像的元数据</span></span><br><span class=\"line\">docker inspect [OPTIONS] NAME<span class=\"params\">|ID [NAME|</span>ID...]</span><br><span class=\"line\">docker inspect <span class=\"symbol\">mysql:</span><span class=\"number\">5.6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看容器中运行的进程信息，支持 ps 命令参数</span></span><br><span class=\"line\">docker top [OPTIONS] CONTAINER [ps OPTIONS]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接到正在运行中的容器</span></span><br><span class=\"line\">docker attach [OPTIONS] CONTAINER </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从服务器获取实时事件</span></span><br><span class=\"line\">docker events [OPTIONS]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取容器的日志</span></span><br><span class=\"line\">docker logs [OPTIONS] CONTAINER</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 阻塞运行直到容器停止，然后打印出它的退出代码</span></span><br><span class=\"line\">docker wait [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将文件系统作为一个tar归档文件导出到STDOUT</span></span><br><span class=\"line\">docker export [OPTIONS] CONTAINER</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用于列出指定的容器的端口映射，或者查找将 PRIVATE_PORT NAT 到面向公众的端口</span></span><br><span class=\"line\">docker port [OPTIONS] CONTAINER [PRIVATE_PORT/PROTO]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示容器资源的使用情况，包括：CPU、内存、网络 I/O等</span></span><br><span class=\"line\">docker stats [OPTIONS] [CONTAINER...]</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器rootfs命令\"><a href=\"#容器rootfs命令\" class=\"headerlink\" title=\"容器rootfs命令\"></a>容器rootfs命令</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从容器创建一个新的镜像</span></span><br><span class=\"line\">docker commit [OPTIONS] CONTAINER [REPOSITORY[<span class=\"symbol\">:TAG</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用于容器与主机之间的数据拷贝</span></span><br><span class=\"line\">docker cp </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查容器里文件结构的更改</span></span><br><span class=\"line\">docker diff [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure>\n<h3 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登陆/登出到一个Docker镜像仓库</span></span><br><span class=\"line\">docker login/logout [OPTIONS] [SERVER]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从镜像仓库中拉取或者更新指定镜像</span></span><br><span class=\"line\">docker pull [OPTIONS] NAME[<span class=\"symbol\">:TAG|</span>@DIGEST]</span><br><span class=\"line\">docker pull ngnix</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</span></span><br><span class=\"line\">docker push [OPTIONS] NAME[<span class=\"symbol\">:TAG</span>]</span><br><span class=\"line\">docker push <span class=\"symbol\">myimage:</span>v1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从Docker Hub查找镜像</span></span><br><span class=\"line\">docker search [OPTIONS] TERM</span><br></pre></td></tr></table></figure>\n<h3 id=\"镜像指令\"><a href=\"#镜像指令\" class=\"headerlink\" title=\"镜像指令\"></a>镜像指令</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出本地镜像</span></span><br><span class=\"line\">docker images [OPTIONS] [REPOSITORY[<span class=\"symbol\">:TAG</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地一个或多个镜像</span></span><br><span class=\"line\">docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 标记本地镜像，将其归入某一仓库</span></span><br><span class=\"line\">docker tag [OPTIONS] IMAGE[<span class=\"symbol\">:TAG</span>] [REGISTRYHOST/][USERNAME/]NAME[<span class=\"symbol\">:TAG</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令用于使用 Dockerfile 创建镜像</span></span><br><span class=\"line\">docker build [OPTIONS] PATH <span class=\"params\">| URL |</span> -</span><br><span class=\"line\">docker build -t imgageName .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定镜像的创建历史</span></span><br><span class=\"line\">docker history [OPTIONS] IMAGE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将指定镜像保存成 tar 归档文件</span></span><br><span class=\"line\">docker save [OPTIONS] IMAGE [IMAGE...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入使用 docker save 命令导出的镜像</span></span><br><span class=\"line\">docker load [OPTIONS]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从归档文件中创建镜像</span></span><br><span class=\"line\">docker import [OPTIONS] file<span class=\"params\">|URL|</span>- [REPOSITORY[<span class=\"symbol\">:TAG</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示 Docker 系统信息，包括镜像和容器数</span></span><br><span class=\"line\">docker info [OPTIONS]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示 Docker 版本信息</span></span><br><span class=\"line\">docker version [OPTIONS]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>创建一个名字为<code>Dockerfile</code>的文件。</p>\n<h3 id=\"简单示例-1\"><a href=\"#简单示例-1\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h3><p>一个依赖node的应用在docker中运行。其中的很多运行命令需要根据项目调整。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取最新的node版本，可以指定版本</span></span><br><span class=\"line\">FROM <span class=\"symbol\">node:</span>alpine</span><br><span class=\"line\"><span class=\"comment\"># 创建一个app文件夹</span></span><br><span class=\"line\">RUN mkdir -p /app</span><br><span class=\"line\"><span class=\"comment\"># 设置工作目录为app</span></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"><span class=\"comment\"># 拷贝当前项目到该文件夹下</span></span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\"><span class=\"comment\"># 可以设置淘宝镜像</span></span><br><span class=\"line\">RUN npm i --registry=<span class=\"symbol\">https:</span>/<span class=\"regexp\">/registry.npm.taobao.org</span></span><br><span class=\"line\"><span class=\"regexp\"># 安装依赖</span></span><br><span class=\"line\"><span class=\"regexp\">RUN npm install  </span></span><br><span class=\"line\"><span class=\"regexp\"># 运行前端打包指令</span></span><br><span class=\"line\"><span class=\"regexp\">RUN npm run build</span></span><br><span class=\"line\"><span class=\"regexp\"># 运行项目</span></span><br><span class=\"line\"><span class=\"regexp\">CMD [\"npm\",\"start\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM：定制的镜像都是基于 FROM 的镜像，等同于 docker pull </span><br><span class=\"line\">RUN：用于执行后面跟着的命令行命令。eg：RUN yarn（执行yarn依赖下载） 换行链接符 \\</span><br><span class=\"line\">COPY：将文件或目录复制到镜像中</span><br><span class=\"line\">CMD：指定容器创建时的默认命令</span><br><span class=\"line\">ENV：在容器内部设置环境变量</span><br><span class=\"line\">WORKDIR：设置后续指令的工作目录</span><br><span class=\"line\">VOLUME：为容器创建挂载点或声明卷</span><br><span class=\"line\">ARG：定义在构建过程中传递给构建器的变量，可使用 <span class=\"string\">\"docker build\"</span> 命令设置</span><br></pre></td></tr></table></figure>\n<h3 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker compose\"></a>docker compose</h3><p><code>docker-compose.yml</code>文件类似与<code>Dockerfile</code>文件，是另一种更快捷的配置文件。可以参考<a href=\"https://docs.docker.com/compose/\" target=\"_blank\" rel=\"noopener\">官网详情</a>。</p>\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><p>下面举例一种vue项目在docker环境中进行开发，本地文件改变时项目会热更新。</p>\n<h3 id=\"配置docker-compose\"><a href=\"#配置docker-compose\" class=\"headerlink\" title=\"配置docker-compose\"></a>配置docker-compose</h3><p>项目根目录放置docker-compose.yaml文件。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  vueapp:</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">vueapp:0.0.1</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">vueapp</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\">     <span class=\"comment\"># - NODE_ENV=production</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">NODE_ENV=development</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span></span><br><span class=\"line\"><span class=\"attr\">      context:</span> <span class=\"string\">./</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\">      <span class=\"comment\"># 映射容器的8080端口到本地的8080端口</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">8080</span><span class=\"string\">:8080</span>  </span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">./src:/app/src</span></span><br><span class=\"line\">      <span class=\"comment\">#- ./node_modules:/app/node_modules</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">\"npm run serve\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Dockerfile\"><a href=\"#配置Dockerfile\" class=\"headerlink\" title=\"配置Dockerfile\"></a>配置Dockerfile</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用官方的Node.js镜像作为基础镜像</span></span><br><span class=\"line\">FROM <span class=\"symbol\">node:</span>latest</span><br><span class=\"line\"><span class=\"comment\"># 创建app文件夹</span></span><br><span class=\"line\">RUN mkdir -p /app</span><br><span class=\"line\"><span class=\"comment\"># 设置工作目录为/app</span></span><br><span class=\"line\">WORKDIR /app </span><br><span class=\"line\"><span class=\"comment\"># 拷贝文件到该目录</span></span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\"><span class=\"comment\"># 安装项目依赖</span></span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\"><span class=\"comment\"># 启动开发服务器</span></span><br><span class=\"line\">CMD [<span class=\"string\">\"npm\"</span>, <span class=\"string\">\"run\"</span>, <span class=\"string\">\"serve\"</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 根据当前根目录项目构建项目，加-d可后台运行，如果没有镜像会构建镜像同时启动容器</span></span><br><span class=\"line\">docker-compose up -d</span><br><span class=\"line\">docker-compose up --force-recreate <span class=\"comment\"># 强制清空启动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭正在运行的容器</span></span><br><span class=\"line\">docker-compose down</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启容器</span></span><br><span class=\"line\">docker-compose restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p><code>.dockerignore</code>文件和<code>.gitignore</code>类似，用来处理<code>docker</code>要忽略的文件。</p>\n","more":"</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>新手推荐下载桌面版，可视化操作更简单，很多指令可以通过可视化进行。<a href=\"https://www.docker.com/products/docker-desktop/\" target=\"_blank\" rel=\"noopener\">下载地址</a>。</p>\n<h2 id=\"Docker命令\"><a href=\"#Docker命令\" class=\"headerlink\" title=\"Docker命令\"></a>Docker命令</h2><p>建议通过<code>docker 指令名称 --help</code>查看详细的指令信息。这里简单列举大概有哪些。</p>\n<h3 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载 redis 镜像</span></span><br><span class=\"line\">docker pull redis </span><br><span class=\"line\"><span class=\"comment\"># 根据 reids 镜像生成端口从内部6378映射到外部6379的容器，其名为 myredis</span></span><br><span class=\"line\">docker run -itd --name myredis -p <span class=\"number\">6378</span><span class=\"symbol\">:</span><span class=\"number\">6379</span> redis</span><br><span class=\"line\"><span class=\"comment\"># 查看当前的容器，获取CONTAINER ID</span></span><br><span class=\"line\">docker ps </span><br><span class=\"line\"><span class=\"comment\"># 根据容器id，进入容器内部</span></span><br><span class=\"line\">docker exec -it CONTAINERID bash/sh</span><br><span class=\"line\"><span class=\"comment\"># 重启/停止容器</span></span><br><span class=\"line\">docker restart/stop CONTAINERID</span><br><span class=\"line\"><span class=\"comment\"># 根据容器id，删除容器</span></span><br><span class=\"line\">docker rm -f CONTAINERID</span><br><span class=\"line\"><span class=\"comment\"># 删除本地redis镜像</span></span><br><span class=\"line\">docker rmi redis</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器生命周期\"><a href=\"#容器生命周期\" class=\"headerlink\" title=\"容器生命周期\"></a>容器生命周期</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个新的容器并运行一个命令  </span></span><br><span class=\"line\"><span class=\"comment\"># -t: 在新容器内指定一个伪终端或终端。</span></span><br><span class=\"line\"><span class=\"comment\"># -i: 允许你对容器内的标准输入 (STDIN) 进行交互</span></span><br><span class=\"line\"><span class=\"comment\"># -d: 后台运行</span></span><br><span class=\"line\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class=\"line\">docker run -itd --name customName -p <span class=\"number\">3000</span><span class=\"symbol\">:</span><span class=\"number\">3000</span> <span class=\"symbol\">nginx:</span>latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动一个或多个已经被停止的容器</span></span><br><span class=\"line\">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止一个运行中的容器</span></span><br><span class=\"line\">docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启容器</span></span><br><span class=\"line\">docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 杀掉一个运行中的容器</span></span><br><span class=\"line\">docker kill [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\">docker kill mynginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除一个或多个容器</span></span><br><span class=\"line\">docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂停容器中所有的进程</span></span><br><span class=\"line\">docker pause CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复容器中所有的进程</span></span><br><span class=\"line\">docker unpause CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个新的容器但不启动它，语法同run</span></span><br><span class=\"line\">docker create [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在运行的容器中执行命令</span></span><br><span class=\"line\">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class=\"line\">docker exec -it xxxid bash/sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器操作\"><a href=\"#容器操作\" class=\"headerlink\" title=\"容器操作\"></a>容器操作</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出容器  </span></span><br><span class=\"line\">docker ps [OPTIONS]</span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取容器/镜像的元数据</span></span><br><span class=\"line\">docker inspect [OPTIONS] NAME<span class=\"params\">|ID [NAME|</span>ID...]</span><br><span class=\"line\">docker inspect <span class=\"symbol\">mysql:</span><span class=\"number\">5.6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看容器中运行的进程信息，支持 ps 命令参数</span></span><br><span class=\"line\">docker top [OPTIONS] CONTAINER [ps OPTIONS]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接到正在运行中的容器</span></span><br><span class=\"line\">docker attach [OPTIONS] CONTAINER </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从服务器获取实时事件</span></span><br><span class=\"line\">docker events [OPTIONS]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取容器的日志</span></span><br><span class=\"line\">docker logs [OPTIONS] CONTAINER</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 阻塞运行直到容器停止，然后打印出它的退出代码</span></span><br><span class=\"line\">docker wait [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将文件系统作为一个tar归档文件导出到STDOUT</span></span><br><span class=\"line\">docker export [OPTIONS] CONTAINER</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用于列出指定的容器的端口映射，或者查找将 PRIVATE_PORT NAT 到面向公众的端口</span></span><br><span class=\"line\">docker port [OPTIONS] CONTAINER [PRIVATE_PORT/PROTO]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示容器资源的使用情况，包括：CPU、内存、网络 I/O等</span></span><br><span class=\"line\">docker stats [OPTIONS] [CONTAINER...]</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器rootfs命令\"><a href=\"#容器rootfs命令\" class=\"headerlink\" title=\"容器rootfs命令\"></a>容器rootfs命令</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从容器创建一个新的镜像</span></span><br><span class=\"line\">docker commit [OPTIONS] CONTAINER [REPOSITORY[<span class=\"symbol\">:TAG</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用于容器与主机之间的数据拷贝</span></span><br><span class=\"line\">docker cp </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查容器里文件结构的更改</span></span><br><span class=\"line\">docker diff [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure>\n<h3 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登陆/登出到一个Docker镜像仓库</span></span><br><span class=\"line\">docker login/logout [OPTIONS] [SERVER]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从镜像仓库中拉取或者更新指定镜像</span></span><br><span class=\"line\">docker pull [OPTIONS] NAME[<span class=\"symbol\">:TAG|</span>@DIGEST]</span><br><span class=\"line\">docker pull ngnix</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</span></span><br><span class=\"line\">docker push [OPTIONS] NAME[<span class=\"symbol\">:TAG</span>]</span><br><span class=\"line\">docker push <span class=\"symbol\">myimage:</span>v1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从Docker Hub查找镜像</span></span><br><span class=\"line\">docker search [OPTIONS] TERM</span><br></pre></td></tr></table></figure>\n<h3 id=\"镜像指令\"><a href=\"#镜像指令\" class=\"headerlink\" title=\"镜像指令\"></a>镜像指令</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出本地镜像</span></span><br><span class=\"line\">docker images [OPTIONS] [REPOSITORY[<span class=\"symbol\">:TAG</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地一个或多个镜像</span></span><br><span class=\"line\">docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 标记本地镜像，将其归入某一仓库</span></span><br><span class=\"line\">docker tag [OPTIONS] IMAGE[<span class=\"symbol\">:TAG</span>] [REGISTRYHOST/][USERNAME/]NAME[<span class=\"symbol\">:TAG</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令用于使用 Dockerfile 创建镜像</span></span><br><span class=\"line\">docker build [OPTIONS] PATH <span class=\"params\">| URL |</span> -</span><br><span class=\"line\">docker build -t imgageName .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定镜像的创建历史</span></span><br><span class=\"line\">docker history [OPTIONS] IMAGE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将指定镜像保存成 tar 归档文件</span></span><br><span class=\"line\">docker save [OPTIONS] IMAGE [IMAGE...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入使用 docker save 命令导出的镜像</span></span><br><span class=\"line\">docker load [OPTIONS]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从归档文件中创建镜像</span></span><br><span class=\"line\">docker import [OPTIONS] file<span class=\"params\">|URL|</span>- [REPOSITORY[<span class=\"symbol\">:TAG</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示 Docker 系统信息，包括镜像和容器数</span></span><br><span class=\"line\">docker info [OPTIONS]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示 Docker 版本信息</span></span><br><span class=\"line\">docker version [OPTIONS]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>创建一个名字为<code>Dockerfile</code>的文件。</p>\n<h3 id=\"简单示例-1\"><a href=\"#简单示例-1\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h3><p>一个依赖node的应用在docker中运行。其中的很多运行命令需要根据项目调整。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取最新的node版本，可以指定版本</span></span><br><span class=\"line\">FROM <span class=\"symbol\">node:</span>alpine</span><br><span class=\"line\"><span class=\"comment\"># 创建一个app文件夹</span></span><br><span class=\"line\">RUN mkdir -p /app</span><br><span class=\"line\"><span class=\"comment\"># 设置工作目录为app</span></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"><span class=\"comment\"># 拷贝当前项目到该文件夹下</span></span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\"><span class=\"comment\"># 可以设置淘宝镜像</span></span><br><span class=\"line\">RUN npm i --registry=<span class=\"symbol\">https:</span>/<span class=\"regexp\">/registry.npm.taobao.org</span></span><br><span class=\"line\"><span class=\"regexp\"># 安装依赖</span></span><br><span class=\"line\"><span class=\"regexp\">RUN npm install  </span></span><br><span class=\"line\"><span class=\"regexp\"># 运行前端打包指令</span></span><br><span class=\"line\"><span class=\"regexp\">RUN npm run build</span></span><br><span class=\"line\"><span class=\"regexp\"># 运行项目</span></span><br><span class=\"line\"><span class=\"regexp\">CMD [\"npm\",\"start\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM：定制的镜像都是基于 FROM 的镜像，等同于 docker pull </span><br><span class=\"line\">RUN：用于执行后面跟着的命令行命令。eg：RUN yarn（执行yarn依赖下载） 换行链接符 \\</span><br><span class=\"line\">COPY：将文件或目录复制到镜像中</span><br><span class=\"line\">CMD：指定容器创建时的默认命令</span><br><span class=\"line\">ENV：在容器内部设置环境变量</span><br><span class=\"line\">WORKDIR：设置后续指令的工作目录</span><br><span class=\"line\">VOLUME：为容器创建挂载点或声明卷</span><br><span class=\"line\">ARG：定义在构建过程中传递给构建器的变量，可使用 <span class=\"string\">\"docker build\"</span> 命令设置</span><br></pre></td></tr></table></figure>\n<h3 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker compose\"></a>docker compose</h3><p><code>docker-compose.yml</code>文件类似与<code>Dockerfile</code>文件，是另一种更快捷的配置文件。可以参考<a href=\"https://docs.docker.com/compose/\" target=\"_blank\" rel=\"noopener\">官网详情</a>。</p>\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><p>下面举例一种vue项目在docker环境中进行开发，本地文件改变时项目会热更新。</p>\n<h3 id=\"配置docker-compose\"><a href=\"#配置docker-compose\" class=\"headerlink\" title=\"配置docker-compose\"></a>配置docker-compose</h3><p>项目根目录放置docker-compose.yaml文件。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  vueapp:</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">vueapp:0.0.1</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">vueapp</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\">     <span class=\"comment\"># - NODE_ENV=production</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">NODE_ENV=development</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span></span><br><span class=\"line\"><span class=\"attr\">      context:</span> <span class=\"string\">./</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\">      <span class=\"comment\"># 映射容器的8080端口到本地的8080端口</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">8080</span><span class=\"string\">:8080</span>  </span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">./src:/app/src</span></span><br><span class=\"line\">      <span class=\"comment\">#- ./node_modules:/app/node_modules</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">\"npm run serve\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Dockerfile\"><a href=\"#配置Dockerfile\" class=\"headerlink\" title=\"配置Dockerfile\"></a>配置Dockerfile</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用官方的Node.js镜像作为基础镜像</span></span><br><span class=\"line\">FROM <span class=\"symbol\">node:</span>latest</span><br><span class=\"line\"><span class=\"comment\"># 创建app文件夹</span></span><br><span class=\"line\">RUN mkdir -p /app</span><br><span class=\"line\"><span class=\"comment\"># 设置工作目录为/app</span></span><br><span class=\"line\">WORKDIR /app </span><br><span class=\"line\"><span class=\"comment\"># 拷贝文件到该目录</span></span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\"><span class=\"comment\"># 安装项目依赖</span></span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\"><span class=\"comment\"># 启动开发服务器</span></span><br><span class=\"line\">CMD [<span class=\"string\">\"npm\"</span>, <span class=\"string\">\"run\"</span>, <span class=\"string\">\"serve\"</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 根据当前根目录项目构建项目，加-d可后台运行，如果没有镜像会构建镜像同时启动容器</span></span><br><span class=\"line\">docker-compose up -d</span><br><span class=\"line\">docker-compose up --force-recreate <span class=\"comment\"># 强制清空启动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭正在运行的容器</span></span><br><span class=\"line\">docker-compose down</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启容器</span></span><br><span class=\"line\">docker-compose restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p><code>.dockerignore</code>文件和<code>.gitignore</code>类似，用来处理<code>docker</code>要忽略的文件。</p>","categories":[],"tags":[{"name":"Docker","path":"api/tags/Docker.json"}]}